problem,prompt_name,code_index,code_segment,Size,Min,Average,Max,Exception
p3_find_n_smallest_number,prompt_1,1,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indexes""]",1000,0.0022235000506043434,0.0023621879960410296,0.007792300079017878,N/A
p3_find_n_smallest_number,prompt_1,1,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indexes""]",10000,0.022397799883037806,0.03282280600629747,0.08871400007046759,N/A
p3_find_n_smallest_number,prompt_1,1,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indexes""]",100000,0.3390476999338716,0.7424728560145013,1.1068915999494493,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_values = sorted_array[:arg2]\n    result = []\n    for value in smallest_values:\n        indices = [i for i, x in enumerate(arg1) if x == value]\n        result.extend(indices)\n    return sorted(result)']",1000,0.011158399982377887,0.01163996699033305,0.01219499995931983,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_values = sorted_array[:arg2]\n    result = []\n    for value in smallest_values:\n        indices = [i for i, x in enumerate(arg1) if x == value]\n        result.extend(indices)\n    return sorted(result)']",10000,0.1652636998333037,0.16780345799401403,0.1731908000074327,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_values = sorted_array[:arg2]\n    result = []\n    for value in smallest_values:\n        indices = [i for i, x in enumerate(arg1) if x == value]\n        result.extend(indices)\n    return sorted(result)']",100000,1.9611684000119567,1.9891454360005445,2.0200567001011223,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",1000,0.0031578000634908676,0.0033170490246266127,0.0036092998925596476,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",10000,0.030037200078368187,0.0311630720179528,0.031816900009289384,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",100000,0.3024478000588715,0.30785881898598744,0.3163638999685645,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.005967899924144149,0.006130463003646582,0.00674129999242723,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.10782369994558394,0.10959252700675279,0.11277920007705688,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,1.389747800072655,1.4135643120063468,1.4541895999573171,N/A
p3_find_n_smallest_number,prompt_1,5,"['def funcImp(arg1, arg2):\n    indices = []\n    for i in range(arg2):\n        smallest = arg1[0]\n        index = 0\n        for j in range(len(arg1)):\n            if arg1[j] < smallest:\n                smallest = arg1[j]\n                index = j\n        indices.append(index)\n        arg1.pop(index)\n    return indices']",1000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_1,5,"['def funcImp(arg1, arg2):\n    indices = []\n    for i in range(arg2):\n        smallest = arg1[0]\n        index = 0\n        for j in range(len(arg1)):\n            if arg1[j] < smallest:\n                smallest = arg1[j]\n                index = j\n        indices.append(index)\n        arg1.pop(index)\n    return indices']",10000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_1,5,"['def funcImp(arg1, arg2):\n    indices = []\n    for i in range(arg2):\n        smallest = arg1[0]\n        index = 0\n        for j in range(len(arg1)):\n            if arg1[j] < smallest:\n                smallest = arg1[j]\n                index = j\n        indices.append(index)\n        arg1.pop(index)\n    return indices']",100000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.006021799985319376,0.006256924993358552,0.008705300046131015,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.1079106000252068,0.10971954700769856,0.11267039994709194,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,1.391158499987796,1.4091650739894248,1.4471353001426905,N/A
p3_find_n_smallest_number,prompt_1,7,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        indexes.append(index)\n    return indexes']",1000,0.0032069000881165266,0.003497339989989996,0.004226100165396929,N/A
p3_find_n_smallest_number,prompt_1,7,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        indexes.append(index)\n    return indexes']",10000,0.08436090010218322,0.0863765519973822,0.09159980015829206,N/A
p3_find_n_smallest_number,prompt_1,7,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        indexes.append(index)\n    return indexes']",100000,1.2088883998803794,1.2466584750078618,1.2870294000022113,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, val) for i, val in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indexes = [sorted_list[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.009471999946981668,0.010130060992669315,0.012076799990609288,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, val) for i, val in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indexes = [sorted_list[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.15266250004060566,0.15710744100855664,0.17024930007755756,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, val) for i, val in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indexes = [sorted_list[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.2737815999425948,2.3092840540152975,2.5265274001285434,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arr, k):\n    sorted_arr = sorted(arr)\n    indexes = {}\n    for i in range(k):\n        index = arr.index(sorted_arr[i])\n        indexes[index] = sorted_arr[i]\n    return indexes']",1000,0.0032580001279711723,0.0034669500030577185,0.003796700155362487,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arr, k):\n    sorted_arr = sorted(arr)\n    indexes = {}\n    for i in range(k):\n        index = arr.index(sorted_arr[i])\n        indexes[index] = sorted_arr[i]\n    return indexes']",10000,0.08442030008882284,0.08643018000293523,0.08963599987328053,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arr, k):\n    sorted_arr = sorted(arr)\n    indexes = {}\n    for i in range(k):\n        index = arr.index(sorted_arr[i])\n        indexes[index] = sorted_arr[i]\n    return indexes']",100000,1.2049726000986993,1.2236320310132578,1.2765719001181424,N/A
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",1000,0.007302399957552552,0.00771071899915114,0.012858999893069267,N/A
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",10000,0.0861665999982506,0.08809021000051871,0.0995913001243025,N/A
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",100000,0.9473001000005752,0.9780332599952817,1.0259382999502122,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arr (list): A list of integers.\n    k (int): The number of smallest numbers to find.\n\n    Returns:\n    list: A list of the indices of the k smallest numbers in arr.\n    """"""\n    dict_indices = {num: i for i, num in enumerate(arr)}\n    arr.sort()\n    k_smallest_nums = arr[:k]\n    k_smallest_indices = [dict_indices[num] for num in k_smallest_nums]\n    return sorted(k_smallest_indices)']",1000,0.0029078000225126743,0.002970756010618061,0.0030927001498639584,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arr (list): A list of integers.\n    k (int): The number of smallest numbers to find.\n\n    Returns:\n    list: A list of the indices of the k smallest numbers in arr.\n    """"""\n    dict_indices = {num: i for i, num in enumerate(arr)}\n    arr.sort()\n    k_smallest_nums = arr[:k]\n    k_smallest_indices = [dict_indices[num] for num in k_smallest_nums]\n    return sorted(k_smallest_indices)']",10000,0.028285600012168288,0.028815429005771876,0.030857800040394068,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arr (list): A list of integers.\n    k (int): The number of smallest numbers to find.\n\n    Returns:\n    list: A list of the indices of the k smallest numbers in arr.\n    """"""\n    dict_indices = {num: i for i, num in enumerate(arr)}\n    arr.sort()\n    k_smallest_nums = arr[:k]\n    k_smallest_indices = [dict_indices[num] for num in k_smallest_nums]\n    return sorted(k_smallest_indices)']",100000,0.6468493998982012,0.6762515349895694,0.7208847000729293,N/A
p3_find_n_smallest_number,prompt_1,12,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for element in k_smallest:\n        index = arg1.index(element)\n        indexes.append(index)\n    return indexes']",1000,0.00333360000513494,0.0034767410159111025,0.003947800025343895,N/A
p3_find_n_smallest_number,prompt_1,12,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for element in k_smallest:\n        index = arg1.index(element)\n        indexes.append(index)\n    return indexes']",10000,0.08428950002416968,0.08685516699915752,0.10565589996986091,N/A
p3_find_n_smallest_number,prompt_1,12,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for element in k_smallest:\n        index = arg1.index(element)\n        indexes.append(index)\n    return indexes']",100000,1.2046562999021262,1.2222863430017605,1.2433562998194247,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    smallest_nums = unique_nums[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        indexes += index_dict[num]\n    return indexes']",1000,0.006412900052964687,0.0065797840175218884,0.006823700154200196,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    smallest_nums = unique_nums[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        indexes += index_dict[num]\n    return indexes']",10000,0.0748290999326855,0.07635028400691227,0.08026149985380471,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    smallest_nums = unique_nums[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        indexes += index_dict[num]\n    return indexes']",100000,1.5547251000534743,1.5906665150029584,1.675425099907443,N/A
p3_find_n_smallest_number,prompt_1,14,"[""def funcImp(arg1, arg2):\n    indices = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indices.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indices""]",1000,0.0021554999984800816,0.00233554799342528,0.007565499981865287,N/A
p3_find_n_smallest_number,prompt_1,14,"[""def funcImp(arg1, arg2):\n    indices = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indices.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indices""]",10000,0.022096999920904636,0.03283132100012153,0.08965780003927648,N/A
p3_find_n_smallest_number,prompt_1,14,"[""def funcImp(arg1, arg2):\n    indices = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indices.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indices""]",100000,0.33285839995369315,0.7374612970044836,1.077943200012669,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    dict_of_num = {}\n    list_of_num = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_list_of_num = sorted(list_of_num)\n    for i in range(arg2):\n        dict_of_num[sorted_list_of_num[i][1]] = sorted_list_of_num[i][0]\n    return sorted(list(dict_of_num.keys()))']",1000,0.0115726999938488,0.012115359005983919,0.014228599844500422,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    dict_of_num = {}\n    list_of_num = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_list_of_num = sorted(list_of_num)\n    for i in range(arg2):\n        dict_of_num[sorted_list_of_num[i][1]] = sorted_list_of_num[i][0]\n    return sorted(list(dict_of_num.keys()))']",10000,0.18067929986864328,0.18421556398039685,0.1892321000341326,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    dict_of_num = {}\n    list_of_num = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_list_of_num = sorted(list_of_num)\n    for i in range(arg2):\n        dict_of_num[sorted_list_of_num[i][1]] = sorted_list_of_num[i][0]\n    return sorted(list(dict_of_num.keys()))']",100000,2.8450621999800205,2.9033297290070914,3.0510116000659764,N/A
p3_find_n_smallest_number,prompt_1,16,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sortedList = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sortedList[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.00034769997000694275,0.0005432689911685884,0.009984599892050028,N/A
p3_find_n_smallest_number,prompt_1,16,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sortedList = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sortedList[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.00319460011087358,0.024521221003960817,0.14124000002630055,N/A
p3_find_n_smallest_number,prompt_1,16,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sortedList = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sortedList[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,1.5887567999307066,1.741719271009788,1.8042151001282036,N/A
p3_find_n_smallest_number,prompt_1,17,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    return indices']",1000,0.005968700163066387,0.006343465009704233,0.007812299998477101,N/A
p3_find_n_smallest_number,prompt_1,17,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    return indices']",10000,0.10875869984738529,0.11101920498069376,0.11317989998497069,N/A
p3_find_n_smallest_number,prompt_1,17,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    return indices']",100000,1.4069195999763906,1.4297954769898207,1.4911130999680609,N/A
p3_find_n_smallest_number,prompt_1,18,"['def funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers to be sorted.\n    arg2 (int): The value of k, i.e., the number of smallest values to be found.\n\n    Returns:\n    A list of integers that represent the indexes of the k smallest numbers in the array.\n    """"""\n    index_list = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        index_list.append(min_index)\n        arg1[min_index] = float(\'inf\')\n    return index_list']",1000,0.0021927000489085913,0.0023485389980487524,0.007661700015887618,N/A
p3_find_n_smallest_number,prompt_1,18,"['def funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers to be sorted.\n    arg2 (int): The value of k, i.e., the number of smallest values to be found.\n\n    Returns:\n    A list of integers that represent the indexes of the k smallest numbers in the array.\n    """"""\n    index_list = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        index_list.append(min_index)\n        arg1[min_index] = float(\'inf\')\n    return index_list']",10000,0.021975700045004487,0.03276566699612886,0.0876925999764353,N/A
p3_find_n_smallest_number,prompt_1,18,"['def funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers to be sorted.\n    arg2 (int): The value of k, i.e., the number of smallest values to be found.\n\n    Returns:\n    A list of integers that represent the indexes of the k smallest numbers in the array.\n    """"""\n    index_list = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        index_list.append(min_index)\n        arg1[min_index] = float(\'inf\')\n    return index_list']",100000,0.3328003999777138,0.7381532389926724,1.079745399998501,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr_sorted = sorted(arg1)\n    kth_smallest = arr_sorted[k - 1]\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            res.append(i)\n    return res']",1000,0.004266600124537945,0.00447100201388821,0.004940900020301342,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr_sorted = sorted(arg1)\n    kth_smallest = arr_sorted[k - 1]\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            res.append(i)\n    return res']",10000,0.09096770011819899,0.09266983799636364,0.0971121999900788,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr_sorted = sorted(arg1)\n    kth_smallest = arr_sorted[k - 1]\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            res.append(i)\n    return res']",100000,1.2255355999805033,1.2488774329936132,1.2755525999236852,N/A
p3_find_n_smallest_number,prompt_1,20,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)[:arg2]\n    result = []\n    for val in sorted_list:\n        result.append(dict_values[val])\n    return result']",1000,0.005586100043728948,0.005938172994647175,0.0064130001701414585,N/A
p3_find_n_smallest_number,prompt_1,20,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)[:arg2]\n    result = []\n    for val in sorted_list:\n        result.append(dict_values[val])\n    return result']",10000,0.10561860003508627,0.10864191300934181,0.11799589986912906,N/A
p3_find_n_smallest_number,prompt_1,20,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)[:arg2]\n    result = []\n    for val in sorted_list:\n        result.append(dict_values[val])\n    return result']",100000,1.6176535999402404,1.642958356991876,1.6747491001151502,N/A
p3_find_n_smallest_number,prompt_1,21,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",1000,0.0060749000404030085,0.006359213013201952,0.006801199866458774,N/A
p3_find_n_smallest_number,prompt_1,21,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",10000,0.10986090009100735,0.11153091701678931,0.11557410005480051,N/A
p3_find_n_smallest_number,prompt_1,21,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",100000,1.4062328999862075,1.4233195329783483,1.4572258999105543,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    indices = []\n    if arg2 <= len(arg1):\n        sorted_array = sorted(arg1)\n        for elem in sorted_array[:arg2]:\n            indices.append(arg1.index(elem))\n    return indices']",1000,0.003309299936518073,0.0034717600140720607,0.003800200065597892,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    indices = []\n    if arg2 <= len(arg1):\n        sorted_array = sorted(arg1)\n        for elem in sorted_array[:arg2]:\n            indices.append(arg1.index(elem))\n    return indices']",10000,0.08453089999966323,0.08654114501550794,0.09233130002394319,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    indices = []\n    if arg2 <= len(arg1):\n        sorted_array = sorted(arg1)\n        for elem in sorted_array[:arg2]:\n            indices.append(arg1.index(elem))\n    return indices']",100000,1.20120789995417,1.2280371900158935,1.2774926000274718,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    idxs = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return idxs']",1000,0.005710499826818705,0.006206505000591278,0.008555199950933456,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    idxs = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return idxs']",10000,0.10715040005743504,0.10864059902261942,0.11630910006351769,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    idxs = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return idxs']",100000,1.378904900047928,1.400042889022734,1.5070615001022816,N/A
p3_find_n_smallest_number,prompt_1,24,"['def funcImp(arg1, arg2):\n    tuples = list(enumerate(arg1))\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    indexes = [tup[0] for tup in sorted_tuples[:arg2]]\n    return indexes']",1000,0.008326900191605091,0.008865215990226716,0.012260599993169308,N/A
p3_find_n_smallest_number,prompt_1,24,"['def funcImp(arg1, arg2):\n    tuples = list(enumerate(arg1))\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    indexes = [tup[0] for tup in sorted_tuples[:arg2]]\n    return indexes']",10000,0.1419682998675853,0.14796669699484483,0.15901529998518527,N/A
p3_find_n_smallest_number,prompt_1,24,"['def funcImp(arg1, arg2):\n    tuples = list(enumerate(arg1))\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    indexes = [tup[0] for tup in sorted_tuples[:arg2]]\n    return indexes']",100000,2.160328699974343,2.228459637996275,2.2877668999135494,N/A
p3_find_n_smallest_number,prompt_1,25,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1)\n        indexes.append(arg1.index(min_val))\n        arg1.remove(min_val)\n    return indexes']",1000,0,0,0,	 exception: min() arg is an empty sequence
p3_find_n_smallest_number,prompt_1,25,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1)\n        indexes.append(arg1.index(min_val))\n        arg1.remove(min_val)\n    return indexes']",10000,0,0,0,	 exception: min() arg is an empty sequence
p3_find_n_smallest_number,prompt_1,25,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1)\n        indexes.append(arg1.index(min_val))\n        arg1.remove(min_val)\n    return indexes']",100000,0,0,0,	 exception: min() arg is an empty sequence
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",1000,0.0070229999255388975,0.007572772982530296,0.01218640012666583,N/A
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",10000,0.1103793999645859,0.11327740900451318,0.12463239999487996,N/A
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",100000,1.5799112999811769,1.6158839700068348,1.6864365001674742,N/A
p3_find_n_smallest_number,prompt_1,27,"['def funcImp(arg1, arg2):\n    """"""Returns the indices of the k smallest numbers in an unsorted list""""""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    result = [pair[0] for pair in sorted_dict[:arg2]]\n    return result']",1000,0.010110499802976847,0.010633295990992338,0.01257859985344112,N/A
p3_find_n_smallest_number,prompt_1,27,"['def funcImp(arg1, arg2):\n    """"""Returns the indices of the k smallest numbers in an unsorted list""""""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    result = [pair[0] for pair in sorted_dict[:arg2]]\n    return result']",10000,0.1654927998315543,0.1728565030102618,0.18445439985953271,N/A
p3_find_n_smallest_number,prompt_1,27,"['def funcImp(arg1, arg2):\n    """"""Returns the indices of the k smallest numbers in an unsorted list""""""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    result = [pair[0] for pair in sorted_dict[:arg2]]\n    return result']",100000,2.6161803998984396,2.670241786998231,2.7845085998997092,N/A
p3_find_n_smallest_number,prompt_1,28,"['def funcImp(arg1, arg2):\n    index_list = list(range(len(arg1)))\n    sorted_indexes = sorted(index_list, key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",1000,0.007103400072082877,0.007592415984254331,0.011747899930924177,N/A
p3_find_n_smallest_number,prompt_1,28,"['def funcImp(arg1, arg2):\n    index_list = list(range(len(arg1)))\n    sorted_indexes = sorted(index_list, key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",10000,0.11196099990047514,0.11506935499375687,0.12412709998898208,N/A
p3_find_n_smallest_number,prompt_1,28,"['def funcImp(arg1, arg2):\n    index_list = list(range(len(arg1)))\n    sorted_indexes = sorted(index_list, key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",100000,1.6435829000547528,1.6857785139977932,1.76733239996247,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arg1 = sorted(arg1)\n    for num in sorted_arg1[:arg2]:\n        indices.append(arg1.index(num))\n    return indices']",1000,0.003281199838966131,0.003555083004757762,0.005276300013065338,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arg1 = sorted(arg1)\n    for num in sorted_arg1[:arg2]:\n        indices.append(arg1.index(num))\n    return indices']",10000,0.08390149986371398,0.08711870500585064,0.09445989993400872,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arg1 = sorted(arg1)\n    for num in sorted_arg1[:arg2]:\n        indices.append(arg1.index(num))\n    return indices']",100000,1.207624200033024,1.228037505999673,1.2612054999917746,N/A
p3_find_n_smallest_number,prompt_1,30,"['def funcImp(arg1, arg2):\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    result = []\n    for i in range(arg2):\n        num = arg1.index(arg1_copy[i])\n        result.append(num)\n    result.sort()\n    return result']",1000,0.003257500007748604,0.0034603220084682106,0.003872800152748823,N/A
p3_find_n_smallest_number,prompt_1,30,"['def funcImp(arg1, arg2):\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    result = []\n    for i in range(arg2):\n        num = arg1.index(arg1_copy[i])\n        result.append(num)\n    result.sort()\n    return result']",10000,0.0837187001015991,0.08668155801249668,0.09457110008224845,N/A
p3_find_n_smallest_number,prompt_1,30,"['def funcImp(arg1, arg2):\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    result = []\n    for i in range(arg2):\n        num = arg1.index(arg1_copy[i])\n        result.append(num)\n    result.sort()\n    return result']",100000,1.1955971999559551,1.2281469650170767,1.2889545001089573,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    smallest_nums = []\n    for i in range(len(arg1)):\n        if len(smallest_nums) < k or arg1[i] < smallest_nums[-1][0]:\n            smallest_nums.append((arg1[i], i))\n            smallest_nums.sort()\n            if len(smallest_nums) > k:\n                smallest_nums.pop()\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(num[1])\n    return indexes']",1000,0.0037561000790446997,0.003875357008073479,0.004671800183132291,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    smallest_nums = []\n    for i in range(len(arg1)):\n        if len(smallest_nums) < k or arg1[i] < smallest_nums[-1][0]:\n            smallest_nums.append((arg1[i], i))\n            smallest_nums.sort()\n            if len(smallest_nums) > k:\n                smallest_nums.pop()\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(num[1])\n    return indexes']",10000,0.03491010004654527,0.03610120000317693,0.04314259998500347,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    smallest_nums = []\n    for i in range(len(arg1)):\n        if len(smallest_nums) < k or arg1[i] < smallest_nums[-1][0]:\n            smallest_nums.append((arg1[i], i))\n            smallest_nums.sort()\n            if len(smallest_nums) > k:\n                smallest_nums.pop()\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(num[1])\n    return indexes']",100000,0.3536873001139611,0.3627386060217395,0.43012239993549883,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, k):\n    if k > len(arg1):\n        return None\n    nums = {num: i for i, num in enumerate(arg1)}\n    arg1.sort()\n    indexes = [nums[arg1[i]] for i in range(k)]\n    return indexes']",1000,0.0027989998925477266,0.0029391790134832264,0.0031987999100238085,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, k):\n    if k > len(arg1):\n        return None\n    nums = {num: i for i, num in enumerate(arg1)}\n    arg1.sort()\n    indexes = [nums[arg1[i]] for i in range(k)]\n    return indexes']",10000,0.02769020013511181,0.028898612014018,0.03247009986080229,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, k):\n    if k > len(arg1):\n        return None\n    nums = {num: i for i, num in enumerate(arg1)}\n    arg1.sort()\n    indexes = [nums[arg1[i]] for i in range(k)]\n    return indexes']",100000,0.6349855998996645,0.699175420999527,0.7296720999293029,N/A
p3_find_n_smallest_number,prompt_1,33,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    indexes = [tup[1] for tup in sorted_lst[:arg2]]\n    return indexes']",1000,0.009397099958732724,0.009836352996062487,0.011168699944391847,N/A
p3_find_n_smallest_number,prompt_1,33,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    indexes = [tup[1] for tup in sorted_lst[:arg2]]\n    return indexes']",10000,0.1548002001363784,0.1601131899910979,0.16634909994900227,N/A
p3_find_n_smallest_number,prompt_1,33,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    indexes = [tup[1] for tup in sorted_lst[:arg2]]\n    return indexes']",100000,2.270892000058666,2.309093299000524,2.3578451999928802,N/A
p3_find_n_smallest_number,prompt_1,34,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    indexes = sorted(range(n), key=lambda x: arg1[x])[:arg2]\n    return indexes']",1000,0.007044399855658412,0.007444761008955538,0.009399699978530407,N/A
p3_find_n_smallest_number,prompt_1,34,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    indexes = sorted(range(n), key=lambda x: arg1[x])[:arg2]\n    return indexes']",10000,0.11456010001711547,0.11928467899095267,0.17363139986991882,N/A
p3_find_n_smallest_number,prompt_1,34,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    indexes = sorted(range(n), key=lambda x: arg1[x])[:arg2]\n    return indexes']",100000,1.594823099905625,1.635420941002667,1.709658200154081,N/A
p3_find_n_smallest_number,prompt_1,35,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    result = []\n    for i in range(arg2):\n        result.append(k_smallest[i][0])\n    return result']",1000,0.009995399974286556,0.010568790992256254,0.011758999899029732,N/A
p3_find_n_smallest_number,prompt_1,35,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    result = []\n    for i in range(arg2):\n        result.append(k_smallest[i][0])\n    return result']",10000,0.16278250003233552,0.17031578399706632,0.1952537999022752,N/A
p3_find_n_smallest_number,prompt_1,35,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    result = []\n    for i in range(arg2):\n        result.append(k_smallest[i][0])\n    return result']",100000,2.5813076000194997,2.635149954003282,2.819144499953836,N/A
p3_find_n_smallest_number,prompt_1,36,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array'\n    if arg2 == len(arg1):\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return sorted(indexes)""]",1000,0.002221000147983432,0.0024603359983302654,0.007797400001436472,N/A
p3_find_n_smallest_number,prompt_1,36,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array'\n    if arg2 == len(arg1):\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return sorted(indexes)""]",10000,0.021984399994835258,0.03293795000063256,0.08902389998547733,N/A
p3_find_n_smallest_number,prompt_1,36,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array'\n    if arg2 == len(arg1):\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return sorted(indexes)""]",100000,0.33991890004836023,0.7420319940103218,1.0828691001515836,N/A
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return []\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:k]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(index_dict[num])\n    return indexes']",1000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return []\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:k]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(index_dict[num])\n    return indexes']",10000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return []\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:k]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(index_dict[num])\n    return indexes']",100000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    value_index_pairs = {}\n    for index, value in enumerate(arg1):\n        value_index_pairs[value] = index\n    k_smallest_values = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for value in k_smallest_values:\n        index = value_index_pairs[value]\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",1000,0.0057471999898552895,0.006232916011940688,0.008085899986326694,N/A
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    value_index_pairs = {}\n    for index, value in enumerate(arg1):\n        value_index_pairs[value] = index\n    k_smallest_values = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for value in k_smallest_values:\n        index = value_index_pairs[value]\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",10000,0.10884200013242662,0.11186649200040848,0.12108150008134544,N/A
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    value_index_pairs = {}\n    for index, value in enumerate(arg1):\n        value_index_pairs[value] = index\n    k_smallest_values = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for value in k_smallest_values:\n        index = value_index_pairs[value]\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",100000,1.6414990001358092,1.6770892409910447,1.708340800134465,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",1000,0.005995600018650293,0.006543426006101072,0.009549699956551194,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",10000,0.10639999993145466,0.11047740299487487,0.11485940008424222,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",100000,1.407185300020501,1.432919361991808,1.4704760999884456,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.extend(index_dict[num][:arg2 - len(index_list)])\n    return sorted(index_list)""]",1000,0.008205699967220426,0.008669297005981206,0.009618999902158976,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.extend(index_dict[num][:arg2 - len(index_list)])\n    return sorted(index_list)""]",10000,0.13565890002064407,0.13943792299367488,0.14851679978892207,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.extend(index_dict[num][:arg2 - len(index_list)])\n    return sorted(index_list)""]",100000,2.16384069994092,2.209032640978694,2.263605499872938,N/A
p3_find_n_smallest_number,prompt_1,41,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(sorted_dict[i][0])\n    return k_smallest_indexes']",1000,0.010344799840822816,0.010837495983578265,0.012715100077912211,N/A
p3_find_n_smallest_number,prompt_1,41,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(sorted_dict[i][0])\n    return k_smallest_indexes']",10000,0.16428120015189052,0.17382928901119157,0.18498079990968108,N/A
p3_find_n_smallest_number,prompt_1,41,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(sorted_dict[i][0])\n    return k_smallest_indexes']",100000,2.6218288999516517,2.7004652630118655,3.0379101999569684,N/A
p3_find_n_smallest_number,prompt_1,42,"['def funcImp(arr, k):\n    """"""\n    This function takes in an array of integers and a number \'k\' and returns a list of the indexes of the k smallest numbers in the array.\n    """"""\n    arr_tuples = [(num, index) for index, num in enumerate(arr)]\n    arr_tuples.sort()\n    return [index for num, index in arr_tuples[:k]]']",1000,0.011408899910748005,0.011815723008476197,0.012767700012773275,N/A
p3_find_n_smallest_number,prompt_1,42,"['def funcImp(arr, k):\n    """"""\n    This function takes in an array of integers and a number \'k\' and returns a list of the indexes of the k smallest numbers in the array.\n    """"""\n    arr_tuples = [(num, index) for index, num in enumerate(arr)]\n    arr_tuples.sort()\n    return [index for num, index in arr_tuples[:k]]']",10000,0.17624980001710355,0.18509447601623832,0.20082549983635545,N/A
p3_find_n_smallest_number,prompt_1,42,"['def funcImp(arr, k):\n    """"""\n    This function takes in an array of integers and a number \'k\' and returns a list of the indexes of the k smallest numbers in the array.\n    """"""\n    arr_tuples = [(num, index) for index, num in enumerate(arr)]\n    arr_tuples.sort()\n    return [index for num, index in arr_tuples[:k]]']",100000,2.751484900014475,2.8858472390053795,3.5543638998642564,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",1000,0.003240699879825115,0.0035295670153573156,0.00869280006736517,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",10000,0.08430729992687702,0.08727456900058314,0.0954711998347193,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",100000,1.1945835000369698,1.2295226949988864,1.286688000196591,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in sorted_tuples[:arg2]]\n    return k_smallest_indexes']",1000,0.009573200019076467,0.010087269004434346,0.01563450018875301,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in sorted_tuples[:arg2]]\n    return k_smallest_indexes']",10000,0.15878699999302626,0.16356722697848455,0.17439180007204413,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in sorted_tuples[:arg2]]\n    return k_smallest_indexes']",100000,2.2515301001258194,2.333376570006367,2.376896600006148,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for num in sorted_list[:arg2]:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.003358700079843402,0.0035029559955000876,0.005452699959278107,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for num in sorted_list[:arg2]:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.08331659995019436,0.08664717201841995,0.09355290001258254,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for num in sorted_list[:arg2]:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,1.1961781000718474,1.2280727719934657,1.2664880000520498,N/A
p3_find_n_smallest_number,prompt_1,46,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_arg1[:arg2]']",1000,0.007248299894854426,0.007551192999817431,0.008963899919763207,N/A
p3_find_n_smallest_number,prompt_1,46,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_arg1[:arg2]']",10000,0.113088000100106,0.1172822210076265,0.12713510007597506,N/A
p3_find_n_smallest_number,prompt_1,46,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_arg1[:arg2]']",100000,1.5997313000261784,1.635524660006631,1.6951363000553101,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    values_and_indexes = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_and_indexes = sorted(values_and_indexes, key=lambda x: x[0])\n    k_smallest_indexes = [sorted_values_and_indexes[i][1] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.009383199969306588,0.009939627000130713,0.012659400003030896,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    values_and_indexes = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_and_indexes = sorted(values_and_indexes, key=lambda x: x[0])\n    k_smallest_indexes = [sorted_values_and_indexes[i][1] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.15167229995131493,0.15893425000598654,0.16318769985809922,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    values_and_indexes = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_and_indexes = sorted(values_and_indexes, key=lambda x: x[0])\n    k_smallest_indexes = [sorted_values_and_indexes[i][1] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.2588807998690754,2.301020982989576,2.3810663998592645,N/A
p3_find_n_smallest_number,prompt_1,48,"['def funcImp(arg1, arg2):\n    arr = [(elem, i) for i, elem in enumerate(arg1)]\n    arr.sort()\n    res = [elem[1] for elem in arr[:arg2]]\n    return res']",1000,0.011631000088527799,0.01217815098585561,0.016857299953699112,N/A
p3_find_n_smallest_number,prompt_1,48,"['def funcImp(arg1, arg2):\n    arr = [(elem, i) for i, elem in enumerate(arg1)]\n    arr.sort()\n    res = [elem[1] for elem in arr[:arg2]]\n    return res']",10000,0.17730279988609254,0.18118729199282824,0.1880604000762105,N/A
p3_find_n_smallest_number,prompt_1,48,"['def funcImp(arg1, arg2):\n    arr = [(elem, i) for i, elem in enumerate(arg1)]\n    arr.sort()\n    res = [elem[1] for elem in arr[:arg2]]\n    return res']",100000,2.788397599942982,2.8287444260087797,2.9545131002087146,N/A
p3_find_n_smallest_number,prompt_1,49,"['def funcImp(arg1, arg2):\n    value_to_index_map = {}\n    for i, value in enumerate(arg1):\n        if value not in value_to_index_map:\n            value_to_index_map[value] = [i]\n        else:\n            value_to_index_map[value].append(i)\n    unique_values = sorted(set(arg1))\n    smallest_values = unique_values[:arg2]\n    smallest_indices = []\n    for value in smallest_values:\n        smallest_indices += value_to_index_map[value][:arg2 - len(smallest_indices)]\n        if len(smallest_indices) == arg2:\n            break\n    return smallest_indices']",1000,0.006347400136291981,0.006632391000166536,0.00757679995149374,N/A
p3_find_n_smallest_number,prompt_1,49,"['def funcImp(arg1, arg2):\n    value_to_index_map = {}\n    for i, value in enumerate(arg1):\n        if value not in value_to_index_map:\n            value_to_index_map[value] = [i]\n        else:\n            value_to_index_map[value].append(i)\n    unique_values = sorted(set(arg1))\n    smallest_values = unique_values[:arg2]\n    smallest_indices = []\n    for value in smallest_values:\n        smallest_indices += value_to_index_map[value][:arg2 - len(smallest_indices)]\n        if len(smallest_indices) == arg2:\n            break\n    return smallest_indices']",10000,0.0742448999080807,0.0764637539931573,0.07883000001311302,N/A
p3_find_n_smallest_number,prompt_1,49,"['def funcImp(arg1, arg2):\n    value_to_index_map = {}\n    for i, value in enumerate(arg1):\n        if value not in value_to_index_map:\n            value_to_index_map[value] = [i]\n        else:\n            value_to_index_map[value].append(i)\n    unique_values = sorted(set(arg1))\n    smallest_values = unique_values[:arg2]\n    smallest_indices = []\n    for value in smallest_values:\n        smallest_indices += value_to_index_map[value][:arg2 - len(smallest_indices)]\n        if len(smallest_indices) == arg2:\n            break\n    return smallest_indices']",100000,1.5358883999288082,1.5730775100179017,1.6257064999081194,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    dict_arg1 = {}\n    for i in range(len(arg1)):\n        dict_arg1[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.append(dict_arg1[num])\n    return index_list']",1000,0.005549099994823337,0.005888488974887878,0.007195599842816591,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    dict_arg1 = {}\n    for i in range(len(arg1)):\n        dict_arg1[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.append(dict_arg1[num])\n    return index_list']",10000,0.10536450007930398,0.10784309200476855,0.11233879998326302,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    dict_arg1 = {}\n    for i in range(len(arg1)):\n        dict_arg1[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.append(dict_arg1[num])\n    return index_list']",100000,1.6005316998343915,1.6285895379795692,1.7299474999308586,N/A
p3_find_n_smallest_number,prompt_1,51,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        indexes.append(arg1.index(sorted_array[i]))\n    return indexes']",1000,0.003229700028896332,0.0035380259878002107,0.004679300123825669,N/A
p3_find_n_smallest_number,prompt_1,51,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        indexes.append(arg1.index(sorted_array[i]))\n    return indexes']",10000,0.08394530019722879,0.08627208800986409,0.09079679986461997,N/A
p3_find_n_smallest_number,prompt_1,51,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        indexes.append(arg1.index(sorted_array[i]))\n    return indexes']",100000,1.2003438000101596,1.215202824017033,1.2583166998811066,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, x) for i, x in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_index = indexed_list[i][0]\n        k_smallest_indices.append(k_smallest_index)\n    return k_smallest_indices']",1000,0.00914630014449358,0.009702584987971932,0.013592100003734231,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, x) for i, x in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_index = indexed_list[i][0]\n        k_smallest_indices.append(k_smallest_index)\n    return k_smallest_indices']",10000,0.14630549983121455,0.15176903598476202,0.15897590015083551,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, x) for i, x in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_index = indexed_list[i][0]\n        k_smallest_indices.append(k_smallest_index)\n    return k_smallest_indices']",100000,2.180532000027597,2.2242024720204063,2.3322862000204623,N/A
p3_find_n_smallest_number,prompt_1,53,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_num = {arg1[i]: i for i in range(n)}\n    sorted_num = sorted(arg1)\n    smallest_k = sorted_num[:arg2]\n    result = []\n    for x in smallest_k:\n        result.append(dict_num[x])\n    return result']",1000,0.005493399919942021,0.0059041189984418456,0.0071240998804569244,N/A
p3_find_n_smallest_number,prompt_1,53,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_num = {arg1[i]: i for i in range(n)}\n    sorted_num = sorted(arg1)\n    smallest_k = sorted_num[:arg2]\n    result = []\n    for x in smallest_k:\n        result.append(dict_num[x])\n    return result']",10000,0.1032124999910593,0.10689167901640757,0.11424749996513128,N/A
p3_find_n_smallest_number,prompt_1,53,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_num = {arg1[i]: i for i in range(n)}\n    sorted_num = sorted(arg1)\n    smallest_k = sorted_num[:arg2]\n    result = []\n    for x in smallest_k:\n        result.append(dict_num[x])\n    return result']",100000,1.6004247998353094,1.6207924139779062,1.6640366001520306,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    my_dict = {}\n    for i in range(len(arg1)):\n        my_dict[arg1[i]] = i\n    sorted_num = sorted(arg1)\n    res = []\n    for i in range(arg2):\n        index = my_dict[sorted_num[i]]\n        res.append(index)\n    return res']",1000,0.005627100123092532,0.006100737999659032,0.007637399947270751,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    my_dict = {}\n    for i in range(len(arg1)):\n        my_dict[arg1[i]] = i\n    sorted_num = sorted(arg1)\n    res = []\n    for i in range(arg2):\n        index = my_dict[sorted_num[i]]\n        res.append(index)\n    return res']",10000,0.1065328000113368,0.10875594699056819,0.11427480005659163,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    my_dict = {}\n    for i in range(len(arg1)):\n        my_dict[arg1[i]] = i\n    sorted_num = sorted(arg1)\n    res = []\n    for i in range(arg2):\n        index = my_dict[sorted_num[i]]\n        res.append(index)\n    return res']",100000,1.5966360000893474,1.6295376400114037,1.7034482001326978,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_k = sorted(arg1)[:k]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",1000,0.005822000093758106,0.006227699997834861,0.007957899942994118,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_k = sorted(arg1)[:k]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",10000,0.10694879991933703,0.10929465499240905,0.13211739994585514,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_k = sorted(arg1)[:k]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",100000,1.385816500056535,1.4082572389976122,1.442680099979043,N/A
p3_find_n_smallest_number,prompt_1,56,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexes = []\n        for i in range(arg2):\n            curr_min = min(arg1)\n            indexes.append(arg1.index(curr_min))\n            arg1.remove(curr_min)\n        return sorted(indexes)']",1000,1.859990879893303e-05,6.478901486843825e-05,0.0033476001117378473,N/A
p3_find_n_smallest_number,prompt_1,56,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexes = []\n        for i in range(arg2):\n            curr_min = min(arg1)\n            indexes.append(arg1.index(curr_min))\n            arg1.remove(curr_min)\n        return sorted(indexes)']",10000,1.8900027498602867e-05,0.004593983995728195,0.04438119987025857,N/A
p3_find_n_smallest_number,prompt_1,56,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexes = []\n        for i in range(arg2):\n            curr_min = min(arg1)\n            indexes.append(arg1.index(curr_min))\n            arg1.remove(curr_min)\n        return sorted(indexes)']",100000,0.2562686000019312,0.37820038898847996,0.4979072001297027,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(arg1, k):\n    indexes = []\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    for i in range(k):\n        index = arg1.index(arg1_copy[i])\n        indexes.append(index)\n    return indexes']",1000,0.0032102998811751604,0.0034334250004030764,0.003775699995458126,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(arg1, k):\n    indexes = []\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    for i in range(k):\n        index = arg1.index(arg1_copy[i])\n        indexes.append(index)\n    return indexes']",10000,0.08435090002603829,0.08621581099927425,0.09335199999623,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(arg1, k):\n    indexes = []\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    for i in range(k):\n        index = arg1.index(arg1_copy[i])\n        indexes.append(index)\n    return indexes']",100000,1.1911039999686182,1.206949242001865,1.2447416000068188,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    k_smallest_indexes = []\n    for num in k_smallest:\n        k_smallest_indexes.append(arg1.index(num))\n    return k_smallest_indexes']",1000,0.0033117998391389847,0.0035125469812192023,0.004223900148645043,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    k_smallest_indexes = []\n    for num in k_smallest:\n        k_smallest_indexes.append(arg1.index(num))\n    return k_smallest_indexes']",10000,0.0829511999618262,0.08563982899300754,0.09247949998825788,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    k_smallest_indexes = []\n    for num in k_smallest:\n        k_smallest_indexes.append(arg1.index(num))\n    return k_smallest_indexes']",100000,1.200601799879223,1.2142504650028423,1.2540105001535267,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[i] = num\n    sorted_d = dict(sorted(d.items(), key=lambda x: x[1])[:arg2])\n    return sorted(sorted_d.keys())']",1000,0.01011350005865097,0.010670633988920599,0.017455199966207147,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[i] = num\n    sorted_d = dict(sorted(d.items(), key=lambda x: x[1])[:arg2])\n    return sorted(sorted_d.keys())']",10000,0.1628328999504447,0.166334971988108,0.17365680006332695,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[i] = num\n    sorted_d = dict(sorted(d.items(), key=lambda x: x[1])[:arg2])\n    return sorted(sorted_d.keys())']",100000,2.520829000044614,2.57420174801955,2.715416500112042,N/A
p3_find_n_smallest_number,prompt_1,60,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    index_list = []\n    for i in range(arg2):\n        index_list.append(sorted_dict[i][0])\n    return index_list']",1000,0.010349499993026257,0.010788788986392319,0.014315299922600389,N/A
p3_find_n_smallest_number,prompt_1,60,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    index_list = []\n    for i in range(arg2):\n        index_list.append(sorted_dict[i][0])\n    return index_list']",10000,0.16186000010930002,0.16742748899152501,0.17399790021590889,N/A
p3_find_n_smallest_number,prompt_1,60,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    index_list = []\n    for i in range(arg2):\n        index_list.append(sorted_dict[i][0])\n    return index_list']",100000,2.5538802000228316,2.598078535993118,2.9896688000299037,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    elems = [(elem, i) for i, elem in enumerate(arg1)]\n    elems.sort()\n    indexes = [elem[1] for elem in elems[:arg2]]\n    return indexes']",1000,0.011581199942156672,0.012037203996442258,0.015614999923855066,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    elems = [(elem, i) for i, elem in enumerate(arg1)]\n    elems.sort()\n    indexes = [elem[1] for elem in elems[:arg2]]\n    return indexes']",10000,0.17559899995103478,0.1812652310100384,0.21194219985045493,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    elems = [(elem, i) for i, elem in enumerate(arg1)]\n    elems.sort()\n    indexes = [elem[1] for elem in elems[:arg2]]\n    return indexes']",100000,2.7691586001310498,2.835953452005051,2.9707125001586974,N/A
p3_find_n_smallest_number,prompt_1,62,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than size of input array.'\n    val_idx_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_pairs = sorted(val_idx_pairs, key=lambda x: x[0])\n    return [sorted_pairs[i][1] for i in range(arg2)]""]",1000,0.009541899897158146,0.010056547985877842,0.012151299975812435,N/A
p3_find_n_smallest_number,prompt_1,62,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than size of input array.'\n    val_idx_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_pairs = sorted(val_idx_pairs, key=lambda x: x[0])\n    return [sorted_pairs[i][1] for i in range(arg2)]""]",10000,0.15332289994694293,0.1579347410146147,0.16183979995548725,N/A
p3_find_n_smallest_number,prompt_1,62,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than size of input array.'\n    val_idx_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_pairs = sorted(val_idx_pairs, key=lambda x: x[0])\n    return [sorted_pairs[i][1] for i in range(arg2)]""]",100000,2.252953000133857,2.2895967880100945,2.379923600004986,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_numbers = sorted_list[:arg2]\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in smallest_numbers:\n            indexes.append(i)\n    return indexes']",1000,0.006253200117498636,0.0065142629877664145,0.007596600102260709,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_numbers = sorted_list[:arg2]\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in smallest_numbers:\n            indexes.append(i)\n    return indexes']",10000,0.108059799997136,0.11048246400430799,0.11457279999740422,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_numbers = sorted_list[:arg2]\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in smallest_numbers:\n            indexes.append(i)\n    return indexes']",100000,1.3938666000030935,1.4221187260071746,1.4649840001948178,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        indexes.append(arg1.index(sorted_arg1[i]))\n    return indexes']",1000,0.003207199973985553,0.0035161169967614114,0.006949699949473143,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        indexes.append(arg1.index(sorted_arg1[i]))\n    return indexes']",10000,0.08322879998013377,0.08525103899650276,0.08836599998176098,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        indexes.append(arg1.index(sorted_arg1[i]))\n    return indexes']",100000,1.1954909998457879,1.2121364039881155,1.2563493999186903,N/A
p3_find_n_smallest_number,prompt_1,65,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    if k <= len(arg1):\n        k_smallest_values = sorted(arg1)[:k]\n        for value in k_smallest_values:\n            index = arg1.index(value)\n            indexes.append(index)\n    return indexes']",1000,0.0032441001385450363,0.0034915679832920434,0.003916499903425574,N/A
p3_find_n_smallest_number,prompt_1,65,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    if k <= len(arg1):\n        k_smallest_values = sorted(arg1)[:k]\n        for value in k_smallest_values:\n            index = arg1.index(value)\n            indexes.append(index)\n    return indexes']",10000,0.08448589988984168,0.08693068000255152,0.10464309994131327,N/A
p3_find_n_smallest_number,prompt_1,65,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    if k <= len(arg1):\n        k_smallest_values = sorted(arg1)[:k]\n        for value in k_smallest_values:\n            index = arg1.index(value)\n            indexes.append(index)\n    return indexes']",100000,1.1990714001003653,1.221329784989357,1.2696989998221397,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",1000,0.005705100018531084,0.005979322001803666,0.006499799899756908,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",10000,0.10605560010299087,0.10856790199643002,0.11922620004042983,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",100000,1.3698970000259578,1.4004581050109117,1.4376758998259902,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1, arg2):\n    """"""Find the indexes of k smallest numbers in unsorted array""""""\n    sorted_array = sorted(arg1)\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(index_dict[sorted_array[i]])\n    return k_smallest_indexes']",1000,0.0058327000588178635,0.006273052000906319,0.008373700082302094,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1, arg2):\n    """"""Find the indexes of k smallest numbers in unsorted array""""""\n    sorted_array = sorted(arg1)\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(index_dict[sorted_array[i]])\n    return k_smallest_indexes']",10000,0.10892979986965656,0.1118109610164538,0.13381480006501079,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1, arg2):\n    """"""Find the indexes of k smallest numbers in unsorted array""""""\n    sorted_array = sorted(arg1)\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(index_dict[sorted_array[i]])\n    return k_smallest_indexes']",100000,1.6938011997845024,1.726547547976952,1.7757839001715183,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    index_dict = {i: arg1[i] for i in range(len(arg1))}\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.010177399963140488,0.01051312501076609,0.011401700088754296,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    index_dict = {i: arg1[i] for i in range(len(arg1))}\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.16144379996694624,0.16813681400613859,0.17828179989010096,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    index_dict = {i: arg1[i] for i in range(len(arg1))}\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.5636001999955624,2.636288765012287,2.7240730999037623,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    k_smallest_nums = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num and i not in indices:\n                indices.append(i)\n                break\n    return indices']",1000,0.00479709985665977,0.005106530997436493,0.007548199966549873,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    k_smallest_nums = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num and i not in indices:\n                indices.append(i)\n                break\n    return indices']",10000,0.11473330017179251,0.11787603300297633,0.1349934998434037,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    k_smallest_nums = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num and i not in indices:\n                indices.append(i)\n                break\n    return indices']",100000,1.652110799914226,1.6799233199912122,1.7405888999346644,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",1000,0.003342099953442812,0.003527581011876464,0.004255000036209822,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",10000,0.08291110000573099,0.08626289400272072,0.09389050002209842,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",100000,1.1968030000571162,1.23175493898103,1.317457800032571,N/A
p3_find_n_smallest_number,prompt_1,71,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'k is greater than the length of the list'\n    else:\n        k_smallest = sorted(arg1)[:k]\n        indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n        return indices""]",1000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,71,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'k is greater than the length of the list'\n    else:\n        k_smallest = sorted(arg1)[:k]\n        indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n        return indices""]",10000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,71,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'k is greater than the length of the list'\n    else:\n        k_smallest = sorted(arg1)[:k]\n        indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n        return indices""]",100000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,72,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    indexes.sort()\n    return indexes""]",1000,0.000336900120601058,0.0005089959944598377,0.010008600074797869,N/A
p3_find_n_smallest_number,prompt_1,72,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    indexes.sort()\n    return indexes""]",10000,0.00318130012601614,0.02474586999975145,0.13737519993446767,N/A
p3_find_n_smallest_number,prompt_1,72,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    indexes.sort()\n    return indexes""]",100000,1.620387400034815,1.749878390005324,1.8381197999697179,N/A
p3_find_n_smallest_number,prompt_1,73,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the array'\n    sorted_arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",1000,0.00034030014649033546,0.000512747997418046,0.00999179994687438,N/A
p3_find_n_smallest_number,prompt_1,73,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the array'\n    sorted_arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",10000,0.003205099841579795,0.024797590007074176,0.1390207998920232,N/A
p3_find_n_smallest_number,prompt_1,73,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the array'\n    sorted_arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",100000,1.6082093000877649,1.74991499400232,1.8371651999186724,N/A
p3_find_n_smallest_number,prompt_1,74,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indices[:arg2]']",1000,0.0071137999184429646,0.00756750100525096,0.009201599983498454,N/A
p3_find_n_smallest_number,prompt_1,74,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indices[:arg2]']",10000,0.11046510003507137,0.11393861600197852,0.16216880013234913,N/A
p3_find_n_smallest_number,prompt_1,74,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indices[:arg2]']",100000,1.5825000999029726,1.6469075430044904,1.7036135999951512,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    if k > len(arg1):\n        return indices\n    for i in range(k):\n        min_index = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[min_index] > arg1[j]:\n                min_index = j\n        indices.append(min_index)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n    return indices']",1000,0.0088984000030905,0.00932747099082917,0.010659099789336324,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    if k > len(arg1):\n        return indices\n    for i in range(k):\n        min_index = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[min_index] > arg1[j]:\n                min_index = j\n        indices.append(min_index)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n    return indices']",10000,0.094770000083372,0.09746937399962917,0.10695779998786747,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    if k > len(arg1):\n        return indices\n    for i in range(k):\n        min_index = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[min_index] > arg1[j]:\n                min_index = j\n        indices.append(min_index)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n    return indices']",100000,0.9713477999903262,0.9899375839857385,1.0369976998772472,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.003235999960452318,0.0035283829853869973,0.004401399986818433,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.08275129995308816,0.08567748601548374,0.0934971000533551,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,1.207465099869296,1.2334004389937037,1.2630001998040825,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = {num: arg1.index(num) for num in k_smallest}\n    return [indices[num] for num in k_smallest]']",1000,0.0032895999029278755,0.0035531680029816924,0.004254499915987253,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = {num: arg1.index(num) for num in k_smallest}\n    return [indices[num] for num in k_smallest]']",10000,0.08332420000806451,0.08713934598956258,0.09746820013970137,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = {num: arg1.index(num) for num in k_smallest}\n    return [indices[num] for num in k_smallest]']",100000,1.2033221998717636,1.2281170539953745,1.2618295999709517,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    sorted_indexes = sorted(range(n), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",1000,0.006977600045502186,0.0074025580123998225,0.008460900047793984,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    sorted_indexes = sorted(range(n), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",10000,0.1135950000025332,0.11652392600197345,0.12323509994894266,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    sorted_indexes = sorted(range(n), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",100000,1.5936322999186814,1.6259631620021537,1.7810420000459999,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indexes.append(index)\n    return indexes']",1000,0.0032450000289827585,0.003481080993078649,0.004457100061699748,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indexes.append(index)\n    return indexes']",10000,0.08313090004958212,0.08646363601088523,0.09451589989475906,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indexes.append(index)\n    return indexes']",100000,1.2040271998848766,1.2270196329895406,1.2556839000899345,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",1000,0.007029500091448426,0.007416389028076082,0.008014299906790257,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",10000,0.11006209999322891,0.1137177750072442,0.13002820010297,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",100000,1.5712230000644922,1.609506874990184,1.750616200035438,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",1000,0.0032275000121444464,0.003509517996571958,0.005300800083205104,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",10000,0.08388820011168718,0.0870985640003346,0.09557949984446168,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",100000,1.2050672001205385,1.225934235996101,1.2658416999038309,N/A
p3_find_n_smallest_number,prompt_1,82,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",1000,0.0021710998844355345,0.0023755110055208206,0.007699900073930621,N/A
p3_find_n_smallest_number,prompt_1,82,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",10000,0.022192399948835373,0.032948356005363166,0.08810340007767081,N/A
p3_find_n_smallest_number,prompt_1,82,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",100000,0.34245800017379224,0.739537556997966,1.0907712997868657,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [tup[1] for tup in lst[:arg2]]']",1000,0.011462599970400333,0.012027232011314481,0.01382009987719357,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [tup[1] for tup in lst[:arg2]]']",10000,0.17533400002866983,0.182916358995717,0.19234289997257292,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [tup[1] for tup in lst[:arg2]]']",100000,2.815239799907431,2.9148064890061507,3.3505893000401556,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_list = sorted(arg1)\n    indexes = []\n    for num in sorted_list[:arg2]:\n        indexes.append(index_dict[num])\n    return indexes']",1000,0.005785099929198623,0.0061166199971921745,0.010072000091895461,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_list = sorted(arg1)\n    indexes = []\n    for num in sorted_list[:arg2]:\n        indexes.append(index_dict[num])\n    return indexes']",10000,0.10972429998219013,0.11180022299289703,0.1164284001570195,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_list = sorted(arg1)\n    indexes = []\n    for num in sorted_list[:arg2]:\n        indexes.append(index_dict[num])\n    return indexes']",100000,1.6409681998193264,1.6798098379885777,1.758748299907893,N/A
p3_find_n_smallest_number,prompt_1,85,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid value of arg2, should be less than or equal to length of arg1'\n    dict1 = {}\n    for i, val in enumerate(arg1):\n        dict1[i] = val\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    index_list = []\n    for i in range(arg2):\n        index_list.append(k_smallest[i][0])\n    return index_list""]",1000,0.010192800080403686,0.010706498015206307,0.014290400082245469,N/A
p3_find_n_smallest_number,prompt_1,85,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid value of arg2, should be less than or equal to length of arg1'\n    dict1 = {}\n    for i, val in enumerate(arg1):\n        dict1[i] = val\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    index_list = []\n    for i in range(arg2):\n        index_list.append(k_smallest[i][0])\n    return index_list""]",10000,0.16766500007361174,0.17526266501285137,0.18559270002879202,N/A
p3_find_n_smallest_number,prompt_1,85,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid value of arg2, should be less than or equal to length of arg1'\n    dict1 = {}\n    for i, val in enumerate(arg1):\n        dict1[i] = val\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    index_list = []\n    for i in range(arg2):\n        index_list.append(k_smallest[i][0])\n    return index_list""]",100000,2.5887710999231786,2.6579502669977955,2.764851100044325,N/A
p3_find_n_smallest_number,prompt_1,86,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    arr_with_index = [(val, idx) for idx, val in enumerate(arr)]\n    arr_with_index.sort()\n    k_smallest = arr_with_index[:k]\n    k_smallest.sort(key=lambda x: x[1])\n    return [x[1] for x in k_smallest]']",1000,0.011626499937847257,0.012250613991636784,0.016316600143909454,N/A
p3_find_n_smallest_number,prompt_1,86,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    arr_with_index = [(val, idx) for idx, val in enumerate(arr)]\n    arr_with_index.sort()\n    k_smallest = arr_with_index[:k]\n    k_smallest.sort(key=lambda x: x[1])\n    return [x[1] for x in k_smallest]']",10000,0.17851169989444315,0.18615968700964003,0.20271759992465377,N/A
p3_find_n_smallest_number,prompt_1,86,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    arr_with_index = [(val, idx) for idx, val in enumerate(arr)]\n    arr_with_index.sort()\n    k_smallest = arr_with_index[:k]\n    k_smallest.sort(key=lambda x: x[1])\n    return [x[1] for x in k_smallest]']",100000,2.84713439992629,2.933878125997726,3.0312040999997407,N/A
p3_find_n_smallest_number,prompt_1,87,"['def funcImp(arg1, arg2):\n    index_value_dict = {index: value for index, value in enumerate(arg1)}\n    sorted_dict = sorted(index_value_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.010128699941560626,0.01061704899650067,0.013311099959537387,N/A
p3_find_n_smallest_number,prompt_1,87,"['def funcImp(arg1, arg2):\n    index_value_dict = {index: value for index, value in enumerate(arg1)}\n    sorted_dict = sorted(index_value_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.16315549984574318,0.17183897400042042,0.17977420007809997,N/A
p3_find_n_smallest_number,prompt_1,87,"['def funcImp(arg1, arg2):\n    index_value_dict = {index: value for index, value in enumerate(arg1)}\n    sorted_dict = sorted(index_value_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.566767399897799,2.6456003430043347,2.989607499912381,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_idx']",1000,0.007084999931976199,0.007521690013818443,0.011596400057896972,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_idx']",10000,0.10990399983711541,0.11310911499429493,0.1511335999239236,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_idx']",100000,1.5797198999207467,1.610857912984211,1.6714372001588345,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        indices[num] = i\n    sorted_nums = sorted(arg1)[:arg2]\n    result = [indices[num] for num in sorted_nums]\n    return result']",1000,0.005857399897649884,0.006175584997981787,0.006632500095292926,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        indices[num] = i\n    sorted_nums = sorted(arg1)[:arg2]\n    result = [indices[num] for num in sorted_nums]\n    return result']",10000,0.10804260009899735,0.11138181100366637,0.11840469995513558,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        indices[num] = i\n    sorted_nums = sorted(arg1)[:arg2]\n    result = [indices[num] for num in sorted_nums]\n    return result']",100000,1.6508028998505324,1.6933996520005166,1.744173299986869,N/A
p3_find_n_smallest_number,prompt_1,90,"['def funcImp(arg1, arg2):\n    indexed_list = zip(range(len(arg1)), arg1)\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])[:arg2]\n    sorted_list.sort()\n    result = [x[0] for x in sorted_list]\n    return result']",1000,0.008144499966874719,0.008603917988948525,0.011241199914366007,N/A
p3_find_n_smallest_number,prompt_1,90,"['def funcImp(arg1, arg2):\n    indexed_list = zip(range(len(arg1)), arg1)\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])[:arg2]\n    sorted_list.sort()\n    result = [x[0] for x in sorted_list]\n    return result']",10000,0.1397620001807809,0.14481270799413323,0.15509559982456267,N/A
p3_find_n_smallest_number,prompt_1,90,"['def funcImp(arg1, arg2):\n    indexed_list = zip(range(len(arg1)), arg1)\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])[:arg2]\n    sorted_list.sort()\n    result = [x[0] for x in sorted_list]\n    return result']",100000,2.060645499965176,2.107769625999499,2.166692500002682,N/A
p3_find_n_smallest_number,prompt_1,91,"['def funcImp(arg1, arg2):\n    sortedList = sorted(arg1)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(sortedList[i]))\n    return indexes']",1000,0.003225899999961257,0.0034786429861560463,0.0042624999769032,N/A
p3_find_n_smallest_number,prompt_1,91,"['def funcImp(arg1, arg2):\n    sortedList = sorted(arg1)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(sortedList[i]))\n    return indexes']",10000,0.08300750004127622,0.08667383999563753,0.09495219984091818,N/A
p3_find_n_smallest_number,prompt_1,91,"['def funcImp(arg1, arg2):\n    sortedList = sorted(arg1)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(sortedList[i]))\n    return indexes']",100000,1.1989466999657452,1.214326252990868,1.2391801001504064,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.005797199904918671,0.006122364995535463,0.00682709994725883,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.10687829996459186,0.10954097000183538,0.1273297998122871,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,1.373339300043881,1.3971888380101882,1.4250678999815136,N/A
p3_find_n_smallest_number,prompt_1,93,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    result = []\n    for num in k_smallest:\n        result += index_dict[num]\n    return sorted(result)']",1000,0.00836510001681745,0.008671826010104269,0.009236100129783154,N/A
p3_find_n_smallest_number,prompt_1,93,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    result = []\n    for num in k_smallest:\n        result += index_dict[num]\n    return sorted(result)']",10000,0.13515390013344586,0.1383016059966758,0.14746690005995333,N/A
p3_find_n_smallest_number,prompt_1,93,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    result = []\n    for num in k_smallest:\n        result += index_dict[num]\n    return sorted(result)']",100000,2.134020400000736,2.1886648499919104,2.2626708999741822,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indexes = sorted_indexes[:k]\n    return k_indexes']",1000,0.007089400198310614,0.007481375001370907,0.00866719987243414,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indexes = sorted_indexes[:k]\n    return k_indexes']",10000,0.11306809983216226,0.11567385101923719,0.11911460012197495,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indexes = sorted_indexes[:k]\n    return k_indexes']",100000,1.5708209001459181,1.604534376002848,1.6846271001268178,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",1000,0.007053999928757548,0.007483539001550525,0.00933720008470118,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",10000,0.1106552998535335,0.11366367798764258,0.12200449989177287,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",100000,1.585133400047198,1.619655038996134,1.6820821999572217,N/A
p3_find_n_smallest_number,prompt_1,96,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [sorted_arr[i][0] for i in range(arg2)]']",1000,0.008284500101581216,0.00877064999891445,0.010933199897408485,N/A
p3_find_n_smallest_number,prompt_1,96,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [sorted_arr[i][0] for i in range(arg2)]']",10000,0.13821620005182922,0.1420371530065313,0.1528701998759061,N/A
p3_find_n_smallest_number,prompt_1,96,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [sorted_arr[i][0] for i in range(arg2)]']",100000,2.055529800010845,2.105779474002775,2.1636467000935227,N/A
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        pivot = random.choice(arr)\n        lows = [num for num in arr if num < pivot]\n        highs = [num for num in arr if num > pivot]\n        pivots = [num for num in arr if num == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == arg2:\n            break\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        pivot = random.choice(arr)\n        lows = [num for num in arr if num < pivot]\n        highs = [num for num in arr if num > pivot]\n        pivots = [num for num in arr if num == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == arg2:\n            break\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        pivot = random.choice(arr)\n        lows = [num for num in arr if num < pivot]\n        highs = [num for num in arr if num > pivot]\n        pivots = [num for num in arr if num == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == arg2:\n            break\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    k_smallest = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            k_smallest_indices.append(i)\n    return k_smallest_indices']",1000,0.005859700031578541,0.006260345987975598,0.007161800051108003,N/A
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    k_smallest = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            k_smallest_indices.append(i)\n    return k_smallest_indices']",10000,0.10628900001756847,0.10920079998904839,0.1124143002089113,N/A
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    k_smallest = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            k_smallest_indices.append(i)\n    return k_smallest_indices']",100000,1.3808601999189705,1.402634867017623,1.4378907999489456,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        value, index = heapq.heappop(heap)\n        indexes.append(index)\n    return indexes']",1000,0.0049848000053316355,0.005211306014098227,0.005635200068354607,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        value, index = heapq.heappop(heap)\n        indexes.append(index)\n    return indexes']",10000,0.06493750005029142,0.06656449598493054,0.06858540000393987,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        value, index = heapq.heappop(heap)\n        indexes.append(index)\n    return indexes']",100000,0.7477164999581873,0.7729685489996336,0.8311026999726892,N/A
p3_find_n_smallest_number,prompt_1,100,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the index of the k smallest numbers in an unsorted array.\n    \n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer representing the number of smallest values to return\n    \n    Returns:\n    a list of the indexes of the k smallest values\n    """"""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])[:arg2]\n    k_indexes = [x[0] for x in sorted_dict]\n    return k_indexes']",1000,0.01006020000204444,0.010620329012162984,0.012525300029665232,N/A
p3_find_n_smallest_number,prompt_1,100,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the index of the k smallest numbers in an unsorted array.\n    \n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer representing the number of smallest values to return\n    \n    Returns:\n    a list of the indexes of the k smallest values\n    """"""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])[:arg2]\n    k_indexes = [x[0] for x in sorted_dict]\n    return k_indexes']",10000,0.16127729997970164,0.1675546639971435,0.17758829984813929,N/A
p3_find_n_smallest_number,prompt_1,100,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the index of the k smallest numbers in an unsorted array.\n    \n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer representing the number of smallest values to return\n    \n    Returns:\n    a list of the indexes of the k smallest values\n    """"""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])[:arg2]\n    k_indexes = [x[0] for x in sorted_dict]\n    return k_indexes']",100000,2.497546800179407,2.5831344769941644,2.755925100063905,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arr[i], i))\n    result = []\n    for _, i in heap:\n        result.append(i)\n    return result']",1000,0.0029722999315708876,0.00311522601172328,0.0032761001493781805,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arr[i], i))\n    result = []\n    for _, i in heap:\n        result.append(i)\n    return result']",10000,0.028957700124010444,0.030034487009979783,0.0319931001868099,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arr[i], i))\n    result = []\n    for _, i in heap:\n        result.append(i)\n    return result']",100000,0.2926817999687046,0.29740505900699643,0.31491319998167455,N/A
p3_find_n_smallest_number,prompt_2,2,"['def funcImp(arg1, arg2):\n\n    def quickSelect(arr, k):\n        pivot = arr[len(arr) // 2]\n        lows = [el for el in arr if el < pivot]\n        highs = [el for el in arr if el > pivot]\n        pivots = [el for el in arr if el == pivot]\n        if k < len(lows):\n            return quickSelect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickSelect(highs, k - len(lows) - len(pivots))\n    kthsmallest = quickSelect(arg1, arg2 - 1)\n    indexes = [idx for idx, val in enumerate(arg1) if val <= kthsmallest]\n    return indexes[:arg2]']",1000,0.009162100031971931,0.009722198988310993,0.011567699955776334,N/A
p3_find_n_smallest_number,prompt_2,2,"['def funcImp(arg1, arg2):\n\n    def quickSelect(arr, k):\n        pivot = arr[len(arr) // 2]\n        lows = [el for el in arr if el < pivot]\n        highs = [el for el in arr if el > pivot]\n        pivots = [el for el in arr if el == pivot]\n        if k < len(lows):\n            return quickSelect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickSelect(highs, k - len(lows) - len(pivots))\n    kthsmallest = quickSelect(arg1, arg2 - 1)\n    indexes = [idx for idx, val in enumerate(arg1) if val <= kthsmallest]\n    return indexes[:arg2]']",10000,0.14319069986231625,0.1458601070055738,0.1487560998648405,N/A
p3_find_n_smallest_number,prompt_2,2,"['def funcImp(arg1, arg2):\n\n    def quickSelect(arr, k):\n        pivot = arr[len(arr) // 2]\n        lows = [el for el in arr if el < pivot]\n        highs = [el for el in arr if el > pivot]\n        pivots = [el for el in arr if el == pivot]\n        if k < len(lows):\n            return quickSelect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickSelect(highs, k - len(lows) - len(pivots))\n    kthsmallest = quickSelect(arg1, arg2 - 1)\n    indexes = [idx for idx, val in enumerate(arg1) if val <= kthsmallest]\n    return indexes[:arg2]']",100000,1.056501999963075,1.0730929590039886,1.1006112999748439,N/A
p3_find_n_smallest_number,prompt_2,3,"['def funcImp(arg1, arg2):\n    import heapq\n    res = heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))\n    indexes = [idx for num, idx in res]\n    return indexes']",1000,0.005721299909055233,0.006028474015183746,0.00918490020558238,N/A
p3_find_n_smallest_number,prompt_2,3,"['def funcImp(arg1, arg2):\n    import heapq\n    res = heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))\n    indexes = [idx for num, idx in res]\n    return indexes']",10000,0.05373789998702705,0.05568380099488422,0.0668785001616925,N/A
p3_find_n_smallest_number,prompt_2,3,"['def funcImp(arg1, arg2):\n    import heapq\n    res = heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))\n    indexes = [idx for num, idx in res]\n    return indexes']",100000,0.547541500069201,0.5577102819923312,0.5793432001955807,N/A
p3_find_n_smallest_number,prompt_2,4,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        if not arr:\n            return []\n        else:\n            pivot = arr[0]\n            left = [x for x in arr if x < pivot]\n            right = [x for x in arr if x > pivot]\n            count = len(arr) - len(left) - len(right)\n            if k < len(left):\n                return quickselect(left, k)\n            elif k < len(left) + count:\n                return pivot\n            else:\n                return quickselect(right, k - len(left) - count)\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",1000,0.006110199959948659,0.006392284992616623,0.007918999996036291,N/A
p3_find_n_smallest_number,prompt_2,4,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        if not arr:\n            return []\n        else:\n            pivot = arr[0]\n            left = [x for x in arr if x < pivot]\n            right = [x for x in arr if x > pivot]\n            count = len(arr) - len(left) - len(right)\n            if k < len(left):\n                return quickselect(left, k)\n            elif k < len(left) + count:\n                return pivot\n            else:\n                return quickselect(right, k - len(left) - count)\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",10000,0.07288319990038872,0.07472072598291561,0.07728119986131787,N/A
p3_find_n_smallest_number,prompt_2,4,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        if not arr:\n            return []\n        else:\n            pivot = arr[0]\n            left = [x for x in arr if x < pivot]\n            right = [x for x in arr if x > pivot]\n            count = len(arr) - len(left) - len(right)\n            if k < len(left):\n                return quickselect(left, k)\n            elif k < len(left) + count:\n                return pivot\n            else:\n                return quickselect(right, k - len(left) - count)\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",100000,0.8596111000515521,0.8735179810016416,0.9277081000618637,N/A
p3_find_n_smallest_number,prompt_2,5,"['def funcImp(arg1, arg2):\n    indexed_elements = [(i, v) for i, v in enumerate(arg1)]\n    sorted_elements = sorted(indexed_elements, key=lambda x: x[1])\n    k_smallest_elements = sorted_elements[:arg2]\n    return [i for i, _ in k_smallest_elements]']",1000,0.009606000036001205,0.010154846985824407,0.013832899974659085,N/A
p3_find_n_smallest_number,prompt_2,5,"['def funcImp(arg1, arg2):\n    indexed_elements = [(i, v) for i, v in enumerate(arg1)]\n    sorted_elements = sorted(indexed_elements, key=lambda x: x[1])\n    k_smallest_elements = sorted_elements[:arg2]\n    return [i for i, _ in k_smallest_elements]']",10000,0.15153919998556376,0.15597240498522297,0.16051570000126958,N/A
p3_find_n_smallest_number,prompt_2,5,"['def funcImp(arg1, arg2):\n    indexed_elements = [(i, v) for i, v in enumerate(arg1)]\n    sorted_elements = sorted(indexed_elements, key=lambda x: x[1])\n    k_smallest_elements = sorted_elements[:arg2]\n    return [i for i, _ in k_smallest_elements]']",100000,2.2444332998711616,2.2940721779945306,2.4897743999026716,N/A
p3_find_n_smallest_number,prompt_2,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        raise ValueError('Invalid value for arg2')\n    if n == 0:\n        return []\n    if n == 1:\n        return [(0, arg1[0])]\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    result = [(heapq.heappop(heap)[1], arg1[i]) for i in range(arg2)]\n    return sorted(result)""]",1000,0.0030620000325143337,0.0032455549878068267,0.0035308999940752983,N/A
p3_find_n_smallest_number,prompt_2,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        raise ValueError('Invalid value for arg2')\n    if n == 0:\n        return []\n    if n == 1:\n        return [(0, arg1[0])]\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    result = [(heapq.heappop(heap)[1], arg1[i]) for i in range(arg2)]\n    return sorted(result)""]",10000,0.029650700045749545,0.03093474398832768,0.0390045999083668,N/A
p3_find_n_smallest_number,prompt_2,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        raise ValueError('Invalid value for arg2')\n    if n == 0:\n        return []\n    if n == 1:\n        return [(0, arg1[0])]\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    result = [(heapq.heappop(heap)[1], arg1[i]) for i in range(arg2)]\n    return sorted(result)""]",100000,0.30220480007119477,0.3070430699945427,0.3159481999464333,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return sorted(heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1]))']",1000,0.004532699938863516,0.00477422600844875,0.006132900016382337,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return sorted(heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1]))']",10000,0.042099400190636516,0.043364946998190136,0.04633600008673966,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return sorted(heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1]))']",100000,0.4354121000505984,0.44165275698062034,0.4585276001598686,N/A
p3_find_n_smallest_number,prompt_2,8,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return indexes']",1000,0.007011699955910444,0.007433634020853788,0.009031199850142002,N/A
p3_find_n_smallest_number,prompt_2,8,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return indexes']",10000,0.11011420004069805,0.1127874470106326,0.11763669992797077,N/A
p3_find_n_smallest_number,prompt_2,8,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return indexes']",100000,1.5898359999991953,1.6144997610012068,1.68192210001871,N/A
p3_find_n_smallest_number,prompt_2,9,"['def funcImp(arg1, arg2):\n    k_smallest = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(k_smallest)\n    k_smallest = [heapq.heappop(k_smallest) for _ in range(arg2)]\n    return sorted((idx for num, idx in k_smallest))']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,9,"['def funcImp(arg1, arg2):\n    k_smallest = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(k_smallest)\n    k_smallest = [heapq.heappop(k_smallest) for _ in range(arg2)]\n    return sorted((idx for num, idx in k_smallest))']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,9,"['def funcImp(arg1, arg2):\n    k_smallest = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(k_smallest)\n    k_smallest = [heapq.heappop(k_smallest) for _ in range(arg2)]\n    return sorted((idx for num, idx in k_smallest))']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    result = [heapq.heappop(heap) for _ in range(len(heap))]\n    result.sort(key=lambda x: x[1])\n    return [x[1] for x in result]']",1000,0.004301399923861027,0.004443818000145257,0.004729299806058407,N/A
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    result = [heapq.heappop(heap) for _ in range(len(heap))]\n    result.sort(key=lambda x: x[1])\n    return [x[1] for x in result]']",10000,0.04038530006073415,0.04170980500988662,0.04550020000897348,N/A
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    result = [heapq.heappop(heap) for _ in range(len(heap))]\n    result.sort(key=lambda x: x[1])\n    return [x[1] for x in result]']",100000,0.40620860015042126,0.413002442009747,0.43429429992102087,N/A
p3_find_n_smallest_number,prompt_2,11,"['def funcImp(arg1, arg2):\n    idx = list(range(len(arg1)))\n    idx.sort(key=lambda i: arg1[i])\n    return idx[:arg2]']",1000,0.007033499889075756,0.00743980199797079,0.008182500023394823,N/A
p3_find_n_smallest_number,prompt_2,11,"['def funcImp(arg1, arg2):\n    idx = list(range(len(arg1)))\n    idx.sort(key=lambda i: arg1[i])\n    return idx[:arg2]']",10000,0.11127359978854656,0.11327222798252479,0.12152200005948544,N/A
p3_find_n_smallest_number,prompt_2,11,"['def funcImp(arg1, arg2):\n    idx = list(range(len(arg1)))\n    idx.sort(key=lambda i: arg1[i])\n    return idx[:arg2]']",100000,1.5936083998531103,1.6210370920109562,1.6797960998956114,N/A
p3_find_n_smallest_number,prompt_2,12,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    indices = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    indices.sort()\n    return indices""]",1000,0.0022061998024582863,0.002364223999902606,0.007724799914285541,N/A
p3_find_n_smallest_number,prompt_2,12,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    indices = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    indices.sort()\n    return indices""]",10000,0.023118600016459823,0.033643767004832625,0.09115079999901354,N/A
p3_find_n_smallest_number,prompt_2,12,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    indices = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    indices.sort()\n    return indices""]",100000,0.3342128999065608,0.743515469005797,1.0841202998999506,N/A
p3_find_n_smallest_number,prompt_2,13,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    smallest_indices = []\n    for j in range(arg2):\n        smallest_indices.append(dict_values[sorted_list[j]])\n    return smallest_indices']",1000,0.005679799942299724,0.0060321829887107015,0.006990899797528982,N/A
p3_find_n_smallest_number,prompt_2,13,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    smallest_indices = []\n    for j in range(arg2):\n        smallest_indices.append(dict_values[sorted_list[j]])\n    return smallest_indices']",10000,0.1055633001960814,0.10883133800700306,0.11316390009596944,N/A
p3_find_n_smallest_number,prompt_2,13,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    smallest_indices = []\n    for j in range(arg2):\n        smallest_indices.append(dict_values[sorted_list[j]])\n    return smallest_indices']",100000,1.618088599992916,1.654901437999215,1.6993497000075877,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(heapq.heappop(heap)))\n    return indexes']",1000,0.006947599817067385,0.007268553001340479,0.008416800061240792,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(heapq.heappop(heap)))\n    return indexes']",10000,0.05398950004018843,0.05600903799757361,0.06342860008589923,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(heapq.heappop(heap)))\n    return indexes']",100000,0.8083448000252247,0.8292840090068058,0.8664579999167472,N/A
p3_find_n_smallest_number,prompt_2,15,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    pivot = arg1[random.randrange(n)]\n    lows = [ele for ele in arg1 if ele < pivot]\n    highs = [ele for ele in arg1 if ele > pivot]\n    pivots = [ele for ele in arg1 if ele == pivot]\n    k = arg2 - len(lows)\n    m = len(pivots)\n    if k < m:\n        return [arg1.index(pivot)] * m + funcImp(highs, k)\n    else:\n        return sorted([arg1.index(ele) for ele in lows] + [arg1.index(ele) for ele in pivots] + funcImp(highs, k - m))']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,15,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    pivot = arg1[random.randrange(n)]\n    lows = [ele for ele in arg1 if ele < pivot]\n    highs = [ele for ele in arg1 if ele > pivot]\n    pivots = [ele for ele in arg1 if ele == pivot]\n    k = arg2 - len(lows)\n    m = len(pivots)\n    if k < m:\n        return [arg1.index(pivot)] * m + funcImp(highs, k)\n    else:\n        return sorted([arg1.index(ele) for ele in lows] + [arg1.index(ele) for ele in pivots] + funcImp(highs, k - m))']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,15,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    pivot = arg1[random.randrange(n)]\n    lows = [ele for ele in arg1 if ele < pivot]\n    highs = [ele for ele in arg1 if ele > pivot]\n    pivots = [ele for ele in arg1 if ele == pivot]\n    k = arg2 - len(lows)\n    m = len(pivots)\n    if k < m:\n        return [arg1.index(pivot)] * m + funcImp(highs, k)\n    else:\n        return sorted([arg1.index(ele) for ele in lows] + [arg1.index(ele) for ele in pivots] + funcImp(highs, k - m))']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,16,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_idx = (left + right) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return k\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef k_smallest_indexes(arr, k):\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arr, 0, len(arr) - 1, i)\n        indexes.append(idx)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,0.02901989989914,0.03013106998289004,0.0316941998898983,N/A
p3_find_n_smallest_number,prompt_2,16,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_idx = (left + right) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return k\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef k_smallest_indexes(arr, k):\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arr, 0, len(arr) - 1, i)\n        indexes.append(idx)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,0.3018251999747008,0.31084699200233445,0.33775289985351264,N/A
p3_find_n_smallest_number,prompt_2,16,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_idx = (left + right) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return k\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef k_smallest_indexes(arr, k):\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arr, 0, len(arr) - 1, i)\n        indexes.append(idx)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,3.523545099887997,3.7251337009924463,4.296612000092864,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",1000,0.0071125999093055725,0.007572876987978816,0.0130474001634866,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",10000,0.11019150004722178,0.11450168899726122,0.13300510006956756,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",100000,1.5990927999373525,1.6634664489980786,1.8773477000650018,N/A
p3_find_n_smallest_number,prompt_2,18,"['def partition(arr, left, right, pivot):\n    pivotVal = arr[pivot]\n    arr[pivot], arr[right] = (arr[right], arr[pivot])\n    storeIdx = left\n    for i in range(left, right):\n        if arr[i] < pivotVal:\n            arr[i], arr[storeIdx] = (arr[storeIdx], arr[i])\n            storeIdx += 1\n    arr[right], arr[storeIdx] = (arr[storeIdx], arr[right])\n    return storeIdx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot = random.randint(left, right)\n    pivot = partition(arr, left, right, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, left, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    kthSmallest = arg1[quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)]\n    indexes = [i for i, num in enumerate(arg1) if num <= kthSmallest]\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,18,"['def partition(arr, left, right, pivot):\n    pivotVal = arr[pivot]\n    arr[pivot], arr[right] = (arr[right], arr[pivot])\n    storeIdx = left\n    for i in range(left, right):\n        if arr[i] < pivotVal:\n            arr[i], arr[storeIdx] = (arr[storeIdx], arr[i])\n            storeIdx += 1\n    arr[right], arr[storeIdx] = (arr[storeIdx], arr[right])\n    return storeIdx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot = random.randint(left, right)\n    pivot = partition(arr, left, right, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, left, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    kthSmallest = arg1[quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)]\n    indexes = [i for i, num in enumerate(arg1) if num <= kthSmallest]\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,18,"['def partition(arr, left, right, pivot):\n    pivotVal = arr[pivot]\n    arr[pivot], arr[right] = (arr[right], arr[pivot])\n    storeIdx = left\n    for i in range(left, right):\n        if arr[i] < pivotVal:\n            arr[i], arr[storeIdx] = (arr[storeIdx], arr[i])\n            storeIdx += 1\n    arr[right], arr[storeIdx] = (arr[storeIdx], arr[right])\n    return storeIdx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot = random.randint(left, right)\n    pivot = partition(arr, left, right, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, left, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    kthSmallest = arg1[quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)]\n    indexes = [i for i, num in enumerate(arg1) if num <= kthSmallest]\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,19,"['def find_k_smallest_indexes(nums, k):\n    if k < 1 or k > len(nums):\n        return []\n    indices = range(len(nums))\n    k_indices = sorted(indices, key=lambda i: nums[i])[:k]\n    return k_indices']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,19,"['def find_k_smallest_indexes(nums, k):\n    if k < 1 or k > len(nums):\n        return []\n    indices = range(len(nums))\n    k_indices = sorted(indices, key=lambda i: nums[i])[:k]\n    return k_indices']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,19,"['def find_k_smallest_indexes(nums, k):\n    if k < 1 or k > len(nums):\n        return []\n    indices = range(len(nums))\n    k_indices = sorted(indices, key=lambda i: nums[i])[:k]\n    return k_indices']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    arr_tuples = [(arr[i], i) for i in range(len(arr))]\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return arr[left][0]\n        pivot_index = random.randint(left, right)\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k == pivot_index:\n            return arr[k][0]\n        elif k < pivot_index:\n            return quick_select(arr, left, pivot_index - 1, k)\n        else:\n            return quick_select(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index][0]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i][0] < pivot_value:\n                arr[store_index], arr[i] = (arr[i], arr[store_index])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n    kth_smallest_val = quick_select(arr_tuples, 0, len(arr_tuples) - 1, k)\n    indexes = [arr_tuples[i][1] for i in range(len(arr_tuples)) if arr_tuples[i][0] <= kth_smallest_val][:k]\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    arr_tuples = [(arr[i], i) for i in range(len(arr))]\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return arr[left][0]\n        pivot_index = random.randint(left, right)\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k == pivot_index:\n            return arr[k][0]\n        elif k < pivot_index:\n            return quick_select(arr, left, pivot_index - 1, k)\n        else:\n            return quick_select(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index][0]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i][0] < pivot_value:\n                arr[store_index], arr[i] = (arr[i], arr[store_index])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n    kth_smallest_val = quick_select(arr_tuples, 0, len(arr_tuples) - 1, k)\n    indexes = [arr_tuples[i][1] for i in range(len(arr_tuples)) if arr_tuples[i][0] <= kth_smallest_val][:k]\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    arr_tuples = [(arr[i], i) for i in range(len(arr))]\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return arr[left][0]\n        pivot_index = random.randint(left, right)\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k == pivot_index:\n            return arr[k][0]\n        elif k < pivot_index:\n            return quick_select(arr, left, pivot_index - 1, k)\n        else:\n            return quick_select(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index][0]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i][0] < pivot_value:\n                arr[store_index], arr[i] = (arr[i], arr[store_index])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n    kth_smallest_val = quick_select(arr_tuples, 0, len(arr_tuples) - 1, k)\n    indexes = [arr_tuples[i][1] for i in range(len(arr_tuples)) if arr_tuples[i][0] <= kth_smallest_val][:k]\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,21,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    """"""\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",1000,0.007199000101536512,0.0076763479853980245,0.01060079992748797,N/A
p3_find_n_smallest_number,prompt_2,21,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    """"""\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",10000,0.11002359981648624,0.11592981798574328,0.12799709988757968,N/A
p3_find_n_smallest_number,prompt_2,21,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    """"""\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",100000,1.6036828001961112,1.6699470430030487,1.9095246000215411,N/A
p3_find_n_smallest_number,prompt_2,22,"['def funcImp(arg1, k):\n    idxs = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return idxs[:k]']",1000,0.007012999849393964,0.007512437989935279,0.008830300066620111,N/A
p3_find_n_smallest_number,prompt_2,22,"['def funcImp(arg1, k):\n    idxs = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return idxs[:k]']",10000,0.11019759997725487,0.11396093898452818,0.12975469999946654,N/A
p3_find_n_smallest_number,prompt_2,22,"['def funcImp(arg1, k):\n    idxs = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return idxs[:k]']",100000,1.6028865999542177,1.6666688219900243,1.8923680998850614,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[l]\n        i, j = (l + 1, r)\n        while i <= j:\n            if arr[i] <= pivot:\n                i += 1\n            elif arr[j] >= pivot:\n                j -= 1\n            else:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        arr[l], arr[j] = (arr[j], arr[l])\n        return j\n    k = arg2\n    left, right = (0, len(arg1) - 1)\n    while True:\n        pivot_idx = partition(arg1, left, right)\n        if pivot_idx == k - 1:\n            break\n        elif pivot_idx < k - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n    smallest = arg1[:k]\n    smallest_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return smallest_idx']",1000,0.021910900017246604,0.022995691001415252,0.024610700085759163,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[l]\n        i, j = (l + 1, r)\n        while i <= j:\n            if arr[i] <= pivot:\n                i += 1\n            elif arr[j] >= pivot:\n                j -= 1\n            else:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        arr[l], arr[j] = (arr[j], arr[l])\n        return j\n    k = arg2\n    left, right = (0, len(arg1) - 1)\n    while True:\n        pivot_idx = partition(arg1, left, right)\n        if pivot_idx == k - 1:\n            break\n        elif pivot_idx < k - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n    smallest = arg1[:k]\n    smallest_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return smallest_idx']",10000,0.2638872000388801,0.27288694399408997,0.2988973001483828,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[l]\n        i, j = (l + 1, r)\n        while i <= j:\n            if arr[i] <= pivot:\n                i += 1\n            elif arr[j] >= pivot:\n                j -= 1\n            else:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        arr[l], arr[j] = (arr[j], arr[l])\n        return j\n    k = arg2\n    left, right = (0, len(arg1) - 1)\n    while True:\n        pivot_idx = partition(arg1, left, right)\n        if pivot_idx == k - 1:\n            break\n        elif pivot_idx < k - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n    smallest = arg1[:k]\n    smallest_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return smallest_idx']",100000,3.2096394000109285,3.280578620007727,3.5095065000932664,N/A
p3_find_n_smallest_number,prompt_2,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in sorted_list]\n    return indexes']",1000,0.005907400045543909,0.00616951297968626,0.007112100021913648,N/A
p3_find_n_smallest_number,prompt_2,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in sorted_list]\n    return indexes']",10000,0.10513209993951023,0.10822892401134596,0.11617169994860888,N/A
p3_find_n_smallest_number,prompt_2,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in sorted_list]\n    return indexes']",100000,1.3780024000443518,1.4061747550033032,1.518029399914667,N/A
p3_find_n_smallest_number,prompt_2,25,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    smallest_nums = sorted(arg1)[:arg2]\n    index_list = [index_dict[num] for num in smallest_nums]\n    return index_list']",1000,0.005679300054907799,0.0060054129920899865,0.006649299990385771,N/A
p3_find_n_smallest_number,prompt_2,25,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    smallest_nums = sorted(arg1)[:arg2]\n    index_list = [index_dict[num] for num in smallest_nums]\n    return index_list']",10000,0.10612070001661777,0.11035765799693763,0.12706930004060268,N/A
p3_find_n_smallest_number,prompt_2,25,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    smallest_nums = sorted(arg1)[:arg2]\n    index_list = [index_dict[num] for num in smallest_nums]\n    return index_list']",100000,1.6402980000711977,1.6941518160002307,1.7819487999659032,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices']",1000,0.004544900031760335,0.0047997920052148405,0.005077000008895993,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices']",10000,0.04162589996121824,0.0437377249985002,0.05079169990494847,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices']",100000,0.4406660001259297,0.4519999629957601,0.4905216000042856,N/A
p3_find_n_smallest_number,prompt_2,27,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",1000,0.006995099829509854,0.007503791991621256,0.009942099917680025,N/A
p3_find_n_smallest_number,prompt_2,27,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",10000,0.11210789997130632,0.11753173000179232,0.12531910021789372,N/A
p3_find_n_smallest_number,prompt_2,27,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",100000,1.6120905000716448,1.6779220480052754,1.8933951000217348,N/A
p3_find_n_smallest_number,prompt_2,28,"['def funcImp(arg1, arg2):\n    d = {val: i for i, val in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(d[num])\n    return result']",1000,0.00564950006082654,0.0059083339897915725,0.006680399877950549,N/A
p3_find_n_smallest_number,prompt_2,28,"['def funcImp(arg1, arg2):\n    d = {val: i for i, val in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(d[num])\n    return result']",10000,0.10606179991737008,0.10995146799134091,0.12528289994224906,N/A
p3_find_n_smallest_number,prompt_2,28,"['def funcImp(arg1, arg2):\n    d = {val: i for i, val in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(d[num])\n    return result']",100000,1.6316861000377685,1.6798805949953384,1.7997668001335114,N/A
p3_find_n_smallest_number,prompt_2,29,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",1000,0.007192000048235059,0.007546996003948152,0.01039370009675622,N/A
p3_find_n_smallest_number,prompt_2,29,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",10000,0.11456699995324016,0.11751955901039764,0.12823569984175265,N/A
p3_find_n_smallest_number,prompt_2,29,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",100000,1.5851564998738468,1.6217693750048057,1.6977615000214428,N/A
p3_find_n_smallest_number,prompt_2,30,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arg1_len = len(arg1)\n    if k > arg1_len:\n        return 'k is greater than the length of the array'\n    index_lst = range(arg1_len)\n    sorted_index_lst = sorted(index_lst, key=lambda i: arg1[i])\n    return sorted_index_lst[:k]""]",1000,0.007009800057858229,0.007431738011073321,0.008938899962231517,N/A
p3_find_n_smallest_number,prompt_2,30,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arg1_len = len(arg1)\n    if k > arg1_len:\n        return 'k is greater than the length of the array'\n    index_lst = range(arg1_len)\n    sorted_index_lst = sorted(index_lst, key=lambda i: arg1[i])\n    return sorted_index_lst[:k]""]",10000,0.10983890015631914,0.11356693400070071,0.12208070000633597,N/A
p3_find_n_smallest_number,prompt_2,30,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arg1_len = len(arg1)\n    if k > arg1_len:\n        return 'k is greater than the length of the array'\n    index_lst = range(arg1_len)\n    sorted_index_lst = sorted(index_lst, key=lambda i: arg1[i])\n    return sorted_index_lst[:k]""]",100000,1.6019896999932826,1.6463557339925319,1.7458463001530617,N/A
p3_find_n_smallest_number,prompt_2,31,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.007015799870714545,0.007595551006961614,0.015562199987471104,N/A
p3_find_n_smallest_number,prompt_2,31,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.10885549988597631,0.1131413979944773,0.12279479997232556,N/A
p3_find_n_smallest_number,prompt_2,31,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.5947205999400467,1.6172009769896976,1.6769378001336008,N/A
p3_find_n_smallest_number,prompt_2,32,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(0, arg2):\n        indexes.append(arg1.index(sorted_list[i]))\n    return indexes']",1000,0.0031856000423431396,0.003497462992090732,0.00389840011484921,N/A
p3_find_n_smallest_number,prompt_2,32,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(0, arg2):\n        indexes.append(arg1.index(sorted_list[i]))\n    return indexes']",10000,0.08398959995247424,0.08636705200886353,0.09592210012488067,N/A
p3_find_n_smallest_number,prompt_2,32,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(0, arg2):\n        indexes.append(arg1.index(sorted_list[i]))\n    return indexes']",100000,1.1823789000045508,1.2119173369952478,1.253526700194925,N/A
p3_find_n_smallest_number,prompt_2,33,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)[:arg2]\n    indices = [index_dict[num] for num in sorted_list]\n    return indices']",1000,0.0056634999345988035,0.006070222007110715,0.0071916000451892614,N/A
p3_find_n_smallest_number,prompt_2,33,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)[:arg2]\n    indices = [index_dict[num] for num in sorted_list]\n    return indices']",10000,0.10565409995615482,0.10893162099411711,0.11933390004560351,N/A
p3_find_n_smallest_number,prompt_2,33,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)[:arg2]\n    indices = [index_dict[num] for num in sorted_list]\n    return indices']",100000,1.6333320001140237,1.6550070379930548,1.7196586998179555,N/A
p3_find_n_smallest_number,prompt_2,34,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    else:\n        indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n        return indexes""]",1000,0.007029799977317452,0.00753465301124379,0.013629100052639842,N/A
p3_find_n_smallest_number,prompt_2,34,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    else:\n        indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n        return indexes""]",10000,0.1088570998981595,0.11273621098836883,0.11835819995030761,N/A
p3_find_n_smallest_number,prompt_2,34,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    else:\n        indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n        return indexes""]",100000,1.5771399999503046,1.613867309007328,1.6785552999936044,N/A
p3_find_n_smallest_number,prompt_2,35,"['def partition(array, pivot_index):\n    pivot_value = array[pivot_index]\n    array[pivot_index], array[-1] = (array[-1], array[pivot_index])\n    store_index = i = 0\n    while i < len(array) - 1:\n        if array[i] < pivot_value:\n            array[i], array[store_index] = (array[store_index], array[i])\n            store_index += 1\n        i += 1\n    array[store_index], array[-1] = (array[-1], array[store_index])\n    return store_index\n\ndef select(array, k):\n    left = 0\n    right = len(array) - 1\n    while True:\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(array, pivot_index)\n        if k == pivot_index:\n            return array[:k]\n        elif k < pivot_index:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n\ndef find_k_smallest_indexes(arg1, arg2):\n    k = arg2\n    if k > len(arg1) or k < 1:\n        return []\n    k_smallest = select(arg1, k)\n    k_smallest_indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indexes']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,35,"['def partition(array, pivot_index):\n    pivot_value = array[pivot_index]\n    array[pivot_index], array[-1] = (array[-1], array[pivot_index])\n    store_index = i = 0\n    while i < len(array) - 1:\n        if array[i] < pivot_value:\n            array[i], array[store_index] = (array[store_index], array[i])\n            store_index += 1\n        i += 1\n    array[store_index], array[-1] = (array[-1], array[store_index])\n    return store_index\n\ndef select(array, k):\n    left = 0\n    right = len(array) - 1\n    while True:\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(array, pivot_index)\n        if k == pivot_index:\n            return array[:k]\n        elif k < pivot_index:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n\ndef find_k_smallest_indexes(arg1, arg2):\n    k = arg2\n    if k > len(arg1) or k < 1:\n        return []\n    k_smallest = select(arg1, k)\n    k_smallest_indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indexes']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,35,"['def partition(array, pivot_index):\n    pivot_value = array[pivot_index]\n    array[pivot_index], array[-1] = (array[-1], array[pivot_index])\n    store_index = i = 0\n    while i < len(array) - 1:\n        if array[i] < pivot_value:\n            array[i], array[store_index] = (array[store_index], array[i])\n            store_index += 1\n        i += 1\n    array[store_index], array[-1] = (array[-1], array[store_index])\n    return store_index\n\ndef select(array, k):\n    left = 0\n    right = len(array) - 1\n    while True:\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(array, pivot_index)\n        if k == pivot_index:\n            return array[:k]\n        elif k < pivot_index:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n\ndef find_k_smallest_indexes(arg1, arg2):\n    k = arg2\n    if k > len(arg1) or k < 1:\n        return []\n    k_smallest = select(arg1, k)\n    k_smallest_indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indexes']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,36,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i in range(len(arg1)):\n        index_map[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_map[arg1[i]])\n    return result']",1000,0.0027759000658988953,0.002916671989951283,0.003128599841147661,N/A
p3_find_n_smallest_number,prompt_2,36,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i in range(len(arg1)):\n        index_map[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_map[arg1[i]])\n    return result']",10000,0.02762589999474585,0.02901490599149838,0.039802399929612875,N/A
p3_find_n_smallest_number,prompt_2,36,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i in range(len(arg1)):\n        index_map[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_map[arg1[i]])\n    return result']",100000,0.6341470000334084,0.6770260099857114,0.7336539998650551,N/A
p3_find_n_smallest_number,prompt_2,37,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    l, r = (0, n - 1)\n    while l <= r:\n        pivot_index = partition(arr, l, r)\n        if pivot_index == k - 1:\n            return sorted(range(n), key=lambda i: arr[i])[:k]\n        elif pivot_index < k - 1:\n            l = pivot_index + 1\n        else:\n            r = pivot_index - 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",1000,2.0052795000374317,2.1241493589919993,2.174398999894038,N/A
p3_find_n_smallest_number,prompt_2,37,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    l, r = (0, n - 1)\n    while l <= r:\n        pivot_index = partition(arr, l, r)\n        if pivot_index == k - 1:\n            return sorted(range(n), key=lambda i: arr[i])[:k]\n        elif pivot_index < k - 1:\n            l = pivot_index + 1\n        else:\n            r = pivot_index - 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,37,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    l, r = (0, n - 1)\n    while l <= r:\n        pivot_index = partition(arr, l, r)\n        if pivot_index == k - 1:\n            return sorted(range(n), key=lambda i: arr[i])[:k]\n        elif pivot_index < k - 1:\n            l = pivot_index + 1\n        else:\n            r = pivot_index - 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,38,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    return [i for i, n in enumerate(arg1) if n in nsmallest(arg2, arg1)]']",1000,1.3244938000570983,1.3479021760146133,1.3768694000318646,N/A
p3_find_n_smallest_number,prompt_2,38,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    return [i for i, n in enumerate(arg1) if n in nsmallest(arg2, arg1)]']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,38,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    return [i for i, n in enumerate(arg1) if n in nsmallest(arg2, arg1)]']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indexes']",1000,0.0027191999834030867,0.002914003001060337,0.004051599884405732,N/A
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indexes']",10000,0.026287399930879474,0.02731612998293713,0.03292719996534288,N/A
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indexes']",100000,0.26392389996908605,0.2681206830102019,0.2797050999943167,N/A
p3_find_n_smallest_number,prompt_2,40,"['def funcImp(arg1, arg2):\n\n    def quickSelect(nums, k):\n        pivot = nums[len(nums) // 2]\n        nums1, nums2, nums3 = ([], [], [])\n        for num in nums:\n            if num < pivot:\n                nums1.append(num)\n            elif num > pivot:\n                nums3.append(num)\n            else:\n                nums2.append(num)\n        if k < len(nums1):\n            return quickSelect(nums1, k)\n        elif k < len(nums1) + len(nums2):\n            return nums2[0]\n        else:\n            return quickSelect(nums3, k - len(nums1) - len(nums2))\n    kth_smallest = quickSelect(arg1, arg2)\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.006377900019288063,0.006673965982627123,0.007198299979791045,N/A
p3_find_n_smallest_number,prompt_2,40,"['def funcImp(arg1, arg2):\n\n    def quickSelect(nums, k):\n        pivot = nums[len(nums) // 2]\n        nums1, nums2, nums3 = ([], [], [])\n        for num in nums:\n            if num < pivot:\n                nums1.append(num)\n            elif num > pivot:\n                nums3.append(num)\n            else:\n                nums2.append(num)\n        if k < len(nums1):\n            return quickSelect(nums1, k)\n        elif k < len(nums1) + len(nums2):\n            return nums2[0]\n        else:\n            return quickSelect(nums3, k - len(nums1) - len(nums2))\n    kth_smallest = quickSelect(arg1, arg2)\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.08989360020495951,0.0921943680010736,0.10027389996685088,N/A
p3_find_n_smallest_number,prompt_2,40,"['def funcImp(arg1, arg2):\n\n    def quickSelect(nums, k):\n        pivot = nums[len(nums) // 2]\n        nums1, nums2, nums3 = ([], [], [])\n        for num in nums:\n            if num < pivot:\n                nums1.append(num)\n            elif num > pivot:\n                nums3.append(num)\n            else:\n                nums2.append(num)\n        if k < len(nums1):\n            return quickSelect(nums1, k)\n        elif k < len(nums1) + len(nums2):\n            return nums2[0]\n        else:\n            return quickSelect(nums3, k - len(nums1) - len(nums2))\n    kth_smallest = quickSelect(arg1, arg2)\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            indexes.append(i)\n    return indexes']",100000,0.6988740998785943,0.7117235939903185,0.7479431999381632,N/A
p3_find_n_smallest_number,prompt_2,41,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    indexes = [i for i in range(len(arg1))]\n    arg1_index_pairs = list(zip(arg1, indexes))\n    lo = 0\n    hi = len(arg1_index_pairs) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        pivot = arg1_index_pairs[mid]\n        left = [x for x in arg1_index_pairs[lo:mid] if x[0] <= pivot[0]]\n        right = [x for x in arg1_index_pairs[mid + 1:hi + 1] if x[0] < pivot[0]]\n        arg1_index_pairs[lo:hi + 1] = left + [pivot] + right\n        if len(left) < arg2 - 1:\n            arg2 -= len(left)\n            lo = mid + 1\n        elif len(left) == arg2 - 1:\n            return [x[1] for x in arg1_index_pairs[:mid + 1]]\n        else:\n            hi = mid\n    return [x[1] for x in arg1_index_pairs[:arg2]]']",1000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_2,41,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    indexes = [i for i in range(len(arg1))]\n    arg1_index_pairs = list(zip(arg1, indexes))\n    lo = 0\n    hi = len(arg1_index_pairs) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        pivot = arg1_index_pairs[mid]\n        left = [x for x in arg1_index_pairs[lo:mid] if x[0] <= pivot[0]]\n        right = [x for x in arg1_index_pairs[mid + 1:hi + 1] if x[0] < pivot[0]]\n        arg1_index_pairs[lo:hi + 1] = left + [pivot] + right\n        if len(left) < arg2 - 1:\n            arg2 -= len(left)\n            lo = mid + 1\n        elif len(left) == arg2 - 1:\n            return [x[1] for x in arg1_index_pairs[:mid + 1]]\n        else:\n            hi = mid\n    return [x[1] for x in arg1_index_pairs[:arg2]]']",10000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_2,41,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    indexes = [i for i in range(len(arg1))]\n    arg1_index_pairs = list(zip(arg1, indexes))\n    lo = 0\n    hi = len(arg1_index_pairs) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        pivot = arg1_index_pairs[mid]\n        left = [x for x in arg1_index_pairs[lo:mid] if x[0] <= pivot[0]]\n        right = [x for x in arg1_index_pairs[mid + 1:hi + 1] if x[0] < pivot[0]]\n        arg1_index_pairs[lo:hi + 1] = left + [pivot] + right\n        if len(left) < arg2 - 1:\n            arg2 -= len(left)\n            lo = mid + 1\n        elif len(left) == arg2 - 1:\n            return [x[1] for x in arg1_index_pairs[:mid + 1]]\n        else:\n            hi = mid\n    return [x[1] for x in arg1_index_pairs[:arg2]]']",100000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_2,42,"['def funcImp(arg1, arg2):\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(arg1.index(num))\n    return indexes']",1000,0.0018531999085098505,0.0019485550024546682,0.002103199949488044,N/A
p3_find_n_smallest_number,prompt_2,42,"['def funcImp(arg1, arg2):\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(arg1.index(num))\n    return indexes']",10000,0.019909400027245283,0.020594901016447693,0.022295799804851413,N/A
p3_find_n_smallest_number,prompt_2,42,"['def funcImp(arg1, arg2):\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(arg1.index(num))\n    return indexes']",100000,0.24174179998226464,0.24869259200524538,0.2608539001084864,N/A
p3_find_n_smallest_number,prompt_2,43,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for j in range(arg2):\n        result.append(num_index_dict[sorted_list[j]])\n    return result']",1000,0.005658899899572134,0.005992046017199755,0.007166400086134672,N/A
p3_find_n_smallest_number,prompt_2,43,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for j in range(arg2):\n        result.append(num_index_dict[sorted_list[j]])\n    return result']",10000,0.10465619992464781,0.10718023000052199,0.11346469982527196,N/A
p3_find_n_smallest_number,prompt_2,43,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for j in range(arg2):\n        result.append(num_index_dict[sorted_list[j]])\n    return result']",100000,1.583082500146702,1.63888011100702,1.6881133001297712,N/A
p3_find_n_smallest_number,prompt_2,44,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 is None:\n        arg2 = len(arg1)\n    if arg2 < 0:\n        arg2 = len(arg1)\n    elif arg2 > len(arg1):\n        arg2 = len(arg1)\n    indices = {i: arg1[i] for i in range(len(arg1))}\n    sorted_indices = sorted(indices.items(), key=lambda x: x[1])\n    return [sorted_indices[i][0] for i in range(arg2)]']",1000,0.009995000204071403,0.010522824004292488,0.015293199801817536,N/A
p3_find_n_smallest_number,prompt_2,44,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 is None:\n        arg2 = len(arg1)\n    if arg2 < 0:\n        arg2 = len(arg1)\n    elif arg2 > len(arg1):\n        arg2 = len(arg1)\n    indices = {i: arg1[i] for i in range(len(arg1))}\n    sorted_indices = sorted(indices.items(), key=lambda x: x[1])\n    return [sorted_indices[i][0] for i in range(arg2)]']",10000,0.16176840011030436,0.1666940430062823,0.17253370000980794,N/A
p3_find_n_smallest_number,prompt_2,44,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 is None:\n        arg2 = len(arg1)\n    if arg2 < 0:\n        arg2 = len(arg1)\n    elif arg2 > len(arg1):\n        arg2 = len(arg1)\n    indices = {i: arg1[i] for i in range(len(arg1))}\n    sorted_indices = sorted(indices.items(), key=lambda x: x[1])\n    return [sorted_indices[i][0] for i in range(arg2)]']",100000,2.5627494000364095,2.622874762986321,2.71673130011186,N/A
p3_find_n_smallest_number,prompt_2,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = []\n        index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_nums = unique_nums[:arg2]\n    result = []\n    for num in k_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            return result\n    return result']",1000,0.007613900117576122,0.007968333999160677,0.011324899969622493,N/A
p3_find_n_smallest_number,prompt_2,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = []\n        index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_nums = unique_nums[:arg2]\n    result = []\n    for num in k_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            return result\n    return result']",10000,0.08716980018652976,0.08913378201192244,0.09362279996275902,N/A
p3_find_n_smallest_number,prompt_2,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = []\n        index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_nums = unique_nums[:arg2]\n    result = []\n    for num in k_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            return result\n    return result']",100000,1.7320018999744207,1.7715964650036766,1.8165160999633372,N/A
p3_find_n_smallest_number,prompt_2,46,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    result = []\n    if n == 0 or arg2 == 0:\n        return result\n    if arg2 >= n:\n        return [i for i in range(n)]\n    min_heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(min_heap, arg2, i)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0]:\n            min_heap[0] = arg1[i]\n            heapify(min_heap, arg2, 0)\n    result = [i for i in range(n) if arg1[i] in min_heap]\n    return result\n\ndef heapify(arr, n, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    smallest = i\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)']",1000,0.004983499879017472,0.00523845000192523,0.00657570012845099,N/A
p3_find_n_smallest_number,prompt_2,46,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    result = []\n    if n == 0 or arg2 == 0:\n        return result\n    if arg2 >= n:\n        return [i for i in range(n)]\n    min_heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(min_heap, arg2, i)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0]:\n            min_heap[0] = arg1[i]\n            heapify(min_heap, arg2, 0)\n    result = [i for i in range(n) if arg1[i] in min_heap]\n    return result\n\ndef heapify(arr, n, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    smallest = i\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)']",10000,0.0504054999910295,0.051946050010155884,0.05668040015734732,N/A
p3_find_n_smallest_number,prompt_2,46,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    result = []\n    if n == 0 or arg2 == 0:\n        return result\n    if arg2 >= n:\n        return [i for i in range(n)]\n    min_heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(min_heap, arg2, i)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0]:\n            min_heap[0] = arg1[i]\n            heapify(min_heap, arg2, 0)\n    result = [i for i in range(n) if arg1[i] in min_heap]\n    return result\n\ndef heapify(arr, n, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    smallest = i\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)']",100000,0.5132051999680698,0.5189856700110249,0.5352280999068171,N/A
p3_find_n_smallest_number,prompt_2,47,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot_index = partition(arr, l, r)\n        if k == pivot_index:\n            return k\n        elif k < pivot_index:\n            return quickselect(arr, l, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, r, k)\n    k = arg2\n    k_index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    k_smallest = sorted(arg1[:k])\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,47,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot_index = partition(arr, l, r)\n        if k == pivot_index:\n            return k\n        elif k < pivot_index:\n            return quickselect(arr, l, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, r, k)\n    k = arg2\n    k_index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    k_smallest = sorted(arg1[:k])\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,47,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot_index = partition(arr, l, r)\n        if k == pivot_index:\n            return k\n        elif k < pivot_index:\n            return quickselect(arr, l, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, r, k)\n    k = arg2\n    k_index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    k_smallest = sorted(arg1[:k])\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,48,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[len(nums) // 2]\n        lows = [n for n in nums if n < pivot]\n        highs = [n for n in nums if n > pivot]\n        pivots = [n for n in nums if n == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + len(pivots) + quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = arg1[quickselect(arg1, arg2 - 1)]\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",1000,0.009402000112459064,0.009904243003111332,0.014398899860680103,N/A
p3_find_n_smallest_number,prompt_2,48,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[len(nums) // 2]\n        lows = [n for n in nums if n < pivot]\n        highs = [n for n in nums if n > pivot]\n        pivots = [n for n in nums if n == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + len(pivots) + quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = arg1[quickselect(arg1, arg2 - 1)]\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",10000,0.14781340002082288,0.14997831099666656,0.15680689993314445,N/A
p3_find_n_smallest_number,prompt_2,48,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[len(nums) // 2]\n        lows = [n for n in nums if n < pivot]\n        highs = [n for n in nums if n > pivot]\n        pivots = [n for n in nums if n == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + len(pivots) + quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = arg1[quickselect(arg1, arg2 - 1)]\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",100000,1.0762779000215232,1.0951136869820766,1.1184030999429524,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return sorted(result)']",1000,0.0036859000101685524,0.003966083000414074,0.00840100017376244,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return sorted(result)']",10000,0.0362835000269115,0.03741663799621165,0.04084819997660816,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return sorted(result)']",100000,0.36546120001003146,0.37190924199763686,0.3975139001850039,N/A
p3_find_n_smallest_number,prompt_2,50,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(idx_smallest)']",1000,0.0070361001417040825,0.0074609789904206995,0.009640100179240108,N/A
p3_find_n_smallest_number,prompt_2,50,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(idx_smallest)']",10000,0.10999889997765422,0.113400819003582,0.12401790008880198,N/A
p3_find_n_smallest_number,prompt_2,50,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(idx_smallest)']",100000,1.5932845000643283,1.6202866899897344,1.6898769000545144,N/A
p3_find_n_smallest_number,prompt_2,51,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, element in enumerate(arg1):\n        if element not in index_dict:\n            index_dict[element] = [i]\n        else:\n            index_dict[element].append(i)\n    unique_elements = sorted(set(arg1))\n    k_smallest = unique_elements[:arg2]\n    indices = []\n    for element in k_smallest:\n        indices += index_dict[element]\n        if len(indices) >= arg2:\n            break\n    return indices[:arg2]']",1000,0.0061963999178260565,0.006463103017304093,0.007901499979197979,N/A
p3_find_n_smallest_number,prompt_2,51,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, element in enumerate(arg1):\n        if element not in index_dict:\n            index_dict[element] = [i]\n        else:\n            index_dict[element].append(i)\n    unique_elements = sorted(set(arg1))\n    k_smallest = unique_elements[:arg2]\n    indices = []\n    for element in k_smallest:\n        indices += index_dict[element]\n        if len(indices) >= arg2:\n            break\n    return indices[:arg2]']",10000,0.07350309984758496,0.07580074099823833,0.07918849983252585,N/A
p3_find_n_smallest_number,prompt_2,51,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, element in enumerate(arg1):\n        if element not in index_dict:\n            index_dict[element] = [i]\n        else:\n            index_dict[element].append(i)\n    unique_elements = sorted(set(arg1))\n    k_smallest = unique_elements[:arg2]\n    indices = []\n    for element in k_smallest:\n        indices += index_dict[element]\n        if len(indices) >= arg2:\n            break\n    return indices[:arg2]']",100000,1.5571494000032544,1.6066777160111814,1.6594851000700146,N/A
p3_find_n_smallest_number,prompt_2,52,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(heap, i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            heapify(heap, 0)\n    result = []\n    for i in range(arg2):\n        result.append(arg1.index(heap[i]))\n    return result']",1000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_2,52,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(heap, i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            heapify(heap, 0)\n    result = []\n    for i in range(arg2):\n        result.append(arg1.index(heap[i]))\n    return result']",10000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_2,52,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(heap, i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            heapify(heap, 0)\n    result = []\n    for i in range(arg2):\n        result.append(arg1.index(heap[i]))\n    return result']",100000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_2,53,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return sorted(sorted_indices)']",1000,0.007020799908787012,0.0076561270118691025,0.009983800118789077,N/A
p3_find_n_smallest_number,prompt_2,53,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return sorted(sorted_indices)']",10000,0.10910329991020262,0.11294797199545428,0.11928969994187355,N/A
p3_find_n_smallest_number,prompt_2,53,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return sorted(sorted_indices)']",100000,1.6063099999446422,1.6389440819923766,1.6889984998852015,N/A
p3_find_n_smallest_number,prompt_2,54,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    smallest = sorted(index_dict.keys())[:arg2]\n    result = []\n    for s in smallest:\n        result.extend(index_dict[s])\n    return result']",1000,0.008334399899467826,0.008899890014436095,0.01107220002450049,N/A
p3_find_n_smallest_number,prompt_2,54,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    smallest = sorted(index_dict.keys())[:arg2]\n    result = []\n    for s in smallest:\n        result.extend(index_dict[s])\n    return result']",10000,0.13632720010355115,0.14097346499562263,0.15337580000050366,N/A
p3_find_n_smallest_number,prompt_2,54,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    smallest = sorted(index_dict.keys())[:arg2]\n    result = []\n    for s in smallest:\n        result.extend(index_dict[s])\n    return result']",100000,2.1982205000240356,2.2449679410015233,2.3189034000970423,N/A
p3_find_n_smallest_number,prompt_2,55,"['def funcImp(arg1, arg2):\n\n    def quick_select(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[len(l) // 2]\n        lows = [el for el in l if el < pivot]\n        highs = [el for el in l if el > pivot]\n        pivots = [el for el in l if el == pivot]\n        if k < len(lows):\n            return quick_select(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quick_select(highs, k - len(lows) - len(pivots))\n    k_smallest = [quick_select(arg1, i) for i in range(arg2)]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",1000,0.03902989998459816,0.040697110982146116,0.057145100086927414,N/A
p3_find_n_smallest_number,prompt_2,55,"['def funcImp(arg1, arg2):\n\n    def quick_select(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[len(l) // 2]\n        lows = [el for el in l if el < pivot]\n        highs = [el for el in l if el > pivot]\n        pivots = [el for el in l if el == pivot]\n        if k < len(lows):\n            return quick_select(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quick_select(highs, k - len(lows) - len(pivots))\n    k_smallest = [quick_select(arg1, i) for i in range(arg2)]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",10000,0.6678673999849707,0.6822736189956777,0.7175765000283718,N/A
p3_find_n_smallest_number,prompt_2,55,"['def funcImp(arg1, arg2):\n\n    def quick_select(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[len(l) // 2]\n        lows = [el for el in l if el < pivot]\n        highs = [el for el in l if el > pivot]\n        pivots = [el for el in l if el == pivot]\n        if k < len(lows):\n            return quick_select(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quick_select(highs, k - len(lows) - len(pivots))\n    k_smallest = [quick_select(arg1, i) for i in range(arg2)]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",100000,4.803216499974951,4.875737263995688,4.965579600073397,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    return [i[0] for i in k_smallest]']",1000,0.010034000035375357,0.010661385008133947,0.012761699967086315,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    return [i[0] for i in k_smallest]']",10000,0.16067189979366958,0.17053787000011653,0.1793935999739915,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    return [i[0] for i in k_smallest]']",100000,2.593164599966258,2.6530265589873308,2.718579800100997,N/A
p3_find_n_smallest_number,prompt_2,57,"['def funcImp(arg1, arg2):\n    dict1 = {arg1[i]: i for i in range(len(arg1))}\n    arr = sorted(arg1)\n    res = []\n    i = 0\n    while i < arg2:\n        res.append(dict1[arr[i]])\n        i += 1\n    return res']",1000,0.005551600130274892,0.005858755987137556,0.0076107000932097435,N/A
p3_find_n_smallest_number,prompt_2,57,"['def funcImp(arg1, arg2):\n    dict1 = {arg1[i]: i for i in range(len(arg1))}\n    arr = sorted(arg1)\n    res = []\n    i = 0\n    while i < arg2:\n        res.append(dict1[arr[i]])\n        i += 1\n    return res']",10000,0.10276680020615458,0.10718660100130364,0.11664070002734661,N/A
p3_find_n_smallest_number,prompt_2,57,"['def funcImp(arg1, arg2):\n    dict1 = {arg1[i]: i for i in range(len(arg1))}\n    arr = sorted(arg1)\n    res = []\n    i = 0\n    while i < arg2:\n        res.append(dict1[arr[i]])\n        i += 1\n    return res']",100000,1.597965900087729,1.643280986007303,1.724679599981755,N/A
p3_find_n_smallest_number,prompt_2,58,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    low, high = (0, n - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if k - 1 == pivot_index:\n            return sorted(list(enumerate(arr[:k])), key=lambda x: x[1])\n        elif k - 1 < pivot_index:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n    return []\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,2.014213199960068,2.1392460499936714,2.184352200012654,N/A
p3_find_n_smallest_number,prompt_2,58,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    low, high = (0, n - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if k - 1 == pivot_index:\n            return sorted(list(enumerate(arr[:k])), key=lambda x: x[1])\n        elif k - 1 < pivot_index:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n    return []\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,58,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    low, high = (0, n - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if k - 1 == pivot_index:\n            return sorted(list(enumerate(arr[:k])), key=lambda x: x[1])\n        elif k - 1 < pivot_index:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n    return []\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,59,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",1000,0.007143799914047122,0.007975038995500654,0.013296599965542555,N/A
p3_find_n_smallest_number,prompt_2,59,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",10000,0.06868310016579926,0.07754465498030186,0.08624059986323118,N/A
p3_find_n_smallest_number,prompt_2,59,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",100000,0.8862844000104815,0.984400741015561,1.077260100049898,N/A
p3_find_n_smallest_number,prompt_2,60,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = lst[-1]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        k_left = len(left)\n        if k < k_left:\n            return quickselect(left, k)\n        elif k > k_left:\n            return quickselect(right, k - k_left - 1)\n        else:\n            return pivot\n    k = arg2\n    indices = []\n    lst = arg1.copy()\n    for i in range(k):\n        val = quickselect(lst, i)\n        index = lst.index(val)\n        indices.append(index)\n        lst.pop(index)\n    return indices']",1000,0.04700709995813668,0.04932490501087159,0.0650966998655349,N/A
p3_find_n_smallest_number,prompt_2,60,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = lst[-1]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        k_left = len(left)\n        if k < k_left:\n            return quickselect(left, k)\n        elif k > k_left:\n            return quickselect(right, k - k_left - 1)\n        else:\n            return pivot\n    k = arg2\n    indices = []\n    lst = arg1.copy()\n    for i in range(k):\n        val = quickselect(lst, i)\n        index = lst.index(val)\n        indices.append(index)\n        lst.pop(index)\n    return indices']",10000,0.15718879993073642,0.1622967079980299,0.17902030004188418,N/A
p3_find_n_smallest_number,prompt_2,60,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = lst[-1]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        k_left = len(left)\n        if k < k_left:\n            return quickselect(left, k)\n        elif k > k_left:\n            return quickselect(right, k - k_left - 1)\n        else:\n            return pivot\n    k = arg2\n    indices = []\n    lst = arg1.copy()\n    for i in range(k):\n        val = quickselect(lst, i)\n        index = lst.index(val)\n        indices.append(index)\n        lst.pop(index)\n    return indices']",100000,3.6550223999656737,3.71705533599481,3.78597109997645,N/A
p3_find_n_smallest_number,prompt_2,61,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n    return indexes']",1000,0.003237399971112609,0.0034711559931747617,0.004066299879923463,N/A
p3_find_n_smallest_number,prompt_2,61,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n    return indexes']",10000,0.0824452000670135,0.08580611102283,0.09349559992551804,N/A
p3_find_n_smallest_number,prompt_2,61,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n    return indexes']",100000,1.1925793001428246,1.2344460269901902,1.2832969999872148,N/A
p3_find_n_smallest_number,prompt_2,62,"[""def partition(arr, l, r, pivot):\n    pivot_val = arr[pivot]\n    arr[pivot], arr[r] = (arr[r], arr[pivot])\n    store_index = l\n    for i in range(l, r):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[r] = (arr[r], arr[store_index])\n    return store_index\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return l\n    pivot = random.randint(l, r)\n    pivot = partition(arr, l, r, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, l, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'k is larger than the length of the array'\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arg1, 0, n - 1, i)\n        indexes.append(idx)\n    return indexes""]",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,62,"[""def partition(arr, l, r, pivot):\n    pivot_val = arr[pivot]\n    arr[pivot], arr[r] = (arr[r], arr[pivot])\n    store_index = l\n    for i in range(l, r):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[r] = (arr[r], arr[store_index])\n    return store_index\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return l\n    pivot = random.randint(l, r)\n    pivot = partition(arr, l, r, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, l, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'k is larger than the length of the array'\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arg1, 0, n - 1, i)\n        indexes.append(idx)\n    return indexes""]",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,62,"[""def partition(arr, l, r, pivot):\n    pivot_val = arr[pivot]\n    arr[pivot], arr[r] = (arr[r], arr[pivot])\n    store_index = l\n    for i in range(l, r):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[r] = (arr[r], arr[store_index])\n    return store_index\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return l\n    pivot = random.randint(l, r)\n    pivot = partition(arr, l, r, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, l, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'k is larger than the length of the array'\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arg1, 0, n - 1, i)\n        indexes.append(idx)\n    return indexes""]",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,63,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",1000,0.0071396001148968935,0.00753180400468409,0.010436499956995249,N/A
p3_find_n_smallest_number,prompt_2,63,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",10000,0.11017609992995858,0.11381230399943888,0.12588920001871884,N/A
p3_find_n_smallest_number,prompt_2,63,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",100000,1.6168097001500428,1.6506440660101362,1.7322478001005948,N/A
p3_find_n_smallest_number,prompt_2,64,"['def funcImp(arg1, arg2):\n    indices = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,64,"['def funcImp(arg1, arg2):\n    indices = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,64,"['def funcImp(arg1, arg2):\n    indices = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,65,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]']",1000,0.002935499884188175,0.0030434709833934903,0.003388599958270788,N/A
p3_find_n_smallest_number,prompt_2,65,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]']",10000,0.02624850021675229,0.027391164998989553,0.030430200044065714,N/A
p3_find_n_smallest_number,prompt_2,65,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]']",100000,0.2614496999885887,0.27024033199297265,0.2910114999394864,N/A
p3_find_n_smallest_number,prompt_2,66,"[""def funcImp(arg1, arg2):\n    if not 0 <= arg2 < len(arg1):\n        raise ValueError('k must be between 0 and len(arg1)-1')\n\n    def partition(left, right, pivot_idx):\n        pivot_value = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[right] = (arg1[right], arg1[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arg1[i] <= pivot_value:\n                arg1[store_idx], arg1[i] = (arg1[i], arg1[store_idx])\n                store_idx += 1\n        arg1[right], arg1[store_idx] = (arg1[store_idx], arg1[right])\n        return store_idx\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_idx = (left + right) // 2\n        pivot_idx = partition(left, right, pivot_idx)\n        if k_smallest == pivot_idx:\n            return k_smallest\n        elif k_smallest < pivot_idx:\n            return select(left, pivot_idx - 1, k_smallest)\n        else:\n            return select(pivot_idx + 1, right, k_smallest)\n    k_indices = []\n    k_smallest = select(0, len(arg1) - 1, arg2)\n    for i in range(k_smallest + 1):\n        k_indices.append(arg1.index(sorted(arg1[:k_smallest + 1])[i]))\n    return k_indices""]",1000,0.0060189999639987946,0.006303853001445532,0.007361600175499916,N/A
p3_find_n_smallest_number,prompt_2,66,"[""def funcImp(arg1, arg2):\n    if not 0 <= arg2 < len(arg1):\n        raise ValueError('k must be between 0 and len(arg1)-1')\n\n    def partition(left, right, pivot_idx):\n        pivot_value = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[right] = (arg1[right], arg1[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arg1[i] <= pivot_value:\n                arg1[store_idx], arg1[i] = (arg1[i], arg1[store_idx])\n                store_idx += 1\n        arg1[right], arg1[store_idx] = (arg1[store_idx], arg1[right])\n        return store_idx\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_idx = (left + right) // 2\n        pivot_idx = partition(left, right, pivot_idx)\n        if k_smallest == pivot_idx:\n            return k_smallest\n        elif k_smallest < pivot_idx:\n            return select(left, pivot_idx - 1, k_smallest)\n        else:\n            return select(pivot_idx + 1, right, k_smallest)\n    k_indices = []\n    k_smallest = select(0, len(arg1) - 1, arg2)\n    for i in range(k_smallest + 1):\n        k_indices.append(arg1.index(sorted(arg1[:k_smallest + 1])[i]))\n    return k_indices""]",10000,0.06312299985438585,0.06481627201894298,0.07266400009393692,N/A
p3_find_n_smallest_number,prompt_2,66,"[""def funcImp(arg1, arg2):\n    if not 0 <= arg2 < len(arg1):\n        raise ValueError('k must be between 0 and len(arg1)-1')\n\n    def partition(left, right, pivot_idx):\n        pivot_value = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[right] = (arg1[right], arg1[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arg1[i] <= pivot_value:\n                arg1[store_idx], arg1[i] = (arg1[i], arg1[store_idx])\n                store_idx += 1\n        arg1[right], arg1[store_idx] = (arg1[store_idx], arg1[right])\n        return store_idx\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_idx = (left + right) // 2\n        pivot_idx = partition(left, right, pivot_idx)\n        if k_smallest == pivot_idx:\n            return k_smallest\n        elif k_smallest < pivot_idx:\n            return select(left, pivot_idx - 1, k_smallest)\n        else:\n            return select(pivot_idx + 1, right, k_smallest)\n    k_indices = []\n    k_smallest = select(0, len(arg1) - 1, arg2)\n    for i in range(k_smallest + 1):\n        k_indices.append(arg1.index(sorted(arg1[:k_smallest + 1])[i]))\n    return k_indices""]",100000,0.661975699942559,0.7634352780040353,0.800951800076291,N/A
p3_find_n_smallest_number,prompt_2,67,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array using the quickselect algorithm.\n    \n    arg1: list of integers, unsorted array\n    arg2: integer, k\n    return: list of integers, indexes of the k smallest numbers\n    """"""\n    if arg2 < 1:\n        return []\n\n    def select(lst, l, r, k):\n        """"""\n        Returns the kth smallest element of lst[l:r+1].\n        """"""\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[l], lst[pivot_index] = (lst[pivot_index], lst[l])\n        i = l\n        for j in range(l + 1, r + 1):\n            if lst[j] < lst[l]:\n                i += 1\n                lst[i], lst[j] = (lst[j], lst[i])\n        lst[l], lst[i] = (lst[i], lst[l])\n        if k == i - l + 1:\n            return lst[i]\n        elif k < i - l + 1:\n            return select(lst, l, i - 1, k)\n        else:\n            return select(lst, i + 1, r, k - (i - l + 1))\n    n = len(arg1)\n    kth_smallest = select(arg1, 0, n - 1, arg2)\n    k_smallest_indexes = [i for i in range(n) if arg1[i] <= kth_smallest]\n    return k_smallest_indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,67,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array using the quickselect algorithm.\n    \n    arg1: list of integers, unsorted array\n    arg2: integer, k\n    return: list of integers, indexes of the k smallest numbers\n    """"""\n    if arg2 < 1:\n        return []\n\n    def select(lst, l, r, k):\n        """"""\n        Returns the kth smallest element of lst[l:r+1].\n        """"""\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[l], lst[pivot_index] = (lst[pivot_index], lst[l])\n        i = l\n        for j in range(l + 1, r + 1):\n            if lst[j] < lst[l]:\n                i += 1\n                lst[i], lst[j] = (lst[j], lst[i])\n        lst[l], lst[i] = (lst[i], lst[l])\n        if k == i - l + 1:\n            return lst[i]\n        elif k < i - l + 1:\n            return select(lst, l, i - 1, k)\n        else:\n            return select(lst, i + 1, r, k - (i - l + 1))\n    n = len(arg1)\n    kth_smallest = select(arg1, 0, n - 1, arg2)\n    k_smallest_indexes = [i for i in range(n) if arg1[i] <= kth_smallest]\n    return k_smallest_indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,67,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array using the quickselect algorithm.\n    \n    arg1: list of integers, unsorted array\n    arg2: integer, k\n    return: list of integers, indexes of the k smallest numbers\n    """"""\n    if arg2 < 1:\n        return []\n\n    def select(lst, l, r, k):\n        """"""\n        Returns the kth smallest element of lst[l:r+1].\n        """"""\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[l], lst[pivot_index] = (lst[pivot_index], lst[l])\n        i = l\n        for j in range(l + 1, r + 1):\n            if lst[j] < lst[l]:\n                i += 1\n                lst[i], lst[j] = (lst[j], lst[i])\n        lst[l], lst[i] = (lst[i], lst[l])\n        if k == i - l + 1:\n            return lst[i]\n        elif k < i - l + 1:\n            return select(lst, l, i - 1, k)\n        else:\n            return select(lst, i + 1, r, k - (i - l + 1))\n    n = len(arg1)\n    kth_smallest = select(arg1, 0, n - 1, arg2)\n    k_smallest_indexes = [i for i in range(n) if arg1[i] <= kth_smallest]\n    return k_smallest_indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,68,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Args:\n        arg1 (list[int]): The input array to search\n        k (int): The number of smallest indexes to return\n\n    Returns:\n        list[int]: The indexes of the k smallest numbers in the input array\n    """"""\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_idx = partition(arr, left, right)\n        if k < pivot_idx:\n            return quick_select(arr, left, pivot_idx - 1, k)\n        elif k > pivot_idx:\n            return quick_select(arr, pivot_idx + 1, right, k)\n        else:\n            return pivot_idx\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        return i\n    idxs = []\n    for i in range(k):\n        idx = quick_select(arg1, 0, len(arg1) - 1, i)\n        idxs.append(idx)\n    return idxs']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,68,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Args:\n        arg1 (list[int]): The input array to search\n        k (int): The number of smallest indexes to return\n\n    Returns:\n        list[int]: The indexes of the k smallest numbers in the input array\n    """"""\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_idx = partition(arr, left, right)\n        if k < pivot_idx:\n            return quick_select(arr, left, pivot_idx - 1, k)\n        elif k > pivot_idx:\n            return quick_select(arr, pivot_idx + 1, right, k)\n        else:\n            return pivot_idx\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        return i\n    idxs = []\n    for i in range(k):\n        idx = quick_select(arg1, 0, len(arg1) - 1, i)\n        idxs.append(idx)\n    return idxs']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,68,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Args:\n        arg1 (list[int]): The input array to search\n        k (int): The number of smallest indexes to return\n\n    Returns:\n        list[int]: The indexes of the k smallest numbers in the input array\n    """"""\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_idx = partition(arr, left, right)\n        if k < pivot_idx:\n            return quick_select(arr, left, pivot_idx - 1, k)\n        elif k > pivot_idx:\n            return quick_select(arr, pivot_idx + 1, right, k)\n        else:\n            return pivot_idx\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        return i\n    idxs = []\n    for i in range(k):\n        idx = quick_select(arg1, 0, len(arg1) - 1, i)\n        idxs.append(idx)\n    return idxs']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,69,"['def funcImp(arg1, arg2):\n    indexed_dict = {}\n    for i in range(len(arg1)):\n        indexed_dict[i] = arg1[i]\n    sorted_values = sorted(indexed_dict.items(), key=lambda x: x[1])\n    output = []\n    for i in range(arg2):\n        output.append(sorted_values[i][0])\n    return output']",1000,0.010077800136059523,0.010636114003136753,0.012195699848234653,N/A
p3_find_n_smallest_number,prompt_2,69,"['def funcImp(arg1, arg2):\n    indexed_dict = {}\n    for i in range(len(arg1)):\n        indexed_dict[i] = arg1[i]\n    sorted_values = sorted(indexed_dict.items(), key=lambda x: x[1])\n    output = []\n    for i in range(arg2):\n        output.append(sorted_values[i][0])\n    return output']",10000,0.16122140013612807,0.17113921801093965,0.1871011999901384,N/A
p3_find_n_smallest_number,prompt_2,69,"['def funcImp(arg1, arg2):\n    indexed_dict = {}\n    for i in range(len(arg1)):\n        indexed_dict[i] = arg1[i]\n    sorted_values = sorted(indexed_dict.items(), key=lambda x: x[1])\n    output = []\n    for i in range(arg2):\n        output.append(sorted_values[i][0])\n    return output']",100000,2.5829468998126686,2.671848287000321,2.773467999882996,N/A
p3_find_n_smallest_number,prompt_2,70,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",1000,0.0057363000232726336,0.006178488985169679,0.01078610005788505,N/A
p3_find_n_smallest_number,prompt_2,70,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",10000,0.10597170004621148,0.11076502400217578,0.12055700016207993,N/A
p3_find_n_smallest_number,prompt_2,70,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",100000,1.6566954001318663,1.6966760800150222,1.7762616998516023,N/A
p3_find_n_smallest_number,prompt_2,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted(sorted_indices)']",1000,0.007059599971398711,0.007462380982469767,0.00872179982252419,N/A
p3_find_n_smallest_number,prompt_2,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted(sorted_indices)']",10000,0.10966499987989664,0.113313146000728,0.12347760004922748,N/A
p3_find_n_smallest_number,prompt_2,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted(sorted_indices)']",100000,1.6007153999526054,1.6580362270050681,1.742096999892965,N/A
p3_find_n_smallest_number,prompt_2,72,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n\n    def quickselect(first, last, k):\n        pivot = arg1[last]\n        left = first\n        for right in range(first, last):\n            if arg1[right] <= pivot:\n                arg1[left], arg1[right] = (arg1[right], arg1[left])\n                left += 1\n        arg1[left], arg1[last] = (arg1[last], arg1[left])\n        rank = left - first\n        if rank == k:\n            return left\n        elif rank < k:\n            return quickselect(left + 1, last, k - rank - 1)\n        else:\n            return quickselect(first, left - 1, k)\n    kth_smallest_val = arg1[quickselect(0, len(arg1) - 1, k)]\n    res = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest_val]\n    return res[:k]']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,72,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n\n    def quickselect(first, last, k):\n        pivot = arg1[last]\n        left = first\n        for right in range(first, last):\n            if arg1[right] <= pivot:\n                arg1[left], arg1[right] = (arg1[right], arg1[left])\n                left += 1\n        arg1[left], arg1[last] = (arg1[last], arg1[left])\n        rank = left - first\n        if rank == k:\n            return left\n        elif rank < k:\n            return quickselect(left + 1, last, k - rank - 1)\n        else:\n            return quickselect(first, left - 1, k)\n    kth_smallest_val = arg1[quickselect(0, len(arg1) - 1, k)]\n    res = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest_val]\n    return res[:k]']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,72,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n\n    def quickselect(first, last, k):\n        pivot = arg1[last]\n        left = first\n        for right in range(first, last):\n            if arg1[right] <= pivot:\n                arg1[left], arg1[right] = (arg1[right], arg1[left])\n                left += 1\n        arg1[left], arg1[last] = (arg1[last], arg1[left])\n        rank = left - first\n        if rank == k:\n            return left\n        elif rank < k:\n            return quickselect(left + 1, last, k - rank - 1)\n        else:\n            return quickselect(first, left - 1, k)\n    kth_smallest_val = arg1[quickselect(0, len(arg1) - 1, k)]\n    res = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest_val]\n    return res[:k]']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,73,"['def funcImp(arg1, arg2):\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted_idx']",1000,0.007115100044757128,0.007601937979925424,0.011094900080934167,N/A
p3_find_n_smallest_number,prompt_2,73,"['def funcImp(arg1, arg2):\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted_idx']",10000,0.11230879998765886,0.11644103800645098,0.12811610009521246,N/A
p3_find_n_smallest_number,prompt_2,73,"['def funcImp(arg1, arg2):\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted_idx']",100000,1.6099052000790834,1.6658125609951093,1.7200637001078576,N/A
p3_find_n_smallest_number,prompt_2,74,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1:\n        return []\n    if len(arr) == 1:\n        return [0]\n    if k > len(arr):\n        return []\n    indexes = []\n    pivot_index = partition(arr, 0, len(arr) - 1)\n    while len(indexes) < k:\n        if pivot_index == len(arr) - 1:\n            indexes.extend(list(range(len(arr) - k, len(arr))))\n            break\n        if pivot_index == k - 1:\n            indexes.extend(list(range(k)))\n            break\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n            pivot_index = partition(arr, 0, high)\n        else:\n            indexes.extend(list(range(pivot_index)))\n            low = pivot_index + 1\n            pivot_index = partition(arr, low, len(arr) - 1)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,0.00415010005235672,0.005256747007369995,0.08720930013805628,N/A
p3_find_n_smallest_number,prompt_2,74,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1:\n        return []\n    if len(arr) == 1:\n        return [0]\n    if k > len(arr):\n        return []\n    indexes = []\n    pivot_index = partition(arr, 0, len(arr) - 1)\n    while len(indexes) < k:\n        if pivot_index == len(arr) - 1:\n            indexes.extend(list(range(len(arr) - k, len(arr))))\n            break\n        if pivot_index == k - 1:\n            indexes.extend(list(range(k)))\n            break\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n            pivot_index = partition(arr, 0, high)\n        else:\n            indexes.extend(list(range(pivot_index)))\n            low = pivot_index + 1\n            pivot_index = partition(arr, low, len(arr) - 1)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,0.04302780004218221,0.06117914901347831,1.7455937000922859,N/A
p3_find_n_smallest_number,prompt_2,74,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1:\n        return []\n    if len(arr) == 1:\n        return [0]\n    if k > len(arr):\n        return []\n    indexes = []\n    pivot_index = partition(arr, 0, len(arr) - 1)\n    while len(indexes) < k:\n        if pivot_index == len(arr) - 1:\n            indexes.extend(list(range(len(arr) - k, len(arr))))\n            break\n        if pivot_index == k - 1:\n            indexes.extend(list(range(k)))\n            break\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n            pivot_index = partition(arr, 0, high)\n        else:\n            indexes.extend(list(range(pivot_index)))\n            low = pivot_index + 1\n            pivot_index = partition(arr, low, len(arr) - 1)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,0.5175518000032753,4.386343987986911,386.1968463000376,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    index_list = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        index_list.append(index)\n    return index_list']",1000,0.00206059985794127,0.002092806992586702,0.0023662999738007784,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    index_list = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        index_list.append(index)\n    return index_list']",10000,0.02043129992671311,0.021270135999657214,0.024096100125461817,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    index_list = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        index_list.append(index)\n    return index_list']",100000,0.2009707000106573,0.2040612159948796,0.2112340999301523,N/A
p3_find_n_smallest_number,prompt_2,76,"['def funcImp(arg1, arg2):\n    lst = [(i, val) for i, val in enumerate(arg1)]\n    lst.sort(key=lambda x: x[1])\n    indices = [tup[0] for tup in lst[:arg2]]\n    return indices']",1000,0.009348399937152863,0.009793944996781647,0.010475399903953075,N/A
p3_find_n_smallest_number,prompt_2,76,"['def funcImp(arg1, arg2):\n    lst = [(i, val) for i, val in enumerate(arg1)]\n    lst.sort(key=lambda x: x[1])\n    indices = [tup[0] for tup in lst[:arg2]]\n    return indices']",10000,0.15270780003629625,0.15621243199333548,0.1729889998678118,N/A
p3_find_n_smallest_number,prompt_2,76,"['def funcImp(arg1, arg2):\n    lst = [(i, val) for i, val in enumerate(arg1)]\n    lst.sort(key=lambda x: x[1])\n    indices = [tup[0] for tup in lst[:arg2]]\n    return indices']",100000,2.2197688999585807,2.258169180988334,2.3360170000232756,N/A
p3_find_n_smallest_number,prompt_2,77,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, kth):\n        pivot = random.choice(lst)\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if kth < len(lows):\n            return quickselect(lows, kth)\n        elif kth < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, kth - len(lows) - len(pivots))\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,77,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, kth):\n        pivot = random.choice(lst)\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if kth < len(lows):\n            return quickselect(lows, kth)\n        elif kth < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, kth - len(lows) - len(pivots))\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,77,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, kth):\n        pivot = random.choice(lst)\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if kth < len(lows):\n            return quickselect(lows, kth)\n        elif kth < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, kth - len(lows) - len(pivots))\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,78,"['def funcImp(arg1, arg2):\n    dict_values = {arg1[i]: i for i in range(len(arg1))}\n    sorted_values = sorted(arg1)\n    k_smallest = sorted_values[:arg2]\n    indexes = [dict_values[value] for value in k_smallest]\n    return indexes']",1000,0.0055500001180917025,0.0058876530174165964,0.006846799980849028,N/A
p3_find_n_smallest_number,prompt_2,78,"['def funcImp(arg1, arg2):\n    dict_values = {arg1[i]: i for i in range(len(arg1))}\n    sorted_values = sorted(arg1)\n    k_smallest = sorted_values[:arg2]\n    indexes = [dict_values[value] for value in k_smallest]\n    return indexes']",10000,0.1051127000246197,0.10803827300900594,0.12074289983138442,N/A
p3_find_n_smallest_number,prompt_2,78,"['def funcImp(arg1, arg2):\n    dict_values = {arg1[i]: i for i in range(len(arg1))}\n    sorted_values = sorted(arg1)\n    k_smallest = sorted_values[:arg2]\n    indexes = [dict_values[value] for value in k_smallest]\n    return indexes']",100000,1.6041331999003887,1.635565067990683,1.701147599844262,N/A
p3_find_n_smallest_number,prompt_2,79,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1.copy()\n    k_min = [float('inf')] * k\n    k_min_idx = [-1] * k\n    for i in range(len(arr)):\n        num = arr[i]\n        for j in range(k):\n            if num < k_min[j]:\n                k_min[j + 1:k] = k_min[j:k - 1]\n                k_min[j] = num\n                k_min_idx[j + 1:k] = k_min_idx[j:k - 1]\n                k_min_idx[j] = i\n                break\n    return sorted(k_min_idx)""]",1000,0.013189200079068542,0.013826294001191855,0.01519820000976324,N/A
p3_find_n_smallest_number,prompt_2,79,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1.copy()\n    k_min = [float('inf')] * k\n    k_min_idx = [-1] * k\n    for i in range(len(arr)):\n        num = arr[i]\n        for j in range(k):\n            if num < k_min[j]:\n                k_min[j + 1:k] = k_min[j:k - 1]\n                k_min[j] = num\n                k_min_idx[j + 1:k] = k_min_idx[j:k - 1]\n                k_min_idx[j] = i\n                break\n    return sorted(k_min_idx)""]",10000,0.13006280013360083,0.13280301499878988,0.14571029995568097,N/A
p3_find_n_smallest_number,prompt_2,79,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1.copy()\n    k_min = [float('inf')] * k\n    k_min_idx = [-1] * k\n    for i in range(len(arr)):\n        num = arr[i]\n        for j in range(k):\n            if num < k_min[j]:\n                k_min[j + 1:k] = k_min[j:k - 1]\n                k_min[j] = num\n                k_min_idx[j + 1:k] = k_min_idx[j:k - 1]\n                k_min_idx[j] = i\n                break\n    return sorted(k_min_idx)""]",100000,1.3214486001525074,1.3478276519943029,1.3850539999548346,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(v, i) for i, v in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [i for v, i in smallest_pairs]']",1000,0.005297899944707751,0.005404133023694158,0.006866600131615996,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(v, i) for i, v in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [i for v, i in smallest_pairs]']",10000,0.052848099963739514,0.054717640993185344,0.0649260999634862,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(v, i) for i, v in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [i for v, i in smallest_pairs]']",100000,0.6901970999315381,0.7188477249862626,0.7697046999819577,N/A
p3_find_n_smallest_number,prompt_2,81,"[""def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quick_select(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_idx = partition(arr, l, r)\n    if k == pivot_idx:\n        return arr[k]\n    elif k < pivot_idx:\n        return quick_select(arr, l, pivot_idx - 1, k)\n    else:\n        return quick_select(arr, pivot_idx + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k > n:\n        return 'k should be smaller than array length'\n    k_smallest = [quick_select(arg1, 0, n - 1, i) for i in range(k)]\n    result = [i for i in range(n) if arg1[i] in k_smallest]\n    return result""]",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,81,"[""def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quick_select(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_idx = partition(arr, l, r)\n    if k == pivot_idx:\n        return arr[k]\n    elif k < pivot_idx:\n        return quick_select(arr, l, pivot_idx - 1, k)\n    else:\n        return quick_select(arr, pivot_idx + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k > n:\n        return 'k should be smaller than array length'\n    k_smallest = [quick_select(arg1, 0, n - 1, i) for i in range(k)]\n    result = [i for i in range(n) if arg1[i] in k_smallest]\n    return result""]",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,81,"[""def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quick_select(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_idx = partition(arr, l, r)\n    if k == pivot_idx:\n        return arr[k]\n    elif k < pivot_idx:\n        return quick_select(arr, l, pivot_idx - 1, k)\n    else:\n        return quick_select(arr, pivot_idx + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k > n:\n        return 'k should be smaller than array length'\n    k_smallest = [quick_select(arg1, 0, n - 1, i) for i in range(k)]\n    result = [i for i in range(n) if arg1[i] in k_smallest]\n    return result""]",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,82,"['def funcImp(arg1, arg2):\n    temp = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return temp[:arg2]']",1000,0.007044099969789386,0.007484779001679272,0.009532200172543526,N/A
p3_find_n_smallest_number,prompt_2,82,"['def funcImp(arg1, arg2):\n    temp = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return temp[:arg2]']",10000,0.11141359992325306,0.11372001899639145,0.13135949987918139,N/A
p3_find_n_smallest_number,prompt_2,82,"['def funcImp(arg1, arg2):\n    temp = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return temp[:arg2]']",100000,1.586717199999839,1.6193594769993798,1.6836991000454873,N/A
p3_find_n_smallest_number,prompt_2,83,"['import random\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivotIndex = random.randint(left, right)\n    pivotIndex = partition(arr, left, right)\n    if k == pivotIndex:\n        return pivotIndex\n    elif k < pivotIndex:\n        return quickselect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickselect(arr, pivotIndex + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    kSmallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        index = quickselect(kSmallest, 0, arg2 - 1, 0)\n        if arg1[i] < kSmallest[index]:\n            kSmallest[index] = arg1[i]\n            indexes[index] = i\n    return indexes']",1000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_2,83,"['import random\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivotIndex = random.randint(left, right)\n    pivotIndex = partition(arr, left, right)\n    if k == pivotIndex:\n        return pivotIndex\n    elif k < pivotIndex:\n        return quickselect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickselect(arr, pivotIndex + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    kSmallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        index = quickselect(kSmallest, 0, arg2 - 1, 0)\n        if arg1[i] < kSmallest[index]:\n            kSmallest[index] = arg1[i]\n            indexes[index] = i\n    return indexes']",10000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_2,83,"['import random\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivotIndex = random.randint(left, right)\n    pivotIndex = partition(arr, left, right)\n    if k == pivotIndex:\n        return pivotIndex\n    elif k < pivotIndex:\n        return quickselect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickselect(arr, pivotIndex + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    kSmallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        index = quickselect(kSmallest, 0, arg2 - 1, 0)\n        if arg1[i] < kSmallest[index]:\n            kSmallest[index] = arg1[i]\n            indexes[index] = i\n    return indexes']",100000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_2,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    index_dict = {}\n    for i, value in enumerate(arg1):\n        if value in index_dict:\n            index_dict[value].append(i)\n        else:\n            index_dict[value] = [i]\n    sorted_vals = sorted(list(set(arg1)))\n    result = []\n    for val in sorted_vals[:arg2]:\n        result += index_dict[val]\n    return sorted(result)']",1000,0.006445200182497501,0.006829444007016718,0.009273800067603588,N/A
p3_find_n_smallest_number,prompt_2,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    index_dict = {}\n    for i, value in enumerate(arg1):\n        if value in index_dict:\n            index_dict[value].append(i)\n        else:\n            index_dict[value] = [i]\n    sorted_vals = sorted(list(set(arg1)))\n    result = []\n    for val in sorted_vals[:arg2]:\n        result += index_dict[val]\n    return sorted(result)']",10000,0.07573530008085072,0.07779567099409178,0.08748840005137026,N/A
p3_find_n_smallest_number,prompt_2,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    index_dict = {}\n    for i, value in enumerate(arg1):\n        if value in index_dict:\n            index_dict[value].append(i)\n        else:\n            index_dict[value] = [i]\n    sorted_vals = sorted(list(set(arg1)))\n    result = []\n    for val in sorted_vals[:arg2]:\n        result += index_dict[val]\n    return sorted(result)']",100000,1.6968145000282675,1.7328547310153954,1.7796554998494685,N/A
p3_find_n_smallest_number,prompt_2,85,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[0]\n        lows = [x for x in nums if x < pivot]\n        highs = [x for x in nums if x > pivot]\n        pivots = [x for x in nums if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + quickselect(highs, k - len(lows) - len(pivots))\n    smallest = []\n    for i in range(arg2):\n        idx = quickselect(arg1, i)\n        smallest.append(idx)\n    return smallest']",1000,0.030094899935647845,0.031203024010173976,0.039152099983766675,N/A
p3_find_n_smallest_number,prompt_2,85,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[0]\n        lows = [x for x in nums if x < pivot]\n        highs = [x for x in nums if x > pivot]\n        pivots = [x for x in nums if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + quickselect(highs, k - len(lows) - len(pivots))\n    smallest = []\n    for i in range(arg2):\n        idx = quickselect(arg1, i)\n        smallest.append(idx)\n    return smallest']",10000,0.3896604001056403,0.3991457439796068,0.4172406999859959,N/A
p3_find_n_smallest_number,prompt_2,85,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[0]\n        lows = [x for x in nums if x < pivot]\n        highs = [x for x in nums if x > pivot]\n        pivots = [x for x in nums if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + quickselect(highs, k - len(lows) - len(pivots))\n    smallest = []\n    for i in range(arg2):\n        idx = quickselect(arg1, i)\n        smallest.append(idx)\n    return smallest']",100000,4.704840099904686,4.75292739300523,5.0246058001648635,N/A
p3_find_n_smallest_number,prompt_2,86,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Error: k is greater than length of array.'\n    smallest_indices = []\n    sorted_array = arg1.copy()\n    sorted_array.sort()\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        smallest_indices.append(index)\n    return smallest_indices""]",1000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_2,86,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Error: k is greater than length of array.'\n    smallest_indices = []\n    sorted_array = arg1.copy()\n    sorted_array.sort()\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        smallest_indices.append(index)\n    return smallest_indices""]",10000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_2,86,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Error: k is greater than length of array.'\n    smallest_indices = []\n    sorted_array = arg1.copy()\n    sorted_array.sort()\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        smallest_indices.append(index)\n    return smallest_indices""]",100000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_2,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    smallest = []\n    for num in sorted(index_dict.keys())[:arg2]:\n        smallest.extend(index_dict[num])\n    return smallest']",1000,0.008632099954411387,0.009148040011059493,0.01067039999179542,N/A
p3_find_n_smallest_number,prompt_2,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    smallest = []\n    for num in sorted(index_dict.keys())[:arg2]:\n        smallest.extend(index_dict[num])\n    return smallest']",10000,0.1390079997945577,0.14188552600098775,0.1474776000250131,N/A
p3_find_n_smallest_number,prompt_2,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    smallest = []\n    for num in sorted(index_dict.keys())[:arg2]:\n        smallest.extend(index_dict[num])\n    return smallest']",100000,2.2001423998735845,2.2365366789815018,2.3082699000369757,N/A
p3_find_n_smallest_number,prompt_2,88,"['def funcImp(arg1, k):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_smallest_indices = []\n    for num in unique_nums:\n        if len(k_smallest_indices) == k:\n            break\n        indices = num_dict[num]\n        if len(k_smallest_indices) + len(indices) > k:\n            k_smallest_indices.extend(indices[:k - len(k_smallest_indices)])\n        else:\n            k_smallest_indices.extend(indices)\n    return k_smallest_indices']",1000,0.006202199961990118,0.006493237006943673,0.007557000033557415,N/A
p3_find_n_smallest_number,prompt_2,88,"['def funcImp(arg1, k):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_smallest_indices = []\n    for num in unique_nums:\n        if len(k_smallest_indices) == k:\n            break\n        indices = num_dict[num]\n        if len(k_smallest_indices) + len(indices) > k:\n            k_smallest_indices.extend(indices[:k - len(k_smallest_indices)])\n        else:\n            k_smallest_indices.extend(indices)\n    return k_smallest_indices']",10000,0.07459269999526441,0.07638051900081337,0.07879730011336505,N/A
p3_find_n_smallest_number,prompt_2,88,"['def funcImp(arg1, k):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_smallest_indices = []\n    for num in unique_nums:\n        if len(k_smallest_indices) == k:\n            break\n        indices = num_dict[num]\n        if len(k_smallest_indices) + len(indices) > k:\n            k_smallest_indices.extend(indices[:k - len(k_smallest_indices)])\n        else:\n            k_smallest_indices.extend(indices)\n    return k_smallest_indices']",100000,1.5714332999195904,1.6047246560058557,1.6428340000566095,N/A
p3_find_n_smallest_number,prompt_2,89,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1.sort()\n    return [index_dict[arg1[i]] for i in range(arg2)]']",1000,0.0028838999569416046,0.0030318859848193825,0.003696999978274107,N/A
p3_find_n_smallest_number,prompt_2,89,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1.sort()\n    return [index_dict[arg1[i]] for i in range(arg2)]']",10000,0.028441500151529908,0.030221630004234612,0.036623400170356035,N/A
p3_find_n_smallest_number,prompt_2,89,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1.sort()\n    return [index_dict[arg1[i]] for i in range(arg2)]']",100000,0.647382800001651,0.6860735599999316,0.70757140009664,N/A
p3_find_n_smallest_number,prompt_2,90,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return 'Error: k is greater than the length of the array'\n    k_smallest = arr[:k]\n    heapq.heapify(k_smallest)\n    for i in range(k, len(arr)):\n        if arr[i] < k_smallest[-1]:\n            heapq.heappop(k_smallest)\n            heapq.heappush(k_smallest, arr[i])\n    result = {}\n    for num in k_smallest:\n        result[num] = [i for i, x in enumerate(arr) if x == num]\n    return result""]",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,90,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return 'Error: k is greater than the length of the array'\n    k_smallest = arr[:k]\n    heapq.heapify(k_smallest)\n    for i in range(k, len(arr)):\n        if arr[i] < k_smallest[-1]:\n            heapq.heappop(k_smallest)\n            heapq.heappush(k_smallest, arr[i])\n    result = {}\n    for num in k_smallest:\n        result[num] = [i for i, x in enumerate(arr) if x == num]\n    return result""]",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,90,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return 'Error: k is greater than the length of the array'\n    k_smallest = arr[:k]\n    heapq.heapify(k_smallest)\n    for i in range(k, len(arr)):\n        if arr[i] < k_smallest[-1]:\n            heapq.heappop(k_smallest)\n            heapq.heappush(k_smallest, arr[i])\n    result = {}\n    for num in k_smallest:\n        result[num] = [i for i, x in enumerate(arr) if x == num]\n    return result""]",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,91,"['def funcImp(arg1, k):\n    data_dict = {}\n    for i, num in enumerate(arg1):\n        data_dict[num] = i\n    arg1.sort()\n    result = [data_dict[arg1[i]] for i in range(k)]\n    return result']",1000,0.0031767000909894705,0.003241477010305971,0.0033453998621553183,N/A
p3_find_n_smallest_number,prompt_2,91,"['def funcImp(arg1, k):\n    data_dict = {}\n    for i, num in enumerate(arg1):\n        data_dict[num] = i\n    arg1.sort()\n    result = [data_dict[arg1[i]] for i in range(k)]\n    return result']",10000,0.03087499993853271,0.03229021200211719,0.04822300001978874,N/A
p3_find_n_smallest_number,prompt_2,91,"['def funcImp(arg1, k):\n    data_dict = {}\n    for i, num in enumerate(arg1):\n        data_dict[num] = i\n    arg1.sort()\n    result = [data_dict[arg1[i]] for i in range(k)]\n    return result']",100000,0.6964443000033498,0.7251827039918862,0.7543495998252183,N/A
p3_find_n_smallest_number,prompt_2,92,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'Error: k is greater than the length of the input array.'\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_values = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    smallest_indexes = [i[0] for i in sorted_values]\n    return smallest_indexes""]",1000,0.010046500014141202,0.010425554991234093,0.010983400046825409,N/A
p3_find_n_smallest_number,prompt_2,92,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'Error: k is greater than the length of the input array.'\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_values = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    smallest_indexes = [i[0] for i in sorted_values]\n    return smallest_indexes""]",10000,0.15876820008270442,0.16428434997797012,0.1733804999385029,N/A
p3_find_n_smallest_number,prompt_2,92,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'Error: k is greater than the length of the input array.'\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_values = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    smallest_indexes = [i[0] for i in sorted_values]\n    return smallest_indexes""]",100000,2.5429060999304056,2.601152342981659,2.7615882998798043,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [x[1] for x in heapq.nsmallest(arg2, min_heap)]']",1000,0.002306099981069565,0.00244710601400584,0.0026241999585181475,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [x[1] for x in heapq.nsmallest(arg2, min_heap)]']",10000,0.022651199949905276,0.02342161398846656,0.02639579982496798,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [x[1] for x in heapq.nsmallest(arg2, min_heap)]']",100000,0.22820309991948307,0.2317246969952248,0.24121410003863275,N/A
p3_find_n_smallest_number,prompt_2,94,"['import random\n\ndef partition(lst, pivot):\n    left = []\n    right = []\n    for elem in lst:\n        if elem <= pivot:\n            left.append(elem)\n        else:\n            right.append(elem)\n    return (left, right)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    left, right = partition(lst, pivot)\n    if k < len(left):\n        return quickselect(left, k)\n    elif k >= len(lst) - len(right):\n        return quickselect(right, k - (len(lst) - len(right)))\n    else:\n        return pivot\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest]\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded while calling a Python object
p3_find_n_smallest_number,prompt_2,94,"['import random\n\ndef partition(lst, pivot):\n    left = []\n    right = []\n    for elem in lst:\n        if elem <= pivot:\n            left.append(elem)\n        else:\n            right.append(elem)\n    return (left, right)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    left, right = partition(lst, pivot)\n    if k < len(left):\n        return quickselect(left, k)\n    elif k >= len(lst) - len(right):\n        return quickselect(right, k - (len(lst) - len(right)))\n    else:\n        return pivot\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest]\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded while calling a Python object
p3_find_n_smallest_number,prompt_2,94,"['import random\n\ndef partition(lst, pivot):\n    left = []\n    right = []\n    for elem in lst:\n        if elem <= pivot:\n            left.append(elem)\n        else:\n            right.append(elem)\n    return (left, right)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    left, right = partition(lst, pivot)\n    if k < len(left):\n        return quickselect(left, k)\n    elif k >= len(lst) - len(right):\n        return quickselect(right, k - (len(lst) - len(right)))\n    else:\n        return pivot\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest]\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded while calling a Python object
p3_find_n_smallest_number,prompt_2,95,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    sorted_indexes = sorted([x[0] for x in k_smallest])\n    return sorted_indexes']",1000,0.010107100009918213,0.010683241006918252,0.012874099891632795,N/A
p3_find_n_smallest_number,prompt_2,95,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    sorted_indexes = sorted([x[0] for x in k_smallest])\n    return sorted_indexes']",10000,0.16185649996623397,0.1691884790058248,0.18197020003572106,N/A
p3_find_n_smallest_number,prompt_2,95,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    sorted_indexes = sorted([x[0] for x in k_smallest])\n    return sorted_indexes']",100000,2.6013515000231564,2.6512692309892736,2.72575889993459,N/A
p3_find_n_smallest_number,prompt_2,96,"['def funcImp(arg1, arg2):\n    k = arg2\n    dict_val = {i: arg1[i] for i in range(len(arg1))}\n    smallest = sorted(dict_val, key=dict_val.get)[:k]\n    smallest.sort()\n    return smallest']",1000,0.007458699867129326,0.007757865008898079,0.009451900143176317,N/A
p3_find_n_smallest_number,prompt_2,96,"['def funcImp(arg1, arg2):\n    k = arg2\n    dict_val = {i: arg1[i] for i in range(len(arg1))}\n    smallest = sorted(dict_val, key=dict_val.get)[:k]\n    smallest.sort()\n    return smallest']",10000,0.1166500998660922,0.11992288899607956,0.14160860003903508,N/A
p3_find_n_smallest_number,prompt_2,96,"['def funcImp(arg1, arg2):\n    k = arg2\n    dict_val = {i: arg1[i] for i in range(len(arg1))}\n    smallest = sorted(dict_val, key=dict_val.get)[:k]\n    smallest.sort()\n    return smallest']",100000,1.8350875000469387,1.863531285005156,1.9225097000598907,N/A
p3_find_n_smallest_number,prompt_2,97,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        minIndex = arg1.index(min(arg1))\n        indexes.append(minIndex)\n        arg1[minIndex] = float('inf')\n    return indexes""]",1000,0.0022245999425649643,0.002349264014046639,0.00789069989696145,N/A
p3_find_n_smallest_number,prompt_2,97,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        minIndex = arg1.index(min(arg1))\n        indexes.append(minIndex)\n        arg1[minIndex] = float('inf')\n    return indexes""]",10000,0.022272400092333555,0.033192528993822634,0.08864969993010163,N/A
p3_find_n_smallest_number,prompt_2,97,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        minIndex = arg1.index(min(arg1))\n        indexes.append(minIndex)\n        arg1[minIndex] = float('inf')\n    return indexes""]",100000,0.33680679998360574,0.7391077529801987,1.086525100050494,N/A
p3_find_n_smallest_number,prompt_2,98,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    if k > n:\n        return []\n    l = 0\n    r = n - 1\n    while l <= r:\n        idx = partition(arr, l, r)\n        if idx == k:\n            return list(range(k))\n        elif idx < k:\n            l = idx + 1\n        else:\n            r = idx - 1\n    return list(range(k))\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,2.0260340999811888,2.1404324699938297,2.205638299928978,N/A
p3_find_n_smallest_number,prompt_2,98,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    if k > n:\n        return []\n    l = 0\n    r = n - 1\n    while l <= r:\n        idx = partition(arr, l, r)\n        if idx == k:\n            return list(range(k))\n        elif idx < k:\n            l = idx + 1\n        else:\n            r = idx - 1\n    return list(range(k))\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,98,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    if k > n:\n        return []\n    l = 0\n    r = n - 1\n    while l <= r:\n        idx = partition(arr, l, r)\n        if idx == k:\n            return list(range(k))\n        elif idx < k:\n            l = idx + 1\n        else:\n            r = idx - 1\n    return list(range(k))\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,99,"['def funcImp(arg1, arg2):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indices = []\n    for element in smallest_k:\n        indices.append(index_dict[element])\n    indices.sort()\n    return indices']",1000,0.005395499989390373,0.005881202006712556,0.010836699977517128,N/A
p3_find_n_smallest_number,prompt_2,99,"['def funcImp(arg1, arg2):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indices = []\n    for element in smallest_k:\n        indices.append(index_dict[element])\n    indices.sort()\n    return indices']",10000,0.10425340011715889,0.10811740599572658,0.11753539997152984,N/A
p3_find_n_smallest_number,prompt_2,99,"['def funcImp(arg1, arg2):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indices = []\n    for element in smallest_k:\n        indices.append(index_dict[element])\n    indices.sort()\n    return indices']",100000,1.5915330999996513,1.6428844499983826,1.6800682998728007,N/A
p3_find_n_smallest_number,prompt_2,100,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",1000,0.007057199953123927,0.007458782000467182,0.00835510017350316,N/A
p3_find_n_smallest_number,prompt_2,100,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",10000,0.11279090004973114,0.11575983300805091,0.12649410008452833,N/A
p3_find_n_smallest_number,prompt_2,100,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",100000,1.5943775000050664,1.6386559070111253,1.708187600132078,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(abs(arg2), ((n, i) for i, n in enumerate(arg1)))\n    result = sorted((idx for num, idx in k_smallest))\n    return result']",1000,0.005690200021490455,0.0059580649854615335,0.00945689994841814,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(abs(arg2), ((n, i) for i, n in enumerate(arg1)))\n    result = sorted((idx for num, idx in k_smallest))\n    return result']",10000,0.05387489986605942,0.055907305008731784,0.05937730008736253,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(abs(arg2), ((n, i) for i, n in enumerate(arg1)))\n    result = sorted((idx for num, idx in k_smallest))\n    return result']",100000,0.5484718999359757,0.5625167619995772,0.6050363001413643,N/A
p3_find_n_smallest_number,prompt_3,2,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",1000,0.005773500073701143,0.006137052993290126,0.007106199860572815,N/A
p3_find_n_smallest_number,prompt_3,2,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",10000,0.10784700000658631,0.1112574090063572,0.12655260018073022,N/A
p3_find_n_smallest_number,prompt_3,2,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",100000,1.6509126999881119,1.691771485004574,1.743282799841836,N/A
p3_find_n_smallest_number,prompt_3,3,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    indices = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return sorted(indices)']",1000,0.0070992999244481325,0.00749668799340725,0.010454499861225486,N/A
p3_find_n_smallest_number,prompt_3,3,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    indices = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return sorted(indices)']",10000,0.11030790000222623,0.11394970000488684,0.12065049982629716,N/A
p3_find_n_smallest_number,prompt_3,3,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    indices = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return sorted(indices)']",100000,1.6135311999823898,1.6639231740077958,1.7251889000181109,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",1000,0.0049097000155597925,0.0051294400170445445,0.007681099930778146,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",10000,0.05120250000618398,0.05238153502345085,0.05644580000080168,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",100000,0.5141596000175923,0.5279916219948791,0.563148699933663,N/A
p3_find_n_smallest_number,prompt_3,5,"['def funcImp(arg1, arg2):\n\n    def quick_select(left, right, k):\n        if left == right:\n            return (left,)\n        pivot_index = random.randint(left, right)\n        arg1[pivot_index], arg1[right] = (arg1[right], arg1[pivot_index])\n        i = left - 1\n        for j in range(left, right):\n            if arg1[j] < arg1[right]:\n                i += 1\n                arg1[i], arg1[j] = (arg1[j], arg1[i])\n        i += 1\n        arg1[i], arg1[right] = (arg1[right], arg1[i])\n        if k == i - left + 1:\n            return tuple(range(left, i + 1))\n        elif k < i - left + 1:\n            return quick_select(left, i - 1, k)\n        else:\n            return quick_select(i + 1, right, k - (i - left + 1))\n    indices = quick_select(0, len(arg1) - 1, arg2)\n    values = [arg1[i] for i in indices]\n    return (indices, values)']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,5,"['def funcImp(arg1, arg2):\n\n    def quick_select(left, right, k):\n        if left == right:\n            return (left,)\n        pivot_index = random.randint(left, right)\n        arg1[pivot_index], arg1[right] = (arg1[right], arg1[pivot_index])\n        i = left - 1\n        for j in range(left, right):\n            if arg1[j] < arg1[right]:\n                i += 1\n                arg1[i], arg1[j] = (arg1[j], arg1[i])\n        i += 1\n        arg1[i], arg1[right] = (arg1[right], arg1[i])\n        if k == i - left + 1:\n            return tuple(range(left, i + 1))\n        elif k < i - left + 1:\n            return quick_select(left, i - 1, k)\n        else:\n            return quick_select(i + 1, right, k - (i - left + 1))\n    indices = quick_select(0, len(arg1) - 1, arg2)\n    values = [arg1[i] for i in indices]\n    return (indices, values)']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,5,"['def funcImp(arg1, arg2):\n\n    def quick_select(left, right, k):\n        if left == right:\n            return (left,)\n        pivot_index = random.randint(left, right)\n        arg1[pivot_index], arg1[right] = (arg1[right], arg1[pivot_index])\n        i = left - 1\n        for j in range(left, right):\n            if arg1[j] < arg1[right]:\n                i += 1\n                arg1[i], arg1[j] = (arg1[j], arg1[i])\n        i += 1\n        arg1[i], arg1[right] = (arg1[right], arg1[i])\n        if k == i - left + 1:\n            return tuple(range(left, i + 1))\n        elif k < i - left + 1:\n            return quick_select(left, i - 1, k)\n        else:\n            return quick_select(i + 1, right, k - (i - left + 1))\n    indices = quick_select(0, len(arg1) - 1, arg2)\n    values = [arg1[i] for i in indices]\n    return (indices, values)']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices = []\n    heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",1000,0.0032217998523265123,0.003389128998387605,0.003931200131773949,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices = []\n    heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",10000,0.03512130002491176,0.036523867989890275,0.03762079984880984,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices = []\n    heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",100000,0.23822699999436736,0.24416951100807638,0.2739467001520097,N/A
p3_find_n_smallest_number,prompt_3,7,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.006979800062254071,0.007445240991655737,0.010006299940869212,N/A
p3_find_n_smallest_number,prompt_3,7,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.10897190007381141,0.11389837899943814,0.13278039987199008,N/A
p3_find_n_smallest_number,prompt_3,7,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.6043125002179295,1.6632389150047675,1.7358629000373185,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_indexes = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_indexes]']",1000,0.0050472000148147345,0.005265371981076896,0.0057849998120218515,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_indexes = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_indexes]']",10000,0.052974099991843104,0.055334263995755466,0.06270430004224181,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_indexes = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_indexes]']",100000,0.6777919000014663,0.6960287500033155,0.7282545999623835,N/A
p3_find_n_smallest_number,prompt_3,9,"['def funcImp(arg1, k):\n    from heapq import nsmallest\n    smallest = nsmallest(k, arg1)\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.0018933000974357128,0.002030234003905207,0.003023599972948432,N/A
p3_find_n_smallest_number,prompt_3,9,"['def funcImp(arg1, k):\n    from heapq import nsmallest\n    smallest = nsmallest(k, arg1)\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.019687100080773234,0.02070180200273171,0.0243369999807328,N/A
p3_find_n_smallest_number,prompt_3,9,"['def funcImp(arg1, k):\n    from heapq import nsmallest\n    smallest = nsmallest(k, arg1)\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,0.2446058001369238,0.2533955900114961,0.28409840003587306,N/A
p3_find_n_smallest_number,prompt_3,10,"['import heapq\n\ndef funcImp(lst, k):\n    heap = [(val, idx) for idx, val in enumerate(lst[:k])]\n    heapq.heapify(heap)\n    for i in range(k, len(lst)):\n        if lst[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (lst[i], i))\n    return sorted(heap)']",1000,0.009436099790036678,0.009866414002608508,0.01025549997575581,N/A
p3_find_n_smallest_number,prompt_3,10,"['import heapq\n\ndef funcImp(lst, k):\n    heap = [(val, idx) for idx, val in enumerate(lst[:k])]\n    heapq.heapify(heap)\n    for i in range(k, len(lst)):\n        if lst[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (lst[i], i))\n    return sorted(heap)']",10000,0.07150059984996915,0.07351952799828723,0.07758589996956289,N/A
p3_find_n_smallest_number,prompt_3,10,"['import heapq\n\ndef funcImp(lst, k):\n    heap = [(val, idx) for idx, val in enumerate(lst[:k])]\n    heapq.heapify(heap)\n    for i in range(k, len(lst)):\n        if lst[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (lst[i], i))\n    return sorted(heap)']",100000,1.1339636999182403,1.1561565809999592,1.2293388000689447,N/A
p3_find_n_smallest_number,prompt_3,11,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in sorted_list[:k]]']",1000,0.008164800005033612,0.008698973995633423,0.012672899989411235,N/A
p3_find_n_smallest_number,prompt_3,11,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in sorted_list[:k]]']",10000,0.14024970005266368,0.14875865498790516,0.1652825998608023,N/A
p3_find_n_smallest_number,prompt_3,11,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in sorted_list[:k]]']",100000,2.119079800089821,2.1680751280044204,2.2485011001117527,N/A
p3_find_n_smallest_number,prompt_3,12,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",1000,0.006031600059941411,0.006481567020528018,0.007271500071510673,N/A
p3_find_n_smallest_number,prompt_3,12,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",10000,0.10836470010690391,0.1115407960047014,0.12067790003493428,N/A
p3_find_n_smallest_number,prompt_3,12,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",100000,1.4079065001569688,1.443175222002901,1.592648799996823,N/A
p3_find_n_smallest_number,prompt_3,13,"['def funcImp(arg1, arg2):\n    dict1 = {val: i for i, val in enumerate(arg1)}\n    smlst_vals = sorted(dict1.keys())[:arg2]\n    return [dict1[val] for val in smlst_vals]']",1000,0.005817099940031767,0.006141329992096871,0.0079369000159204,N/A
p3_find_n_smallest_number,prompt_3,13,"['def funcImp(arg1, arg2):\n    dict1 = {val: i for i, val in enumerate(arg1)}\n    smlst_vals = sorted(dict1.keys())[:arg2]\n    return [dict1[val] for val in smlst_vals]']",10000,0.10681649995967746,0.11014839999610558,0.12231610016897321,N/A
p3_find_n_smallest_number,prompt_3,13,"['def funcImp(arg1, arg2):\n    dict1 = {val: i for i, val in enumerate(arg1)}\n    smlst_vals = sorted(dict1.keys())[:arg2]\n    return [dict1[val] for val in smlst_vals]']",100000,1.6343918000347912,1.7050805360008963,1.7637039998080581,N/A
p3_find_n_smallest_number,prompt_3,14,"['def funcImp(arg1, arg2):\n    indexes = []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    temp = arg1[:k]\n    min_index = temp.index(min(temp))\n    indexes.append(min_index)\n    for i in range(k, len(arg1)):\n        if arg1[i] < max(temp):\n            temp[temp.index(max(temp))] = arg1[i]\n            min_index = temp.index(min(temp))\n            indexes.append(i) if min_index != k else None\n    return indexes']",1000,0.007764599984511733,0.008039145013317466,0.009110900107771158,N/A
p3_find_n_smallest_number,prompt_3,14,"['def funcImp(arg1, arg2):\n    indexes = []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    temp = arg1[:k]\n    min_index = temp.index(min(temp))\n    indexes.append(min_index)\n    for i in range(k, len(arg1)):\n        if arg1[i] < max(temp):\n            temp[temp.index(max(temp))] = arg1[i]\n            min_index = temp.index(min(temp))\n            indexes.append(i) if min_index != k else None\n    return indexes']",10000,0.0721313999965787,0.07483932999894023,0.0814788001589477,N/A
p3_find_n_smallest_number,prompt_3,14,"['def funcImp(arg1, arg2):\n    indexes = []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    temp = arg1[:k]\n    min_index = temp.index(min(temp))\n    indexes.append(min_index)\n    for i in range(k, len(arg1)):\n        if arg1[i] < max(temp):\n            temp[temp.index(max(temp))] = arg1[i]\n            min_index = temp.index(min(temp))\n            indexes.append(i) if min_index != k else None\n    return indexes']",100000,0.7297350000590086,0.7455353929917328,0.7703841000329703,N/A
p3_find_n_smallest_number,prompt_3,15,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[val] = i\n    sorted_keys = sorted(d.keys())\n    return [d[sorted_keys[i]] for i in range(arg2)]']",1000,0.006111799972131848,0.006611209011171013,0.012878000037744641,N/A
p3_find_n_smallest_number,prompt_3,15,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[val] = i\n    sorted_keys = sorted(d.keys())\n    return [d[sorted_keys[i]] for i in range(arg2)]']",10000,0.11005020001903176,0.11404268299229443,0.15470560011453927,N/A
p3_find_n_smallest_number,prompt_3,15,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[val] = i\n    sorted_keys = sorted(d.keys())\n    return [d[sorted_keys[i]] for i in range(arg2)]']",100000,1.6712259999476373,1.708914157007821,1.7650566000957042,N/A
p3_find_n_smallest_number,prompt_3,16,"['def funcImp(arg1, arg2):\n    indices = list(range(len(arg1)))\n    elements = {arg1[i]: i for i in indices}\n    smallest_k = sorted(arg1)[:arg2]\n    result = [elements[element] for element in smallest_k]\n    return result']",1000,0.00569240003824234,0.00601302400464192,0.010431800037622452,N/A
p3_find_n_smallest_number,prompt_3,16,"['def funcImp(arg1, arg2):\n    indices = list(range(len(arg1)))\n    elements = {arg1[i]: i for i in indices}\n    smallest_k = sorted(arg1)[:arg2]\n    result = [elements[element] for element in smallest_k]\n    return result']",10000,0.10544850002042949,0.10930464699398726,0.11716460017487407,N/A
p3_find_n_smallest_number,prompt_3,16,"['def funcImp(arg1, arg2):\n    indices = list(range(len(arg1)))\n    elements = {arg1[i]: i for i in indices}\n    smallest_k = sorted(arg1)[:arg2]\n    result = [elements[element] for element in smallest_k]\n    return result']",100000,1.6910713000688702,1.7296680630091579,1.7639235998503864,N/A
p3_find_n_smallest_number,prompt_3,17,"['def funcImp(arg1, arg2):\n    index_dict = {val: idx for idx, val in enumerate(arg1)}\n    sorted_lst = sorted(arg1)[:arg2]\n    smallest_indexes = [index_dict[val] for val in sorted_lst]\n    return smallest_indexes']",1000,0.0057119999546557665,0.006111586003098637,0.008375799981877208,N/A
p3_find_n_smallest_number,prompt_3,17,"['def funcImp(arg1, arg2):\n    index_dict = {val: idx for idx, val in enumerate(arg1)}\n    sorted_lst = sorted(arg1)[:arg2]\n    smallest_indexes = [index_dict[val] for val in sorted_lst]\n    return smallest_indexes']",10000,0.10605970001779497,0.11020154899684713,0.11741090007126331,N/A
p3_find_n_smallest_number,prompt_3,17,"['def funcImp(arg1, arg2):\n    index_dict = {val: idx for idx, val in enumerate(arg1)}\n    sorted_lst = sorted(arg1)[:arg2]\n    smallest_indexes = [index_dict[val] for val in sorted_lst]\n    return smallest_indexes']",100000,1.6421600999310613,1.6782993019907735,1.7385350000113249,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[index], index))\n    return sorted([index for _, index in heap])']",1000,0.009494200116023421,0.010058449015486986,0.017493899911642075,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[index], index))\n    return sorted([index for _, index in heap])']",10000,0.0710634000133723,0.073006982000079,0.0789856999181211,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[index], index))\n    return sorted([index for _, index in heap])']",100000,1.136774400016293,1.161063251006417,1.2117087999358773,N/A
p3_find_n_smallest_number,prompt_3,19,"['def funcImp(arg1, arg2):\n    indexed_arg1 = [(i, val) for i, val in enumerate(arg1)]\n    sorted_arg1 = sorted(indexed_arg1, key=lambda x: x[1])\n    return sorted([x[0] for x in sorted_arg1[:arg2]])']",1000,0.009460999863222241,0.010074904991779477,0.012819399824365973,N/A
p3_find_n_smallest_number,prompt_3,19,"['def funcImp(arg1, arg2):\n    indexed_arg1 = [(i, val) for i, val in enumerate(arg1)]\n    sorted_arg1 = sorted(indexed_arg1, key=lambda x: x[1])\n    return sorted([x[0] for x in sorted_arg1[:arg2]])']",10000,0.15325339999981225,0.15970676800236105,0.17953189997933805,N/A
p3_find_n_smallest_number,prompt_3,19,"['def funcImp(arg1, arg2):\n    indexed_arg1 = [(i, val) for i, val in enumerate(arg1)]\n    sorted_arg1 = sorted(indexed_arg1, key=lambda x: x[1])\n    return sorted([x[0] for x in sorted_arg1[:arg2]])']",100000,2.3012233001645654,2.3732819980126805,2.476290399907157,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",1000,0.011565499939024448,0.012190861005801707,0.013242200016975403,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",10000,0.1752945000771433,0.18309581800131128,0.1964516998268664,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",100000,2.7913911999203265,2.927152212001383,3.0843498001340777,N/A
p3_find_n_smallest_number,prompt_3,21,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    k_smallest = sorted_list[:arg2]\n    return [i for i, _ in k_smallest]']",1000,0.0081044000107795,0.008801452000625432,0.017231000121682882,N/A
p3_find_n_smallest_number,prompt_3,21,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    k_smallest = sorted_list[:arg2]\n    return [i for i, _ in k_smallest]']",10000,0.1381110001821071,0.14502698599826544,0.17048120009712875,N/A
p3_find_n_smallest_number,prompt_3,21,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    k_smallest = sorted_list[:arg2]\n    return [i for i, _ in k_smallest]']",100000,2.0912619000300765,2.151406977986917,2.213796699885279,N/A
p3_find_n_smallest_number,prompt_3,22,"['def funcImp(arg1, arg2):\n    value_to_index = {val: i for i, val in enumerate(arg1)}\n    sorted_values = sorted(arg1)\n    k_smallest = []\n    for val in sorted_values[:arg2]:\n        k_smallest.append(value_to_index[val])\n    return k_smallest']",1000,0.0056871999986469746,0.006094670994207263,0.010098600061610341,N/A
p3_find_n_smallest_number,prompt_3,22,"['def funcImp(arg1, arg2):\n    value_to_index = {val: i for i, val in enumerate(arg1)}\n    sorted_values = sorted(arg1)\n    k_smallest = []\n    for val in sorted_values[:arg2]:\n        k_smallest.append(value_to_index[val])\n    return k_smallest']",10000,0.10776869999244809,0.10994546599453316,0.11954970005899668,N/A
p3_find_n_smallest_number,prompt_3,22,"['def funcImp(arg1, arg2):\n    value_to_index = {val: i for i, val in enumerate(arg1)}\n    sorted_values = sorted(arg1)\n    k_smallest = []\n    for val in sorted_values[:arg2]:\n        k_smallest.append(value_to_index[val])\n    return k_smallest']",100000,1.643885500030592,1.6682185059948824,1.7043555001728237,N/A
p3_find_n_smallest_number,prompt_3,23,"['def funcImp(arg1, arg2):\n\n    def select(lst, l, r, index):\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[pivot_index], lst[r] = (lst[r], lst[pivot_index])\n        j = l\n        for i in range(l, r):\n            if lst[i] < lst[r]:\n                lst[i], lst[j] = (lst[j], lst[i])\n                j += 1\n        lst[r], lst[j] = (lst[j], lst[r])\n        if index == j:\n            return lst[j]\n        elif index < j:\n            return select(lst, l, j - 1, index)\n        else:\n            return select(lst, j + 1, r, index)\n    lst = arg1[:]\n    k = arg2\n    kth_smallest = select(lst, 0, len(lst) - 1, k - 1)\n    indexes = []\n    for i in range(len(lst)):\n        if lst[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == k:\n            break\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,23,"['def funcImp(arg1, arg2):\n\n    def select(lst, l, r, index):\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[pivot_index], lst[r] = (lst[r], lst[pivot_index])\n        j = l\n        for i in range(l, r):\n            if lst[i] < lst[r]:\n                lst[i], lst[j] = (lst[j], lst[i])\n                j += 1\n        lst[r], lst[j] = (lst[j], lst[r])\n        if index == j:\n            return lst[j]\n        elif index < j:\n            return select(lst, l, j - 1, index)\n        else:\n            return select(lst, j + 1, r, index)\n    lst = arg1[:]\n    k = arg2\n    kth_smallest = select(lst, 0, len(lst) - 1, k - 1)\n    indexes = []\n    for i in range(len(lst)):\n        if lst[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == k:\n            break\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,23,"['def funcImp(arg1, arg2):\n\n    def select(lst, l, r, index):\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[pivot_index], lst[r] = (lst[r], lst[pivot_index])\n        j = l\n        for i in range(l, r):\n            if lst[i] < lst[r]:\n                lst[i], lst[j] = (lst[j], lst[i])\n                j += 1\n        lst[r], lst[j] = (lst[j], lst[r])\n        if index == j:\n            return lst[j]\n        elif index < j:\n            return select(lst, l, j - 1, index)\n        else:\n            return select(lst, j + 1, r, index)\n    lst = arg1[:]\n    k = arg2\n    kth_smallest = select(lst, 0, len(lst) - 1, k - 1)\n    indexes = []\n    for i in range(len(lst)):\n        if lst[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == k:\n            break\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",1000,0.0032639000564813614,0.00361053999979049,0.006219800096005201,N/A
p3_find_n_smallest_number,prompt_3,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",10000,0.08516080002300441,0.08733599199913442,0.09688910003751516,N/A
p3_find_n_smallest_number,prompt_3,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",100000,1.2062208000570536,1.2291523949918337,1.2615952999331057,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indices.append(i)\n    return indices']",1000,0.004400799982249737,0.004635797007940709,0.00527750002220273,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indices.append(i)\n    return indices']",10000,0.04327429994009435,0.044257684999611226,0.046751199988648295,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indices.append(i)\n    return indices']",100000,0.4352432999294251,0.44026080400217327,0.45184209989383817,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",1000,0.004549999954178929,0.004852981998119503,0.00783040001988411,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",10000,0.04241839982569218,0.0435481989942491,0.04678290011361241,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",100000,0.4394376000855118,0.4462007420114242,0.4734534998424351,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i, num in enumerate(arg1[arg2:], arg2):\n        if num < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (num, i))\n    res = [idx for num, idx in sorted(min_heap)]\n    return res']",1000,0.0026684000622481108,0.0028370120073668657,0.0036182000767439604,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i, num in enumerate(arg1[arg2:], arg2):\n        if num < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (num, i))\n    res = [idx for num, idx in sorted(min_heap)]\n    return res']",10000,0.027178100077435374,0.028515200989786535,0.03432630002498627,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i, num in enumerate(arg1[arg2:], arg2):\n        if num < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (num, i))\n    res = [idx for num, idx in sorted(min_heap)]\n    return res']",100000,0.2973786999937147,0.3081101129949093,0.3266640999354422,N/A
p3_find_n_smallest_number,prompt_3,28,"['def funcImp(arg1, arg2):\n    index_dict = {val: index for index, val in enumerate(arg1)}\n    smallest_k = sorted(arg1)[:arg2]\n    index_list = []\n    for num in smallest_k:\n        index_list.append(index_dict[num])\n    return index_list']",1000,0.005812200019136071,0.006085580007638782,0.0072015998885035515,N/A
p3_find_n_smallest_number,prompt_3,28,"['def funcImp(arg1, arg2):\n    index_dict = {val: index for index, val in enumerate(arg1)}\n    smallest_k = sorted(arg1)[:arg2]\n    index_list = []\n    for num in smallest_k:\n        index_list.append(index_dict[num])\n    return index_list']",10000,0.10752870002761483,0.11014240100281313,0.12432890012860298,N/A
p3_find_n_smallest_number,prompt_3,28,"['def funcImp(arg1, arg2):\n    index_dict = {val: index for index, val in enumerate(arg1)}\n    smallest_k = sorted(arg1)[:arg2]\n    index_list = []\n    for num in smallest_k:\n        index_list.append(index_dict[num])\n    return index_list']",100000,1.6456965999677777,1.6896981380088254,1.78670040005818,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.007048300001770258,0.0074078829842619594,0.008140200050547719,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.11133569991216063,0.11365920097799971,0.12096400000154972,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.593790699960664,1.6307272339961492,1.707096700090915,N/A
p3_find_n_smallest_number,prompt_3,30,"['def funcImp(arg1, arg2):\n    dict_ = {}\n    for i, num in enumerate(arg1):\n        dict_[i] = num\n    dict_ = sorted(dict_.items(), key=lambda x: x[1])\n    smallest_k = []\n    for i in range(arg2):\n        smallest_k.append(dict_[i][0])\n    return smallest_k']",1000,0.010327399941161275,0.010800651994068176,0.011990500148385763,N/A
p3_find_n_smallest_number,prompt_3,30,"['def funcImp(arg1, arg2):\n    dict_ = {}\n    for i, num in enumerate(arg1):\n        dict_[i] = num\n    dict_ = sorted(dict_.items(), key=lambda x: x[1])\n    smallest_k = []\n    for i in range(arg2):\n        smallest_k.append(dict_[i][0])\n    return smallest_k']",10000,0.16584190004505217,0.17234186098910867,0.1808156999759376,N/A
p3_find_n_smallest_number,prompt_3,30,"['def funcImp(arg1, arg2):\n    dict_ = {}\n    for i, num in enumerate(arg1):\n        dict_[i] = num\n    dict_ = sorted(dict_.items(), key=lambda x: x[1])\n    smallest_k = []\n    for i in range(arg2):\n        smallest_k.append(dict_[i][0])\n    return smallest_k']",100000,2.655878799967468,2.7052991500054486,2.84566089999862,N/A
p3_find_n_smallest_number,prompt_3,31,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",1000,0.00694280001334846,0.008708396996371447,0.034167799865826964,N/A
p3_find_n_smallest_number,prompt_3,31,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",10000,0.1150439998600632,0.11713525800500064,0.12180740013718605,N/A
p3_find_n_smallest_number,prompt_3,31,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",100000,1.6120875999331474,1.6373715770011767,1.7131926000583917,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in k_smallest]\n    return indexes']",1000,0.004760799929499626,0.0048430610098876056,0.0050796999130398035,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in k_smallest]\n    return indexes']",10000,0.042616300052031875,0.043912729003932324,0.04647050006315112,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in k_smallest]\n    return indexes']",100000,0.4388329000212252,0.44358508601551877,0.47884880006313324,N/A
p3_find_n_smallest_number,prompt_3,33,"['def funcImp(arg1, arg2):\n    arr_with_index = [(value, index) for index, value in enumerate(arg1)]\n    arr_with_index.sort()\n    return [x[1] for x in arr_with_index[:arg2]]']",1000,0.011540199862793088,0.012077064004261047,0.015958699863404036,N/A
p3_find_n_smallest_number,prompt_3,33,"['def funcImp(arg1, arg2):\n    arr_with_index = [(value, index) for index, value in enumerate(arg1)]\n    arr_with_index.sort()\n    return [x[1] for x in arr_with_index[:arg2]]']",10000,0.17880379990674555,0.18362950798822567,0.2097716999705881,N/A
p3_find_n_smallest_number,prompt_3,33,"['def funcImp(arg1, arg2):\n    arr_with_index = [(value, index) for index, value in enumerate(arg1)]\n    arr_with_index.sort()\n    return [x[1] for x in arr_with_index[:arg2]]']",100000,2.822462300071493,2.8845872589969077,3.027158100157976,N/A
p3_find_n_smallest_number,prompt_3,34,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indices = indices[:arg2]\n    return k_indices']",1000,0.007234599906951189,0.007476126996334642,0.007851000176742673,N/A
p3_find_n_smallest_number,prompt_3,34,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indices = indices[:arg2]\n    return k_indices']",10000,0.11178430006839335,0.11412965800613165,0.1236892999149859,N/A
p3_find_n_smallest_number,prompt_3,34,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indices = indices[:arg2]\n    return k_indices']",100000,1.6124931999947876,1.642980417991057,1.6798878000117838,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",1000,0.004026200156658888,0.004236497010570019,0.004557100124657154,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",10000,0.03967770002782345,0.04084692901233211,0.04382700007408857,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",100000,0.39380550011992455,0.4001043379958719,0.42348509980365634,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for x in heap:\n        index = arg1.index(x)\n        indexes.append(index)\n    return indexes']",1000,0.0069512000773102045,0.007285242998041213,0.009256399935111403,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for x in heap:\n        index = arg1.index(x)\n        indexes.append(index)\n    return indexes']",10000,0.05513980006799102,0.0562622670060955,0.0617793002165854,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for x in heap:\n        index = arg1.index(x)\n        indexes.append(index)\n    return indexes']",100000,0.8202356998808682,0.8339494369830937,0.8698638000059873,N/A
p3_find_n_smallest_number,prompt_3,37,"['def funcImp(arg1, arg2):\n    dict_num_index = {}\n    for i in range(len(arg1)):\n        dict_num_index[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(dict_num_index[num])\n    return indexes']",1000,0.005718500120565295,0.0060414190217852595,0.007878199918195605,N/A
p3_find_n_smallest_number,prompt_3,37,"['def funcImp(arg1, arg2):\n    dict_num_index = {}\n    for i in range(len(arg1)):\n        dict_num_index[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(dict_num_index[num])\n    return indexes']",10000,0.10658939997665584,0.10929648500401527,0.1242641001008451,N/A
p3_find_n_smallest_number,prompt_3,37,"['def funcImp(arg1, arg2):\n    dict_num_index = {}\n    for i in range(len(arg1)):\n        dict_num_index[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(dict_num_index[num])\n    return indexes']",100000,1.621060400037095,1.6824639340001157,1.7223249000962824,N/A
p3_find_n_smallest_number,prompt_3,38,"['def funcImp(arg1, arg2):\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if num not in indexes:\n            indexes[num] = [i]\n        else:\n            indexes[num].append(i)\n    sorted_list = sorted(set(arg1))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(indexes[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.0062327999621629715,0.0066442850115709,0.00707910000346601,N/A
p3_find_n_smallest_number,prompt_3,38,"['def funcImp(arg1, arg2):\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if num not in indexes:\n            indexes[num] = [i]\n        else:\n            indexes[num].append(i)\n    sorted_list = sorted(set(arg1))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(indexes[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.0745739999692887,0.07662426800699905,0.07972369994968176,N/A
p3_find_n_smallest_number,prompt_3,38,"['def funcImp(arg1, arg2):\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if num not in indexes:\n            indexes[num] = [i]\n        else:\n            indexes[num].append(i)\n    sorted_list = sorted(set(arg1))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(indexes[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,1.6167838999535888,1.6669934879872017,1.7162938001565635,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[-1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        indexes.append(index)\n    return indexes']",1000,0.007014499977231026,0.007818216001614928,0.016751500079408288,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[-1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        indexes.append(index)\n    return indexes']",10000,0.054477300029248,0.05688936099410057,0.06495629996061325,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[-1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        indexes.append(index)\n    return indexes']",100000,0.8198563000187278,0.8346585450088605,0.8598400000482798,N/A
p3_find_n_smallest_number,prompt_3,40,"['def funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Args:\n    arg1: list of integers - the unsorted array to find the k smallest numbers indexes\n    arg2: int - the number of smallest numbers to find\n    \n    Returns:\n    list of integers - the indexes of the k smallest numbers in the unsorted array\n    """"""\n    d = {}\n    for i, num in enumerate(arg1):\n        if num not in d:\n            d[num] = [i]\n        else:\n            d[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(d[num])\n    return result']",1000,0.006330200005322695,0.00663542201044038,0.007915799971669912,N/A
p3_find_n_smallest_number,prompt_3,40,"['def funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Args:\n    arg1: list of integers - the unsorted array to find the k smallest numbers indexes\n    arg2: int - the number of smallest numbers to find\n    \n    Returns:\n    list of integers - the indexes of the k smallest numbers in the unsorted array\n    """"""\n    d = {}\n    for i, num in enumerate(arg1):\n        if num not in d:\n            d[num] = [i]\n        else:\n            d[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(d[num])\n    return result']",10000,0.07640070002526045,0.0786688980134204,0.08108969987370074,N/A
p3_find_n_smallest_number,prompt_3,40,"['def funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Args:\n    arg1: list of integers - the unsorted array to find the k smallest numbers indexes\n    arg2: int - the number of smallest numbers to find\n    \n    Returns:\n    list of integers - the indexes of the k smallest numbers in the unsorted array\n    """"""\n    d = {}\n    for i, num in enumerate(arg1):\n        if num not in d:\n            d[num] = [i]\n        else:\n            d[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(d[num])\n    return result']",100000,1.666300900047645,1.7253716159937904,1.7673651000950485,N/A
p3_find_n_smallest_number,prompt_3,41,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(num_index_dict[num])\n    return result']",1000,0.00558270001783967,0.005905558003578335,0.007669099839404225,N/A
p3_find_n_smallest_number,prompt_3,41,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(num_index_dict[num])\n    return result']",10000,0.10661139991134405,0.1089744219998829,0.11686259997077286,N/A
p3_find_n_smallest_number,prompt_3,41,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(num_index_dict[num])\n    return result']",100000,1.636099699884653,1.6725880059879272,1.765063799917698,N/A
p3_find_n_smallest_number,prompt_3,42,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = [0] * k\n    values = [float('inf')] * k\n    for i in range(len(arg1)):\n        if arg1[i] < values[k - 1]:\n            for j in range(k):\n                if arg1[i] < values[j]:\n                    values[j + 1:k] = values[j:k - 1]\n                    indexes[j + 1:k] = indexes[j:k - 1]\n                    values[j] = arg1[i]\n                    indexes[j] = i\n                    break\n    return indexes""]",1000,0.0030587001238018274,0.0032190100103616716,0.0037845999468117952,N/A
p3_find_n_smallest_number,prompt_3,42,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = [0] * k\n    values = [float('inf')] * k\n    for i in range(len(arg1)):\n        if arg1[i] < values[k - 1]:\n            for j in range(k):\n                if arg1[i] < values[j]:\n                    values[j + 1:k] = values[j:k - 1]\n                    indexes[j + 1:k] = indexes[j:k - 1]\n                    values[j] = arg1[i]\n                    indexes[j] = i\n                    break\n    return indexes""]",10000,0.024404400028288364,0.025207014991901814,0.02943309978581965,N/A
p3_find_n_smallest_number,prompt_3,42,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = [0] * k\n    values = [float('inf')] * k\n    for i in range(len(arg1)):\n        if arg1[i] < values[k - 1]:\n            for j in range(k):\n                if arg1[i] < values[j]:\n                    values[j + 1:k] = values[j:k - 1]\n                    indexes[j + 1:k] = indexes[j:k - 1]\n                    values[j] = arg1[i]\n                    indexes[j] = i\n                    break\n    return indexes""]",100000,0.23528879997320473,0.2396234290045686,0.2528909998945892,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n        smallest_indexes.append(i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            smallest_indexes[heap.index(arg1[i])] = i\n    return smallest_indexes']",1000,0.007906399900093675,0.008196363989263773,0.008609500015154481,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n        smallest_indexes.append(i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            smallest_indexes[heap.index(arg1[i])] = i\n    return smallest_indexes']",10000,0.06054030009545386,0.06257706300588324,0.06687580002471805,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n        smallest_indexes.append(i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            smallest_indexes[heap.index(arg1[i])] = i\n    return smallest_indexes']",100000,0.9357263001147658,0.9481439189985394,0.9842769000679255,N/A
p3_find_n_smallest_number,prompt_3,44,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1 or k > len(arr):\n        return []\n    low, high = (0, len(arr) - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,2.0263680000789464,2.1595456139952875,2.208058499963954,N/A
p3_find_n_smallest_number,prompt_3,44,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1 or k > len(arr):\n        return []\n    low, high = (0, len(arr) - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,44,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1 or k > len(arr):\n        return []\n    low, high = (0, len(arr) - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,45,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    return indices""]",1000,0.002164199948310852,0.0023528210003860295,0.007793799974024296,N/A
p3_find_n_smallest_number,prompt_3,45,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    return indices""]",10000,0.0219541999977082,0.03291693901643157,0.08929850021377206,N/A
p3_find_n_smallest_number,prompt_3,45,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    return indices""]",100000,0.34003099985420704,0.7483314909995533,1.1069228001870215,N/A
p3_find_n_smallest_number,prompt_3,46,"['def funcImp(arg1, arg2):\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    sorted_pairs = sorted(num_index_pairs)[:arg2]\n    return [pair[1] for pair in sorted_pairs]']",1000,0.011300700018182397,0.011959071010351182,0.014252400025725365,N/A
p3_find_n_smallest_number,prompt_3,46,"['def funcImp(arg1, arg2):\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    sorted_pairs = sorted(num_index_pairs)[:arg2]\n    return [pair[1] for pair in sorted_pairs]']",10000,0.1684786998666823,0.17290594800608233,0.19541199994273484,N/A
p3_find_n_smallest_number,prompt_3,46,"['def funcImp(arg1, arg2):\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    sorted_pairs = sorted(num_index_pairs)[:arg2]\n    return [pair[1] for pair in sorted_pairs]']",100000,2.5893691000528634,2.6633428369951435,2.8213438000530005,N/A
p3_find_n_smallest_number,prompt_3,47,"['def funcImp(arg1, arg2):\n    indexes = []\n    values = {}\n    k = arg2\n    for i in range(len(arg1)):\n        val = arg1[i]\n        if val not in values:\n            values[val] = [i]\n        else:\n            values[val].append(i)\n    sorted_values = sorted(values.keys())\n    for val in sorted_values:\n        if k == 0:\n            break\n        val_indexes = values[val]\n        for index in val_indexes:\n            indexes.append(index)\n            k -= 1\n            if k == 0:\n                break\n    return indexes']",1000,0.008395100012421608,0.009051096003968268,0.012003500014543533,N/A
p3_find_n_smallest_number,prompt_3,47,"['def funcImp(arg1, arg2):\n    indexes = []\n    values = {}\n    k = arg2\n    for i in range(len(arg1)):\n        val = arg1[i]\n        if val not in values:\n            values[val] = [i]\n        else:\n            values[val].append(i)\n    sorted_values = sorted(values.keys())\n    for val in sorted_values:\n        if k == 0:\n            break\n        val_indexes = values[val]\n        for index in val_indexes:\n            indexes.append(index)\n            k -= 1\n            if k == 0:\n                break\n    return indexes']",10000,0.13665980007499456,0.14181583700235934,0.16422369983047247,N/A
p3_find_n_smallest_number,prompt_3,47,"['def funcImp(arg1, arg2):\n    indexes = []\n    values = {}\n    k = arg2\n    for i in range(len(arg1)):\n        val = arg1[i]\n        if val not in values:\n            values[val] = [i]\n        else:\n            values[val].append(i)\n    sorted_values = sorted(values.keys())\n    for val in sorted_values:\n        if k == 0:\n            break\n        val_indexes = values[val]\n        for index in val_indexes:\n            indexes.append(index)\n            k -= 1\n            if k == 0:\n                break\n    return indexes']",100000,2.1947225998155773,2.2483131899987345,2.2837646999396384,N/A
p3_find_n_smallest_number,prompt_3,48,"['def funcImp(arg1, arg2):\n    arr = arg1[:]\n    res = []\n    arr.sort()\n    for i in range(arg2):\n        res.append(arg1.index(arr[i]))\n    return res']",1000,0.0032679999712854624,0.0034755169949494302,0.004150300053879619,N/A
p3_find_n_smallest_number,prompt_3,48,"['def funcImp(arg1, arg2):\n    arr = arg1[:]\n    res = []\n    arr.sort()\n    for i in range(arg2):\n        res.append(arg1.index(arr[i]))\n    return res']",10000,0.08256729994900525,0.08616692801238969,0.09259629994630814,N/A
p3_find_n_smallest_number,prompt_3,48,"['def funcImp(arg1, arg2):\n    arr = arg1[:]\n    res = []\n    arr.sort()\n    for i in range(arg2):\n        res.append(arg1.index(arr[i]))\n    return res']",100000,1.2065334001090378,1.240630915989168,1.2904531999956816,N/A
p3_find_n_smallest_number,prompt_3,49,"['def funcImp(arg1, arg2):\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indexes_k = [dict[x] for x in smallest_k]\n    return indexes_k']",1000,0.005393899977207184,0.005890775986481458,0.008237600093707442,N/A
p3_find_n_smallest_number,prompt_3,49,"['def funcImp(arg1, arg2):\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indexes_k = [dict[x] for x in smallest_k]\n    return indexes_k']",10000,0.10449019982479513,0.10878176698461176,0.11815860006026924,N/A
p3_find_n_smallest_number,prompt_3,49,"['def funcImp(arg1, arg2):\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indexes_k = [dict[x] for x in smallest_k]\n    return indexes_k']",100000,1.6168129001744092,1.6457480659964494,1.6790009001269937,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]']",1000,0.0036866001319140196,0.0039201460010372105,0.004268499789759517,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]']",10000,0.03525600000284612,0.03660828799474984,0.039458699990063906,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]']",100000,0.3578872000798583,0.3667309119994752,0.39462110004387796,N/A
p3_find_n_smallest_number,prompt_3,51,"['def funcImp(arg1, arg2):\n    items = [(value, index) for index, value in enumerate(arg1)]\n    items.sort()\n    result = [index for value, index in items[:arg2]]\n    return result']",1000,0.011735100066289306,0.012263495007064194,0.016798099968582392,N/A
p3_find_n_smallest_number,prompt_3,51,"['def funcImp(arg1, arg2):\n    items = [(value, index) for index, value in enumerate(arg1)]\n    items.sort()\n    result = [index for value, index in items[:arg2]]\n    return result']",10000,0.1778291999362409,0.1860207870020531,0.20336559996940196,N/A
p3_find_n_smallest_number,prompt_3,51,"['def funcImp(arg1, arg2):\n    items = [(value, index) for index, value in enumerate(arg1)]\n    items.sort()\n    result = [index for value, index in items[:arg2]]\n    return result']",100000,2.844600899843499,2.9175238649942914,3.1149256001226604,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k.sort()\n    indices = [t[0] for t in smallest_k]\n    return indices']",1000,0.004521999973803759,0.004781386987306177,0.005288599990308285,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k.sort()\n    indices = [t[0] for t in smallest_k]\n    return indices']",10000,0.04200350004248321,0.043671110006980596,0.04927819990552962,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k.sort()\n    indices = [t[0] for t in smallest_k]\n    return indices']",100000,0.4396427997853607,0.4519539399840869,0.4852871000766754,N/A
p3_find_n_smallest_number,prompt_3,53,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    values_indices = {}\n    for index, value in enumerate(arg1):\n        values_indices[index] = value\n    k_smallest_values = sorted(values_indices.values())[:k]\n    indices = []\n    for index, value in values_indices.items():\n        if value in k_smallest_values:\n            indices.append(index)\n    return indices']",1000,0.008619899861514568,0.009270416013896466,0.011545200133696198,N/A
p3_find_n_smallest_number,prompt_3,53,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    values_indices = {}\n    for index, value in enumerate(arg1):\n        values_indices[index] = value\n    k_smallest_values = sorted(values_indices.values())[:k]\n    indices = []\n    for index, value in values_indices.items():\n        if value in k_smallest_values:\n            indices.append(index)\n    return indices']",10000,0.13509260001592338,0.1387126490031369,0.15238870005123317,N/A
p3_find_n_smallest_number,prompt_3,53,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    values_indices = {}\n    for index, value in enumerate(arg1):\n        values_indices[index] = value\n    k_smallest_values = sorted(values_indices.values())[:k]\n    indices = []\n    for index, value in values_indices.items():\n        if value in k_smallest_values:\n            indices.append(index)\n    return indices']",100000,1.9042229999322444,1.9593568489863538,2.0182794998399913,N/A
p3_find_n_smallest_number,prompt_3,54,"['def funcImp(arg1, arg2):\n    lst = [(elem, i) for i, elem in enumerate(arg1)]\n    lst.sort()\n    indices = []\n    for i in range(arg2):\n        indices.append(lst[i][1])\n    indices.sort()\n    return indices']",1000,0.011445699958130717,0.01201776800211519,0.012725999811664224,N/A
p3_find_n_smallest_number,prompt_3,54,"['def funcImp(arg1, arg2):\n    lst = [(elem, i) for i, elem in enumerate(arg1)]\n    lst.sort()\n    indices = []\n    for i in range(arg2):\n        indices.append(lst[i][1])\n    indices.sort()\n    return indices']",10000,0.17823110008612275,0.1838644789950922,0.19328129990026355,N/A
p3_find_n_smallest_number,prompt_3,54,"['def funcImp(arg1, arg2):\n    lst = [(elem, i) for i, elem in enumerate(arg1)]\n    lst.sort()\n    indices = []\n    for i in range(arg2):\n        indices.append(lst[i][1])\n    indices.sort()\n    return indices']",100000,2.8210849000606686,2.8893058200133965,2.9998555001802742,N/A
p3_find_n_smallest_number,prompt_3,55,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, n in enumerate(arg1):\n        if n in index_dict:\n            index_dict[n].append(i)\n        else:\n            index_dict[n] = [i]\n    nums_sorted = sorted(set(arg1))\n    result = []\n    for i in range(arg2):\n        result.extend(index_dict[nums_sorted[i]])\n        if len(result) >= arg2:\n            break\n    return result']",1000,0.0062003000639379025,0.006502527995035052,0.00682280003093183,N/A
p3_find_n_smallest_number,prompt_3,55,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, n in enumerate(arg1):\n        if n in index_dict:\n            index_dict[n].append(i)\n        else:\n            index_dict[n] = [i]\n    nums_sorted = sorted(set(arg1))\n    result = []\n    for i in range(arg2):\n        result.extend(index_dict[nums_sorted[i]])\n        if len(result) >= arg2:\n            break\n    return result']",10000,0.07359540020115674,0.07649580800905824,0.08420079993084073,N/A
p3_find_n_smallest_number,prompt_3,55,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, n in enumerate(arg1):\n        if n in index_dict:\n            index_dict[n].append(i)\n        else:\n            index_dict[n] = [i]\n    nums_sorted = sorted(set(arg1))\n    result = []\n    for i in range(arg2):\n        result.extend(index_dict[nums_sorted[i]])\n        if len(result) >= arg2:\n            break\n    return result']",100000,1.5888557999860495,1.6246223429916427,1.6647844000253826,N/A
p3_find_n_smallest_number,prompt_3,56,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indexes']",1000,0.0072188000194728374,0.008024187991395593,0.02748990012332797,N/A
p3_find_n_smallest_number,prompt_3,56,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indexes']",10000,0.11120350006967783,0.11427348100813106,0.12536270008422434,N/A
p3_find_n_smallest_number,prompt_3,56,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indexes']",100000,1.621989700011909,1.654335416990798,1.7129339000675827,N/A
p3_find_n_smallest_number,prompt_3,57,"['def funcImp(arg1, arg2):\n    pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    pairs.sort(key=lambda x: x[0])\n    return [pair[1] for pair in pairs[:arg2]]']",1000,0.0092291000764817,0.009859130012337118,0.016049500089138746,N/A
p3_find_n_smallest_number,prompt_3,57,"['def funcImp(arg1, arg2):\n    pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    pairs.sort(key=lambda x: x[0])\n    return [pair[1] for pair in pairs[:arg2]]']",10000,0.15490620001219213,0.1599700199905783,0.16521749994717538,N/A
p3_find_n_smallest_number,prompt_3,57,"['def funcImp(arg1, arg2):\n    pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    pairs.sort(key=lambda x: x[0])\n    return [pair[1] for pair in pairs[:arg2]]']",100000,2.2294143000617623,2.2756424170127136,2.3282852000556886,N/A
p3_find_n_smallest_number,prompt_3,58,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    index_list = list(range(k))\n    min_index = index_list[arg1.index(min(arg1[:k]))]\n    for i in range(k, len(arg1)):\n        if arg1[i] < arg1[min_index]:\n            index_list[index_list.index(min_index)] = i\n            min_index = index_list[arg1.index(min(arg1[index_list]))]\n    return sorted(index_list)']",1000,0,0,0,"	 exception: list indices must be integers or slices, not list"
p3_find_n_smallest_number,prompt_3,58,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    index_list = list(range(k))\n    min_index = index_list[arg1.index(min(arg1[:k]))]\n    for i in range(k, len(arg1)):\n        if arg1[i] < arg1[min_index]:\n            index_list[index_list.index(min_index)] = i\n            min_index = index_list[arg1.index(min(arg1[index_list]))]\n    return sorted(index_list)']",10000,0,0,0,"	 exception: list indices must be integers or slices, not list"
p3_find_n_smallest_number,prompt_3,58,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    index_list = list(range(k))\n    min_index = index_list[arg1.index(min(arg1[:k]))]\n    for i in range(k, len(arg1)):\n        if arg1[i] < arg1[min_index]:\n            index_list[index_list.index(min_index)] = i\n            min_index = index_list[arg1.index(min(arg1[index_list]))]\n    return sorted(index_list)']",100000,0,0,0,"	 exception: list indices must be integers or slices, not list"
p3_find_n_smallest_number,prompt_3,59,"['def funcImp(arg1, k):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    smallest_k = sorted_arr[:k]\n    indices = [index_dict[val] for val in smallest_k]\n    return indices']",1000,0.00542379985563457,0.005790917000267654,0.006686100037768483,N/A
p3_find_n_smallest_number,prompt_3,59,"['def funcImp(arg1, k):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    smallest_k = sorted_arr[:k]\n    indices = [index_dict[val] for val in smallest_k]\n    return indices']",10000,0.1024471998680383,0.10727533500175923,0.12258540000766516,N/A
p3_find_n_smallest_number,prompt_3,59,"['def funcImp(arg1, k):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    smallest_k = sorted_arr[:k]\n    indices = [index_dict[val] for val in smallest_k]\n    return indices']",100000,1.6155063000041991,1.653332712983247,1.6914834999479353,N/A
p3_find_n_smallest_number,prompt_3,60,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    k_smallest = [(arg1[i], i) for i in range(arg2)]\n    k_smallest.sort(reverse=True)\n    for i in range(arg2, n):\n        if arg1[i] < k_smallest[0][0]:\n            k_smallest[0] = (arg1[i], i)\n            k_smallest.sort(reverse=True)\n    result = [t[1] for t in k_smallest]\n    return result']",1000,0.0024697999469935894,0.0026427410007454455,0.003683400107547641,N/A
p3_find_n_smallest_number,prompt_3,60,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    k_smallest = [(arg1[i], i) for i in range(arg2)]\n    k_smallest.sort(reverse=True)\n    for i in range(arg2, n):\n        if arg1[i] < k_smallest[0][0]:\n            k_smallest[0] = (arg1[i], i)\n            k_smallest.sort(reverse=True)\n    result = [t[1] for t in k_smallest]\n    return result']",10000,0.022557100048288703,0.023741103999782354,0.02650620019994676,N/A
p3_find_n_smallest_number,prompt_3,60,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    k_smallest = [(arg1[i], i) for i in range(arg2)]\n    k_smallest.sort(reverse=True)\n    for i in range(arg2, n):\n        if arg1[i] < k_smallest[0][0]:\n            k_smallest[0] = (arg1[i], i)\n            k_smallest.sort(reverse=True)\n    result = [t[1] for t in k_smallest]\n    return result']",100000,0.22862179996445775,0.23472846900345756,0.2562039999756962,N/A
p3_find_n_smallest_number,prompt_3,61,"['def funcImp(arg1, arg2):\n    indexed_list = [(elem, index) for index, elem in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest = sorted_list[:arg2]\n    indexes = sorted([index for _, index in k_smallest])\n    return indexes']",1000,0.009467200143262744,0.010105416991282255,0.012908000033348799,N/A
p3_find_n_smallest_number,prompt_3,61,"['def funcImp(arg1, arg2):\n    indexed_list = [(elem, index) for index, elem in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest = sorted_list[:arg2]\n    indexes = sorted([index for _, index in k_smallest])\n    return indexes']",10000,0.15532820019870996,0.16079589998815208,0.1692009000107646,N/A
p3_find_n_smallest_number,prompt_3,61,"['def funcImp(arg1, arg2):\n    indexed_list = [(elem, index) for index, elem in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest = sorted_list[:arg2]\n    indexes = sorted([index for _, index in k_smallest])\n    return indexes']",100000,2.295298100216314,2.3502479829965157,2.4087032000534236,N/A
p3_find_n_smallest_number,prompt_3,62,"['def funcImp(arg1, arg2):\n    index_list = range(len(arg1))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:arg2]']",1000,0,0,0,	 exception: 'range' object has no attribute 'sort'
p3_find_n_smallest_number,prompt_3,62,"['def funcImp(arg1, arg2):\n    index_list = range(len(arg1))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:arg2]']",10000,0,0,0,	 exception: 'range' object has no attribute 'sort'
p3_find_n_smallest_number,prompt_3,62,"['def funcImp(arg1, arg2):\n    index_list = range(len(arg1))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:arg2]']",100000,0,0,0,	 exception: 'range' object has no attribute 'sort'
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuple_list = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(tuple_list)\n    k_smallest = heapq.nsmallest(arg2, tuple_list)\n    result = sorted([(i, val) for val, i in k_smallest])\n    return [i for i, val in result]']",1000,0.007098600035533309,0.007533981008455157,0.009475199971348047,N/A
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuple_list = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(tuple_list)\n    k_smallest = heapq.nsmallest(arg2, tuple_list)\n    result = sorted([(i, val) for val, i in k_smallest])\n    return [i for i, val in result]']",10000,0.08702079998329282,0.0892498920042999,0.09326909994706511,N/A
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuple_list = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(tuple_list)\n    k_smallest = heapq.nsmallest(arg2, tuple_list)\n    result = sorted([(i, val) for val, i in k_smallest])\n    return [i for i, val in result]']",100000,1.074133099988103,1.116884470982477,1.1745916998479515,N/A
p3_find_n_smallest_number,prompt_3,64,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        smallest_num_index = arg1.index(sorted_list[i])\n        indexes.append(smallest_num_index)\n        arg1[smallest_num_index] = float('inf')\n    return indexes""]",1000,0.00034159980714321136,0.0005367440078407526,0.009827099973335862,N/A
p3_find_n_smallest_number,prompt_3,64,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        smallest_num_index = arg1.index(sorted_list[i])\n        indexes.append(smallest_num_index)\n        arg1[smallest_num_index] = float('inf')\n    return indexes""]",10000,0.0030818998347967863,0.02462030400754884,0.1369711000006646,N/A
p3_find_n_smallest_number,prompt_3,64,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        smallest_num_index = arg1.index(sorted_list[i])\n        indexes.append(smallest_num_index)\n        arg1[smallest_num_index] = float('inf')\n    return indexes""]",100000,1.5812060001771897,1.7447702899877913,1.9009094999637455,N/A
p3_find_n_smallest_number,prompt_3,65,"['def funcImp(arg1, arg2):\n    sorted_lst = sorted(arg1)\n    smallest_nums = sorted_lst[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.0032053999602794647,0.0034198509948328137,0.004120600176975131,N/A
p3_find_n_smallest_number,prompt_3,65,"['def funcImp(arg1, arg2):\n    sorted_lst = sorted(arg1)\n    smallest_nums = sorted_lst[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.08266249997541308,0.08535311800893396,0.089464700082317,N/A
p3_find_n_smallest_number,prompt_3,65,"['def funcImp(arg1, arg2):\n    sorted_lst = sorted(arg1)\n    smallest_nums = sorted_lst[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,1.1882833999115974,1.2231088669854215,1.2775586999487132,N/A
p3_find_n_smallest_number,prompt_3,66,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    k_smallest_values = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return [x[0] for x in k_smallest_values]']",1000,0.00983049999922514,0.010347141996026038,0.012392900185659528,N/A
p3_find_n_smallest_number,prompt_3,66,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    k_smallest_values = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return [x[0] for x in k_smallest_values]']",10000,0.15786330006085336,0.16428612399613485,0.17038899986073375,N/A
p3_find_n_smallest_number,prompt_3,66,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    k_smallest_values = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return [x[0] for x in k_smallest_values]']",100000,2.4940853000152856,2.5635982850007712,2.7018893000204116,N/A
p3_find_n_smallest_number,prompt_3,67,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    num_dict = {}\n    for i in range(n):\n        num_dict[i] = arg1[i]\n    sorted_nums = sorted(num_dict.values())\n    result = []\n    for i in range(arg2):\n        val = sorted_nums[i]\n        for key, value in num_dict.items():\n            if value == val:\n                result.append(key)\n                del num_dict[key]\n                break\n    return result']",1000,0.007732299854978919,0.00799389100400731,0.008837299887090921,N/A
p3_find_n_smallest_number,prompt_3,67,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    num_dict = {}\n    for i in range(n):\n        num_dict[i] = arg1[i]\n    sorted_nums = sorted(num_dict.values())\n    result = []\n    for i in range(arg2):\n        val = sorted_nums[i]\n        for key, value in num_dict.items():\n            if value == val:\n                result.append(key)\n                del num_dict[key]\n                break\n    return result']",10000,0.13763330015353858,0.1397325410065241,0.1502926000393927,N/A
p3_find_n_smallest_number,prompt_3,67,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    num_dict = {}\n    for i in range(n):\n        num_dict[i] = arg1[i]\n    sorted_nums = sorted(num_dict.values())\n    result = []\n    for i in range(arg2):\n        val = sorted_nums[i]\n        for key, value in num_dict.items():\n            if value == val:\n                result.append(key)\n                del num_dict[key]\n                break\n    return result']",100000,2.0903655998408794,2.128158531005029,2.1698795000556856,N/A
p3_find_n_smallest_number,prompt_3,68,"['def funcImp(arg1, arg2):\n    values_dict = {}\n    for i, val in enumerate(arg1):\n        if val not in values_dict:\n            values_dict[val] = [i]\n        else:\n            values_dict[val].append(i)\n    sorted_list = sorted(arg1)\n    k_vals = sorted_list[:arg2]\n    result = []\n    for val in k_vals:\n        result.extend(values_dict[val][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.008342900080606341,0.008870310008060187,0.01142040011473,N/A
p3_find_n_smallest_number,prompt_3,68,"['def funcImp(arg1, arg2):\n    values_dict = {}\n    for i, val in enumerate(arg1):\n        if val not in values_dict:\n            values_dict[val] = [i]\n        else:\n            values_dict[val].append(i)\n    sorted_list = sorted(arg1)\n    k_vals = sorted_list[:arg2]\n    result = []\n    for val in k_vals:\n        result.extend(values_dict[val][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.13703080010600388,0.13958102001575753,0.14769300003536046,N/A
p3_find_n_smallest_number,prompt_3,68,"['def funcImp(arg1, arg2):\n    values_dict = {}\n    for i, val in enumerate(arg1):\n        if val not in values_dict:\n            values_dict[val] = [i]\n        else:\n            values_dict[val].append(i)\n    sorted_list = sorted(arg1)\n    k_vals = sorted_list[:arg2]\n    result = []\n    for val in k_vals:\n        result.extend(values_dict[val][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,2.197409800020978,2.2239591130055487,2.3412615000270307,N/A
p3_find_n_smallest_number,prompt_3,69,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    d = {value: index for index, value in enumerate(arg1)}\n    sorted_values = sorted(d.keys())[:k]\n    for value in sorted_values:\n        smallest_indexes.append(d[value])\n    return smallest_indexes']",1000,0.0059559999499469995,0.00622496799333021,0.009373500011861324,N/A
p3_find_n_smallest_number,prompt_3,69,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    d = {value: index for index, value in enumerate(arg1)}\n    sorted_values = sorted(d.keys())[:k]\n    for value in sorted_values:\n        smallest_indexes.append(d[value])\n    return smallest_indexes']",10000,0.10895390016958117,0.11109341401373968,0.12455360009334981,N/A
p3_find_n_smallest_number,prompt_3,69,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    d = {value: index for index, value in enumerate(arg1)}\n    sorted_values = sorted(d.keys())[:k]\n    for value in sorted_values:\n        smallest_indexes.append(d[value])\n    return smallest_indexes']",100000,1.648815899854526,1.7315355920023285,1.8052978999912739,N/A
p3_find_n_smallest_number,prompt_3,70,"['def funcImp(arg1, arg2):\n    idx_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in idx_dict:\n            idx_dict[num] = [i]\n        else:\n            idx_dict[num].append(i)\n    sorted_list = sorted(list(set(arg1)))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(idx_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.006304100155830383,0.0066801210073754195,0.010349299991503358,N/A
p3_find_n_smallest_number,prompt_3,70,"['def funcImp(arg1, arg2):\n    idx_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in idx_dict:\n            idx_dict[num] = [i]\n        else:\n            idx_dict[num].append(i)\n    sorted_list = sorted(list(set(arg1)))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(idx_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.07554970006458461,0.07824250399833545,0.08034239988774061,N/A
p3_find_n_smallest_number,prompt_3,70,"['def funcImp(arg1, arg2):\n    idx_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in idx_dict:\n            idx_dict[num] = [i]\n        else:\n            idx_dict[num].append(i)\n    sorted_list = sorted(list(set(arg1)))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(idx_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,1.6777369999326766,1.7401610610238276,1.787973599974066,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            largest = heap[0]\n            if -num > largest[0]:\n                heapq.heapreplace(heap, (-num, i))\n    indexes = [heapq.heappop(heap)[1] for i in range(arg2)]\n    return sorted(indexes)']",1000,0.004681300139054656,0.004794764013495296,0.005644399905577302,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            largest = heap[0]\n            if -num > largest[0]:\n                heapq.heapreplace(heap, (-num, i))\n    indexes = [heapq.heappop(heap)[1] for i in range(arg2)]\n    return sorted(indexes)']",10000,0.045059199910610914,0.04595177300041541,0.048019299982115626,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            largest = heap[0]\n            if -num > largest[0]:\n                heapq.heapreplace(heap, (-num, i))\n    indexes = [heapq.heappop(heap)[1] for i in range(arg2)]\n    return sorted(indexes)']",100000,0.4498203999828547,0.4551863459963352,0.4762236999813467,N/A
p3_find_n_smallest_number,prompt_3,72,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indexes = [i for i, num in enumerate(arg1) if num in smallest_numbers]\n    return indexes']",1000,0.006049100076779723,0.006354150001425296,0.007992199854925275,N/A
p3_find_n_smallest_number,prompt_3,72,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indexes = [i for i, num in enumerate(arg1) if num in smallest_numbers]\n    return indexes']",10000,0.10874549997970462,0.11099776901304721,0.11335879983380437,N/A
p3_find_n_smallest_number,prompt_3,72,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indexes = [i for i, num in enumerate(arg1) if num in smallest_numbers]\n    return indexes']",100000,1.411662200000137,1.4334850489906967,1.472463000100106,N/A
p3_find_n_smallest_number,prompt_3,73,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_i = arg1.index(min(arg1))\n        indexes.append(min_i)\n        arg1[min_i] = float('inf')\n    return indexes""]",1000,0.0021609999239444733,0.0023435399937443437,0.0077640998642891645,N/A
p3_find_n_smallest_number,prompt_3,73,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_i = arg1.index(min(arg1))\n        indexes.append(min_i)\n        arg1[min_i] = float('inf')\n    return indexes""]",10000,0.02273990004323423,0.03314657700946554,0.08875500014983118,N/A
p3_find_n_smallest_number,prompt_3,73,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_i = arg1.index(min(arg1))\n        indexes.append(min_i)\n        arg1[min_i] = float('inf')\n    return indexes""]",100000,0.3302217999007553,0.7415654959809035,1.0880541000515223,N/A
p3_find_n_smallest_number,prompt_3,74,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",1000,0.002236400032415986,0.002366095988545567,0.007760999957099557,N/A
p3_find_n_smallest_number,prompt_3,74,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",10000,0.02213339996524155,0.0332294189883396,0.09221490006893873,N/A
p3_find_n_smallest_number,prompt_3,74,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",100000,0.336259099887684,0.7440620060032234,1.117359499912709,N/A
p3_find_n_smallest_number,prompt_3,75,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, start, end, k):\n        while start <= end:\n            pivotIndex = partition(arr, start, end)\n            if pivotIndex == k:\n                return arr[:k]\n            elif pivotIndex < k:\n                start = pivotIndex + 1\n            else:\n                end = pivotIndex - 1\n        return arr[:k]\n\n    def partition(arr, start, end):\n        i = start - 1\n        pivot = arr[end]\n        for j in range(start, end):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        return i + 1\n    k = arg2\n    smallest = quickselect(arg1, 0, len(arg1) - 1, k)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indexes.append(i)\n    return indexes']",1000,2.0357964001595974,2.150738621989731,2.1969556000549346,N/A
p3_find_n_smallest_number,prompt_3,75,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, start, end, k):\n        while start <= end:\n            pivotIndex = partition(arr, start, end)\n            if pivotIndex == k:\n                return arr[:k]\n            elif pivotIndex < k:\n                start = pivotIndex + 1\n            else:\n                end = pivotIndex - 1\n        return arr[:k]\n\n    def partition(arr, start, end):\n        i = start - 1\n        pivot = arr[end]\n        for j in range(start, end):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        return i + 1\n    k = arg2\n    smallest = quickselect(arg1, 0, len(arg1) - 1, k)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indexes.append(i)\n    return indexes']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,75,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, start, end, k):\n        while start <= end:\n            pivotIndex = partition(arr, start, end)\n            if pivotIndex == k:\n                return arr[:k]\n            elif pivotIndex < k:\n                start = pivotIndex + 1\n            else:\n                end = pivotIndex - 1\n        return arr[:k]\n\n    def partition(arr, start, end):\n        i = start - 1\n        pivot = arr[end]\n        for j in range(start, end):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        return i + 1\n    k = arg2\n    smallest = quickselect(arg1, 0, len(arg1) - 1, k)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indexes.append(i)\n    return indexes']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,76,"['def funcImp(arg1, arg2):\n    values_with_index = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_with_index = sorted(values_with_index)\n    k_smallest_indexes = [tup[1] for tup in sorted_values_with_index[:arg2]]\n    return k_smallest_indexes']",1000,0.011584100080654025,0.012163811004720628,0.013883800012990832,N/A
p3_find_n_smallest_number,prompt_3,76,"['def funcImp(arg1, arg2):\n    values_with_index = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_with_index = sorted(values_with_index)\n    k_smallest_indexes = [tup[1] for tup in sorted_values_with_index[:arg2]]\n    return k_smallest_indexes']",10000,0.17658839980140328,0.18315119999460877,0.20326659991405904,N/A
p3_find_n_smallest_number,prompt_3,76,"['def funcImp(arg1, arg2):\n    values_with_index = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_with_index = sorted(values_with_index)\n    k_smallest_indexes = [tup[1] for tup in sorted_values_with_index[:arg2]]\n    return k_smallest_indexes']",100000,2.864326999988407,2.946567848997656,3.0765464000869542,N/A
p3_find_n_smallest_number,prompt_3,77,"['def funcImp(arg1, arg2):\n    smallest_nums = []\n    if arg2 <= len(arg1):\n        indexed_list = list(enumerate(arg1))\n        sorted_list = sorted(indexed_list, key=lambda x: x[1])\n        for i in range(arg2):\n            smallest_nums.append(sorted_list[i][0])\n    return smallest_nums']",1000,0.008302999893203378,0.008728162993211299,0.010015900013968349,N/A
p3_find_n_smallest_number,prompt_3,77,"['def funcImp(arg1, arg2):\n    smallest_nums = []\n    if arg2 <= len(arg1):\n        indexed_list = list(enumerate(arg1))\n        sorted_list = sorted(indexed_list, key=lambda x: x[1])\n        for i in range(arg2):\n            smallest_nums.append(sorted_list[i][0])\n    return smallest_nums']",10000,0.13885330012999475,0.14327003701357172,0.14884350006468594,N/A
p3_find_n_smallest_number,prompt_3,77,"['def funcImp(arg1, arg2):\n    smallest_nums = []\n    if arg2 <= len(arg1):\n        indexed_list = list(enumerate(arg1))\n        sorted_list = sorted(indexed_list, key=lambda x: x[1])\n        for i in range(arg2):\n            smallest_nums.append(sorted_list[i][0])\n    return smallest_nums']",100000,2.1381331998854876,2.1963256969838403,2.32814470003359,N/A
p3_find_n_smallest_number,prompt_3,78,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, v in enumerate(arg1):\n        dict_index[i] = v\n    sorted_dict = sorted(dict_index.items(), key=lambda x: x[1])\n    smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return smallest_indexes']",1000,0.010180699871852994,0.010821543000638485,0.01219830010086298,N/A
p3_find_n_smallest_number,prompt_3,78,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, v in enumerate(arg1):\n        dict_index[i] = v\n    sorted_dict = sorted(dict_index.items(), key=lambda x: x[1])\n    smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return smallest_indexes']",10000,0.1576546998694539,0.16864771999418735,0.17616370017640293,N/A
p3_find_n_smallest_number,prompt_3,78,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, v in enumerate(arg1):\n        dict_index[i] = v\n    sorted_dict = sorted(dict_index.items(), key=lambda x: x[1])\n    smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return smallest_indexes']",100000,2.6255062001291662,2.682238597006071,2.838727899827063,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",1000,0.004503700183704495,0.004734116985928267,0.005517899990081787,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",10000,0.04171010013669729,0.04296817800262943,0.04929370013996959,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",100000,0.43026020005345345,0.44078713699709626,0.45643340004608035,N/A
p3_find_n_smallest_number,prompt_3,80,"['def funcImp(arg1, arg2):\n    lst = [(val, i) for i, val in enumerate(arg1)]\n    lst.sort()\n    indexes = [t[1] for t in lst[:arg2]]\n    return indexes']",1000,0.011597299948334694,0.01216540401102975,0.015116499969735742,N/A
p3_find_n_smallest_number,prompt_3,80,"['def funcImp(arg1, arg2):\n    lst = [(val, i) for i, val in enumerate(arg1)]\n    lst.sort()\n    indexes = [t[1] for t in lst[:arg2]]\n    return indexes']",10000,0.17386490013450384,0.17875498200766743,0.1881295999046415,N/A
p3_find_n_smallest_number,prompt_3,80,"['def funcImp(arg1, arg2):\n    lst = [(val, i) for i, val in enumerate(arg1)]\n    lst.sort()\n    indexes = [t[1] for t in lst[:arg2]]\n    return indexes']",100000,2.8078857001382858,2.8935449039982633,3.123003900051117,N/A
p3_find_n_smallest_number,prompt_3,81,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    index_dict = {}\n    for i in range(n):\n        index_dict.setdefault(arg1[i], []).append(i)\n    sorted_arr = sorted(arg1)\n    indexes = []\n    for i in range(k):\n        indexes.extend(index_dict[sorted_arr[i]])\n    return sorted(indexes)']",1000,0.008298200089484453,0.008834741017781199,0.011228500166907907,N/A
p3_find_n_smallest_number,prompt_3,81,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    index_dict = {}\n    for i in range(n):\n        index_dict.setdefault(arg1[i], []).append(i)\n    sorted_arr = sorted(arg1)\n    indexes = []\n    for i in range(k):\n        indexes.extend(index_dict[sorted_arr[i]])\n    return sorted(indexes)']",10000,0.1323490000795573,0.1372398019954562,0.14783699996769428,N/A
p3_find_n_smallest_number,prompt_3,81,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    index_dict = {}\n    for i in range(n):\n        index_dict.setdefault(arg1[i], []).append(i)\n    sorted_arr = sorted(arg1)\n    indexes = []\n    for i in range(k):\n        indexes.extend(index_dict[sorted_arr[i]])\n    return sorted(indexes)']",100000,2.240369899896905,2.277279501990415,2.3395181000232697,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    result = [item[1] for item in sorted(min_heap, key=lambda x: x[1])]\n    return result']",1000,0.0023231999948620796,0.0024107930017635225,0.0026831000577658415,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    result = [item[1] for item in sorted(min_heap, key=lambda x: x[1])]\n    return result']",10000,0.02260309993289411,0.02365342397708446,0.024913499830290675,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    result = [item[1] for item in sorted(min_heap, key=lambda x: x[1])]\n    return result']",100000,0.2267108999658376,0.23229011499090121,0.24728069989942014,N/A
p3_find_n_smallest_number,prompt_3,83,"['def funcImp(arg1, arg2):\n    dict = {}\n    for i in range(len(arg1)):\n        dict.setdefault(arg1[i], []).append(i)\n    k_smallest = sorted(dict.keys())[:arg2]\n    k_smallest_indexes = [i for sublist in [dict[k] for k in k_smallest] for i in sublist]\n    return k_smallest_indexes']",1000,0.008297100197523832,0.00884641200536862,0.009545900160446763,N/A
p3_find_n_smallest_number,prompt_3,83,"['def funcImp(arg1, arg2):\n    dict = {}\n    for i in range(len(arg1)):\n        dict.setdefault(arg1[i], []).append(i)\n    k_smallest = sorted(dict.keys())[:arg2]\n    k_smallest_indexes = [i for sublist in [dict[k] for k in k_smallest] for i in sublist]\n    return k_smallest_indexes']",10000,0.13461180008016527,0.13879397600190713,0.15276250010356307,N/A
p3_find_n_smallest_number,prompt_3,83,"['def funcImp(arg1, arg2):\n    dict = {}\n    for i in range(len(arg1)):\n        dict.setdefault(arg1[i], []).append(i)\n    k_smallest = sorted(dict.keys())[:arg2]\n    k_smallest_indexes = [i for sublist in [dict[k] for k in k_smallest] for i in sublist]\n    return k_smallest_indexes']",100000,2.2143468998838216,2.268230472984724,2.3847958999685943,N/A
p3_find_n_smallest_number,prompt_3,84,"['def funcImp(arg1, arg2):\n    index_dict = {val: [] for val in set(arg1)}\n    for i, val in enumerate(arg1):\n        index_dict[val].append(i)\n    sorted_unique = sorted(set(arg1))\n    k_smallest = []\n    k_smallest_indexes = []\n    for val in sorted_unique:\n        k_smallest += index_dict[val]\n        k_smallest_indexes += index_dict[val]\n        if len(k_smallest) >= arg2:\n            break\n    k_smallest_indexes = sorted(k_smallest_indexes)[:arg2]\n    return k_smallest_indexes']",1000,0.007616400020197034,0.008009329992346466,0.009049700107425451,N/A
p3_find_n_smallest_number,prompt_3,84,"['def funcImp(arg1, arg2):\n    index_dict = {val: [] for val in set(arg1)}\n    for i, val in enumerate(arg1):\n        index_dict[val].append(i)\n    sorted_unique = sorted(set(arg1))\n    k_smallest = []\n    k_smallest_indexes = []\n    for val in sorted_unique:\n        k_smallest += index_dict[val]\n        k_smallest_indexes += index_dict[val]\n        if len(k_smallest) >= arg2:\n            break\n    k_smallest_indexes = sorted(k_smallest_indexes)[:arg2]\n    return k_smallest_indexes']",10000,0.10473729996010661,0.115154599994421,0.12703750003129244,N/A
p3_find_n_smallest_number,prompt_3,84,"['def funcImp(arg1, arg2):\n    index_dict = {val: [] for val in set(arg1)}\n    for i, val in enumerate(arg1):\n        index_dict[val].append(i)\n    sorted_unique = sorted(set(arg1))\n    k_smallest = []\n    k_smallest_indexes = []\n    for val in sorted_unique:\n        k_smallest += index_dict[val]\n        k_smallest_indexes += index_dict[val]\n        if len(k_smallest) >= arg2:\n            break\n    k_smallest_indexes = sorted(k_smallest_indexes)[:arg2]\n    return k_smallest_indexes']",100000,2.847964100074023,3.0249233310017734,3.1847717999480665,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",1000,0.0022634000051766634,0.0024095019861124457,0.00253499997779727,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",10000,0.022561500081792474,0.02344120799563825,0.027615000028163195,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",100000,0.22792560001835227,0.23323030900210143,0.24418439995497465,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [num_idx[1] for num_idx in heap]\n    return sorted(res)']",1000,0.0037853000685572624,0.004024484006222338,0.005876500159502029,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [num_idx[1] for num_idx in heap]\n    return sorted(res)']",10000,0.03590260003693402,0.03726017098873854,0.04379540006630123,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [num_idx[1] for num_idx in heap]\n    return sorted(res)']",100000,0.3566140001639724,0.3667653419869021,0.39268100005574524,N/A
p3_find_n_smallest_number,prompt_3,87,"['import random\n\ndef quickselect(lst, k):\n    if len(lst) == 1:\n        return lst[0]\n    pivot = random.choice(lst)\n    lows = [el for el in lst if el < pivot]\n    highs = [el for el in lst if el > pivot]\n    pivots = [el for el in lst if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        k_smallest = quickselect(arg1, i)\n        index = arg1.index(k_smallest)\n        indexes.append(index)\n    return indexes']",1000,0.04572600009851158,0.04990712599828839,0.06311269989237189,N/A
p3_find_n_smallest_number,prompt_3,87,"['import random\n\ndef quickselect(lst, k):\n    if len(lst) == 1:\n        return lst[0]\n    pivot = random.choice(lst)\n    lows = [el for el in lst if el < pivot]\n    highs = [el for el in lst if el > pivot]\n    pivots = [el for el in lst if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        k_smallest = quickselect(arg1, i)\n        index = arg1.index(k_smallest)\n        indexes.append(index)\n    return indexes']",10000,0.4160076999105513,0.4419291199953295,0.46915889997035265,N/A
p3_find_n_smallest_number,prompt_3,87,"['import random\n\ndef quickselect(lst, k):\n    if len(lst) == 1:\n        return lst[0]\n    pivot = random.choice(lst)\n    lows = [el for el in lst if el < pivot]\n    highs = [el for el in lst if el > pivot]\n    pivots = [el for el in lst if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        k_smallest = quickselect(arg1, i)\n        index = arg1.index(k_smallest)\n        indexes.append(index)\n    return indexes']",100000,4.342485999921337,4.559281956027262,4.838350800098851,N/A
p3_find_n_smallest_number,prompt_3,88,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[i] = val\n    sorted_d = sorted(d.items(), key=lambda x: x[1])\n    return [sorted_d[i][0] for i in range(arg2)]']",1000,0.01008519995957613,0.010620444985106588,0.012523700017482042,N/A
p3_find_n_smallest_number,prompt_3,88,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[i] = val\n    sorted_d = sorted(d.items(), key=lambda x: x[1])\n    return [sorted_d[i][0] for i in range(arg2)]']",10000,0.15774190006777644,0.16701582900248468,0.17395070008933544,N/A
p3_find_n_smallest_number,prompt_3,88,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[i] = val\n    sorted_d = sorted(d.items(), key=lambda x: x[1])\n    return [sorted_d[i][0] for i in range(arg2)]']",100000,2.6154978999402374,2.7090295729925855,3.0196343001443893,N/A
p3_find_n_smallest_number,prompt_3,89,"[""def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot_value:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n\n    def quickselect(arr, left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k_smallest == pivot_index:\n            return k_smallest\n        elif k_smallest < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k_smallest)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k_smallest)\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Error: k is larger than the length of the array.'\n    indices = []\n    k_smallest = k - 1\n    for i in range(k):\n        index = quickselect(arg1, 0, n - 1, k_smallest)\n        indices.append(index)\n        k_smallest += 1\n    return indices""]",1000,0.029194600181654096,0.030003519994206727,0.032327899942174554,N/A
p3_find_n_smallest_number,prompt_3,89,"[""def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot_value:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n\n    def quickselect(arr, left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k_smallest == pivot_index:\n            return k_smallest\n        elif k_smallest < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k_smallest)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k_smallest)\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Error: k is larger than the length of the array.'\n    indices = []\n    k_smallest = k - 1\n    for i in range(k):\n        index = quickselect(arg1, 0, n - 1, k_smallest)\n        indices.append(index)\n        k_smallest += 1\n    return indices""]",10000,0.30158869992010295,0.30756202100077645,0.3461051997728646,N/A
p3_find_n_smallest_number,prompt_3,89,"[""def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot_value:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n\n    def quickselect(arr, left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k_smallest == pivot_index:\n            return k_smallest\n        elif k_smallest < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k_smallest)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k_smallest)\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Error: k is larger than the length of the array.'\n    indices = []\n    k_smallest = k - 1\n    for i in range(k):\n        index = quickselect(arg1, 0, n - 1, k_smallest)\n        indices.append(index)\n        k_smallest += 1\n    return indices""]",100000,3.455724900122732,3.5534295420069246,3.6233699999284,N/A
p3_find_n_smallest_number,prompt_3,90,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        min_index = None\n        for j in range(len(arg1)):\n            if j not in smallest_indexes:\n                if min_index == None or arg1[j] < arg1[min_index]:\n                    min_index = j\n        smallest_indexes.append(min_index)\n    return smallest_indexes']",1000,0.019023299915716052,0.01979617799865082,0.02277949987910688,N/A
p3_find_n_smallest_number,prompt_3,90,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        min_index = None\n        for j in range(len(arg1)):\n            if j not in smallest_indexes:\n                if min_index == None or arg1[j] < arg1[min_index]:\n                    min_index = j\n        smallest_indexes.append(min_index)\n    return smallest_indexes']",10000,0.1957662000786513,0.19986164700239897,0.21139139984734356,N/A
p3_find_n_smallest_number,prompt_3,90,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        min_index = None\n        for j in range(len(arg1)):\n            if j not in smallest_indexes:\n                if min_index == None or arg1[j] < arg1[min_index]:\n                    min_index = j\n        smallest_indexes.append(min_index)\n    return smallest_indexes']",100000,1.9904874998610467,2.0192048480012454,2.0510219000279903,N/A
p3_find_n_smallest_number,prompt_3,91,"['def funcImp(arg1, k):\n    heap = [(arg1[i], i) for i in range(k)]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_3,91,"['def funcImp(arg1, k):\n    heap = [(arg1[i], i) for i in range(k)]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_3,91,"['def funcImp(arg1, k):\n    heap = [(arg1[i], i) for i in range(k)]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_3,92,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, number in enumerate(arg1):\n        index_dict[i] = number\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    return [sorted_dict[i][0] for i in range(arg2)]']",1000,0.010371800046414137,0.010832057010848075,0.01163950003683567,N/A
p3_find_n_smallest_number,prompt_3,92,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, number in enumerate(arg1):\n        index_dict[i] = number\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    return [sorted_dict[i][0] for i in range(arg2)]']",10000,0.15878980001434684,0.17053629099857062,0.18019980005919933,N/A
p3_find_n_smallest_number,prompt_3,92,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, number in enumerate(arg1):\n        index_dict[i] = number\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    return [sorted_dict[i][0] for i in range(arg2)]']",100000,2.621303799794987,2.712253242987208,2.7843439001590014,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [x[1] for x in heap]\n    return result']",1000,0.003390700090676546,0.003660322013311088,0.005997099913656712,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [x[1] for x in heap]\n    return result']",10000,0.03235340001992881,0.03410897099878639,0.03612589999102056,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [x[1] for x in heap]\n    return result']",100000,0.32809749990701675,0.33386399999959393,0.3523589000105858,N/A
p3_find_n_smallest_number,prompt_3,94,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]']",1000,0.007134600076824427,0.007471152008511126,0.008670599898323417,N/A
p3_find_n_smallest_number,prompt_3,94,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]']",10000,0.11110949981957674,0.11402774000074714,0.12608830002136528,N/A
p3_find_n_smallest_number,prompt_3,94,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]']",100000,1.6054358000401407,1.6409401719970629,1.697619799990207,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indices']",1000,0.004536000080406666,0.004812763996887952,0.006370699964463711,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indices']",10000,0.043596699833869934,0.045311227003112436,0.049639200093224645,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indices']",100000,0.4499443999957293,0.45817657398991285,0.4728291998617351,N/A
p3_find_n_smallest_number,prompt_3,96,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers arg1 and an integer arg2 as input parameters.\n    The function returns the indexes of the k smallest numbers in the list.\n\n    :param arg1: list of integers, unsorted\n    :param arg2: integer, number of smallest indexes to return\n    :return: list of integers, indexes of the k smallest numbers in the list\n    """"""\n    dict_num_idx = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    k_smallest_idx = [dict_num_idx[num] for num in k_smallest]\n    return k_smallest_idx']",1000,0.005782500142231584,0.0060490820021368566,0.007913999957963824,N/A
p3_find_n_smallest_number,prompt_3,96,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers arg1 and an integer arg2 as input parameters.\n    The function returns the indexes of the k smallest numbers in the list.\n\n    :param arg1: list of integers, unsorted\n    :param arg2: integer, number of smallest indexes to return\n    :return: list of integers, indexes of the k smallest numbers in the list\n    """"""\n    dict_num_idx = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    k_smallest_idx = [dict_num_idx[num] for num in k_smallest]\n    return k_smallest_idx']",10000,0.10801970004104078,0.11087502201786265,0.14589620009064674,N/A
p3_find_n_smallest_number,prompt_3,96,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers arg1 and an integer arg2 as input parameters.\n    The function returns the indexes of the k smallest numbers in the list.\n\n    :param arg1: list of integers, unsorted\n    :param arg2: integer, number of smallest indexes to return\n    :return: list of integers, indexes of the k smallest numbers in the list\n    """"""\n    dict_num_idx = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    k_smallest_idx = [dict_num_idx[num] for num in k_smallest]\n    return k_smallest_idx']",100000,1.6459798000287265,1.6772312720073388,1.7187346999999136,N/A
p3_find_n_smallest_number,prompt_3,97,"['def funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",1000,0.011631399858742952,0.01225204200251028,0.015798999927937984,N/A
p3_find_n_smallest_number,prompt_3,97,"['def funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",10000,0.1804001999553293,0.1839510199893266,0.1911217998713255,N/A
p3_find_n_smallest_number,prompt_3,97,"['def funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",100000,2.8427247998770326,2.9122140690055676,3.02859769994393,N/A
p3_find_n_smallest_number,prompt_3,98,"['def funcImp(arg1, arg2):\n    element_dict = {}\n    for i, elem in enumerate(arg1):\n        element_dict[elem] = i\n    sorted_elements = sorted(element_dict.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_elements[i][1])\n    return result']",1000,0.012802199926227331,0.013383474012371152,0.016690100077539682,N/A
p3_find_n_smallest_number,prompt_3,98,"['def funcImp(arg1, arg2):\n    element_dict = {}\n    for i, elem in enumerate(arg1):\n        element_dict[elem] = i\n    sorted_elements = sorted(element_dict.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_elements[i][1])\n    return result']",10000,0.19494469999335706,0.20186823301017284,0.2115641999989748,N/A
p3_find_n_smallest_number,prompt_3,98,"['def funcImp(arg1, arg2):\n    element_dict = {}\n    for i, elem in enumerate(arg1):\n        element_dict[elem] = i\n    sorted_elements = sorted(element_dict.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_elements[i][1])\n    return result']",100000,3.3822310001123697,3.470591660994105,3.7289410999510437,N/A
p3_find_n_smallest_number,prompt_3,99,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    n = len(arr)\n    if arg2 >= n:\n        return [i for i in range(n)]\n    indexes = [i for i in range(arg2)]\n    for i in range(arg2):\n        for j in range(i + 1, arg2):\n            if arr[indexes[i]] < arr[indexes[j]]:\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n    for i in range(arg2, n):\n        max_index = 0\n        for j in range(1, arg2):\n            if arr[indexes[max_index]] < arr[indexes[j]]:\n                max_index = j\n        if arr[i] < arr[indexes[max_index]]:\n            indexes[max_index] = i\n    return sorted(indexes)']",1000,0.018741799984127283,0.019353567988146095,0.02868560003116727,N/A
p3_find_n_smallest_number,prompt_3,99,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    n = len(arr)\n    if arg2 >= n:\n        return [i for i in range(n)]\n    indexes = [i for i in range(arg2)]\n    for i in range(arg2):\n        for j in range(i + 1, arg2):\n            if arr[indexes[i]] < arr[indexes[j]]:\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n    for i in range(arg2, n):\n        max_index = 0\n        for j in range(1, arg2):\n            if arr[indexes[max_index]] < arr[indexes[j]]:\n                max_index = j\n        if arr[i] < arr[indexes[max_index]]:\n            indexes[max_index] = i\n    return sorted(indexes)']",10000,0.18189100013114512,0.1843792370078154,0.19270229991525412,N/A
p3_find_n_smallest_number,prompt_3,99,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    n = len(arr)\n    if arg2 >= n:\n        return [i for i in range(n)]\n    indexes = [i for i in range(arg2)]\n    for i in range(arg2):\n        for j in range(i + 1, arg2):\n            if arr[indexes[i]] < arr[indexes[j]]:\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n    for i in range(arg2, n):\n        max_index = 0\n        for j in range(1, arg2):\n            if arr[indexes[max_index]] < arr[indexes[j]]:\n                max_index = j\n        if arr[i] < arr[indexes[max_index]]:\n            indexes[max_index] = i\n    return sorted(indexes)']",100000,1.8771272001322359,1.8978606509952807,1.9324892000295222,N/A
p3_find_n_smallest_number,prompt_3,100,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_ = {i: arg1[i] for i in range(n)}\n    sorted_dict = sorted(dict_.items(), key=lambda x: x[1])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(sorted_dict[i][0])\n    return indexes']",1000,0.01031220005825162,0.01063502799719572,0.011895299889147282,N/A
p3_find_n_smallest_number,prompt_3,100,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_ = {i: arg1[i] for i in range(n)}\n    sorted_dict = sorted(dict_.items(), key=lambda x: x[1])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(sorted_dict[i][0])\n    return indexes']",10000,0.1606393998954445,0.16862705499632283,0.18711469997651875,N/A
p3_find_n_smallest_number,prompt_3,100,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_ = {i: arg1[i] for i in range(n)}\n    sorted_dict = sorted(dict_.items(), key=lambda x: x[1])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(sorted_dict[i][0])\n    return indexes']",100000,2.61614549998194,2.664252660004422,2.746009499998763,N/A
p3_find_n_smallest_number,prompt_4,1,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    elif k >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    heap = list(arg1[:k])\n    for i in range(k // 2 - 1, -1, -1):\n        sift_down(heap, i, k - 1, arg1)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    result = sorted(range(len(heap)), key=lambda i: heap[i])\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            result.append(i)\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    return sorted(result)\n\ndef sift_down(heap, i, end, values):\n    child = i * 2 + 1\n    while child <= end:\n        if child + 1 <= end and values[heap[child + 1]] > values[heap[child]]:\n            child += 1\n        if values[heap[child]] > values[heap[i]]:\n            heap[child], heap[i] = (heap[i], heap[child])\n            i = child\n            child = i * 2 + 1\n        else:\n            break']",1000,0.004435000009834766,0.004564678000751883,0.004737100098282099,N/A
p3_find_n_smallest_number,prompt_4,1,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    elif k >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    heap = list(arg1[:k])\n    for i in range(k // 2 - 1, -1, -1):\n        sift_down(heap, i, k - 1, arg1)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    result = sorted(range(len(heap)), key=lambda i: heap[i])\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            result.append(i)\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    return sorted(result)\n\ndef sift_down(heap, i, end, values):\n    child = i * 2 + 1\n    while child <= end:\n        if child + 1 <= end and values[heap[child + 1]] > values[heap[child]]:\n            child += 1\n        if values[heap[child]] > values[heap[i]]:\n            heap[child], heap[i] = (heap[i], heap[child])\n            i = child\n            child = i * 2 + 1\n        else:\n            break']",10000,0.039373100036755204,0.040434231008403,0.04190739989280701,N/A
p3_find_n_smallest_number,prompt_4,1,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    elif k >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    heap = list(arg1[:k])\n    for i in range(k // 2 - 1, -1, -1):\n        sift_down(heap, i, k - 1, arg1)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    result = sorted(range(len(heap)), key=lambda i: heap[i])\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            result.append(i)\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    return sorted(result)\n\ndef sift_down(heap, i, end, values):\n    child = i * 2 + 1\n    while child <= end:\n        if child + 1 <= end and values[heap[child + 1]] > values[heap[child]]:\n            child += 1\n        if values[heap[child]] > values[heap[i]]:\n            heap[child], heap[i] = (heap[i], heap[child])\n            i = child\n            child = i * 2 + 1\n        else:\n            break']",100000,0.39865770004689693,0.40388496600324286,0.41563880001194775,N/A
p3_find_n_smallest_number,prompt_4,2,"['def partition(arr, left, right, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot_value:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_index = (left + right) // 2\n    pivot_index = partition(arr, left, right, pivot_index)\n    if k == pivot_index:\n        return k\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, k):\n    kth_smallest = arg1[quickselect(arg1, 0, len(arg1) - 1, k - 1)]\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest]']",1000,0.007461200002580881,0.007902001999318599,0.010469199856743217,N/A
p3_find_n_smallest_number,prompt_4,2,"['def partition(arr, left, right, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot_value:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_index = (left + right) // 2\n    pivot_index = partition(arr, left, right, pivot_index)\n    if k == pivot_index:\n        return k\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, k):\n    kth_smallest = arg1[quickselect(arg1, 0, len(arg1) - 1, k - 1)]\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest]']",10000,0.07862880011089146,0.08048293599393219,0.08445800002664328,N/A
p3_find_n_smallest_number,prompt_4,2,"['def partition(arr, left, right, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot_value:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_index = (left + right) // 2\n    pivot_index = partition(arr, left, right, pivot_index)\n    if k == pivot_index:\n        return k\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, k):\n    kth_smallest = arg1[quickselect(arg1, 0, len(arg1) - 1, k - 1)]\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest]']",100000,0.8554364000447094,0.944166628990788,0.9964183000847697,N/A
p3_find_n_smallest_number,prompt_4,3,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is larger than the size of the array.'\n    idx = [i for i in range(n)]\n    idx.sort(key=lambda x: arg1[x])\n    return idx[:arg2]""]",1000,0.007888100109994411,0.008401913999114186,0.010392599971964955,N/A
p3_find_n_smallest_number,prompt_4,3,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is larger than the size of the array.'\n    idx = [i for i in range(n)]\n    idx.sort(key=lambda x: arg1[x])\n    return idx[:arg2]""]",10000,0.11773640010505915,0.12054908401332795,0.1405859999358654,N/A
p3_find_n_smallest_number,prompt_4,3,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is larger than the size of the array.'\n    idx = [i for i in range(n)]\n    idx.sort(key=lambda x: arg1[x])\n    return idx[:arg2]""]",100000,1.6601422999519855,1.7003162019979208,1.7582241999916732,N/A
p3_find_n_smallest_number,prompt_4,4,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.007015699986368418,0.007367490991018712,0.007859000004827976,N/A
p3_find_n_smallest_number,prompt_4,4,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.1098720000591129,0.11241970802191645,0.12022679997608066,N/A
p3_find_n_smallest_number,prompt_4,4,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.5779357999563217,1.6147369330050423,1.681962399976328,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_heap = []\n    for i, num in enumerate(arg1):\n        if len(indices_heap) < arg2:\n            heapq.heappush(indices_heap, (-num, i))\n        elif -num > indices_heap[0][0]:\n            heapq.heappop(indices_heap)\n            heapq.heappush(indices_heap, (-num, i))\n    result = [heapq.heappop(indices_heap)[1] for _ in range(arg2)]\n    return result']",1000,0.004535899963229895,0.004860010982956737,0.015891999937593937,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_heap = []\n    for i, num in enumerate(arg1):\n        if len(indices_heap) < arg2:\n            heapq.heappush(indices_heap, (-num, i))\n        elif -num > indices_heap[0][0]:\n            heapq.heappop(indices_heap)\n            heapq.heappush(indices_heap, (-num, i))\n    result = [heapq.heappop(indices_heap)[1] for _ in range(arg2)]\n    return result']",10000,0.04329390008933842,0.044446019006427376,0.04681379999965429,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_heap = []\n    for i, num in enumerate(arg1):\n        if len(indices_heap) < arg2:\n            heapq.heappush(indices_heap, (-num, i))\n        elif -num > indices_heap[0][0]:\n            heapq.heappop(indices_heap)\n            heapq.heappush(indices_heap, (-num, i))\n    result = [heapq.heappop(indices_heap)[1] for _ in range(arg2)]\n    return result']",100000,0.44106290000490844,0.44931413400685416,0.47121259989216924,N/A
p3_find_n_smallest_number,prompt_4,6,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict.setdefault(val, []).append(i)\n    unique_vals = sorted(set(arg1))\n    smallest_vals = unique_vals[:arg2]\n    smallest_indexes = []\n    for val in smallest_vals:\n        smallest_indexes.extend(index_dict[val][:arg2])\n        arg2 -= len(index_dict[val])\n        if arg2 == 0:\n            break\n    return smallest_indexes']",1000,0.0065334998071193695,0.006980541008524597,0.01080689998343587,N/A
p3_find_n_smallest_number,prompt_4,6,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict.setdefault(val, []).append(i)\n    unique_vals = sorted(set(arg1))\n    smallest_vals = unique_vals[:arg2]\n    smallest_indexes = []\n    for val in smallest_vals:\n        smallest_indexes.extend(index_dict[val][:arg2])\n        arg2 -= len(index_dict[val])\n        if arg2 == 0:\n            break\n    return smallest_indexes']",10000,0.07366609992459416,0.07826262798160315,0.08123190002515912,N/A
p3_find_n_smallest_number,prompt_4,6,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict.setdefault(val, []).append(i)\n    unique_vals = sorted(set(arg1))\n    smallest_vals = unique_vals[:arg2]\n    smallest_indexes = []\n    for val in smallest_vals:\n        smallest_indexes.extend(index_dict[val][:arg2])\n        arg2 -= len(index_dict[val])\n        if arg2 == 0:\n            break\n    return smallest_indexes']",100000,1.61973339994438,1.6758127359999344,1.7188743997830898,N/A
p3_find_n_smallest_number,prompt_4,7,"['def funcImp(arg1, arg2):\n    kthSmallest = quickSelect(arg1, 0, len(arg1) - 1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes.append(i)\n            if len(indexes) == arg2:\n                break\n    return indexes\n\ndef quickSelect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivotIndex = partition(arr, left, right)\n    if pivotIndex == k:\n        return arr[pivotIndex]\n    elif k < pivotIndex:\n        return quickSelect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickSelect(arr, pivotIndex + 1, right, k)\n\ndef partition(arr, left, right):\n    pivotValue = arr[right]\n    pivotIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            swap(arr, i, pivotIndex)\n            pivotIndex += 1\n    swap(arr, right, pivotIndex)\n    return pivotIndex\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,7,"['def funcImp(arg1, arg2):\n    kthSmallest = quickSelect(arg1, 0, len(arg1) - 1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes.append(i)\n            if len(indexes) == arg2:\n                break\n    return indexes\n\ndef quickSelect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivotIndex = partition(arr, left, right)\n    if pivotIndex == k:\n        return arr[pivotIndex]\n    elif k < pivotIndex:\n        return quickSelect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickSelect(arr, pivotIndex + 1, right, k)\n\ndef partition(arr, left, right):\n    pivotValue = arr[right]\n    pivotIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            swap(arr, i, pivotIndex)\n            pivotIndex += 1\n    swap(arr, right, pivotIndex)\n    return pivotIndex\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,7,"['def funcImp(arg1, arg2):\n    kthSmallest = quickSelect(arg1, 0, len(arg1) - 1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes.append(i)\n            if len(indexes) == arg2:\n                break\n    return indexes\n\ndef quickSelect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivotIndex = partition(arr, left, right)\n    if pivotIndex == k:\n        return arr[pivotIndex]\n    elif k < pivotIndex:\n        return quickSelect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickSelect(arr, pivotIndex + 1, right, k)\n\ndef partition(arr, left, right):\n    pivotValue = arr[right]\n    pivotIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            swap(arr, i, pivotIndex)\n            pivotIndex += 1\n    swap(arr, right, pivotIndex)\n    return pivotIndex\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,8,"['def partition(arr, l, r):\n    x = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= x:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    q = partition(arr, l, r)\n    if q == k:\n        return arr[q]\n    elif q > k:\n        return quickselect(arr, l, q - 1, k)\n    else:\n        return quickselect(arr, q + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    kth = quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth]\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,8,"['def partition(arr, l, r):\n    x = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= x:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    q = partition(arr, l, r)\n    if q == k:\n        return arr[q]\n    elif q > k:\n        return quickselect(arr, l, q - 1, k)\n    else:\n        return quickselect(arr, q + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    kth = quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth]\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,8,"['def partition(arr, l, r):\n    x = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= x:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    q = partition(arr, l, r)\n    if q == k:\n        return arr[q]\n    elif q > k:\n        return quickselect(arr, l, q - 1, k)\n    else:\n        return quickselect(arr, q + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    kth = quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth]\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,9,"['def partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [(arr[left], left)]\n    pivot_idx = partition(arr, left, right)\n    if k == pivot_idx:\n        return [(arr[pivot_idx], pivot_idx)]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    idxs = []\n    for k in range(arg2):\n        res = quickselect(arg1, 0, len(arg1) - 1, k)\n        idxs.append(res[0][1])\n    return idxs']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,9,"['def partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [(arr[left], left)]\n    pivot_idx = partition(arr, left, right)\n    if k == pivot_idx:\n        return [(arr[pivot_idx], pivot_idx)]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    idxs = []\n    for k in range(arg2):\n        res = quickselect(arg1, 0, len(arg1) - 1, k)\n        idxs.append(res[0][1])\n    return idxs']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,9,"['def partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [(arr[left], left)]\n    pivot_idx = partition(arr, left, right)\n    if k == pivot_idx:\n        return [(arr[pivot_idx], pivot_idx)]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    idxs = []\n    for k in range(arg2):\n        res = quickselect(arg1, 0, len(arg1) - 1, k)\n        idxs.append(res[0][1])\n    return idxs']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,10,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(n):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n            k_smallest.remove(arg1[i])\n            if not k_smallest:\n                break\n    return indexes']",1000,0.003874999936670065,0.004096064993645996,0.004869400057941675,N/A
p3_find_n_smallest_number,prompt_4,10,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(n):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n            k_smallest.remove(arg1[i])\n            if not k_smallest:\n                break\n    return indexes']",10000,0.09383339993655682,0.09603651799727231,0.10022670007310808,N/A
p3_find_n_smallest_number,prompt_4,10,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(n):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n            k_smallest.remove(arg1[i])\n            if not k_smallest:\n                break\n    return indexes']",100000,1.3275540000759065,1.3631549659930169,1.4024489999283105,N/A
p3_find_n_smallest_number,prompt_4,11,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return indexes']",1000,0.03878589998930693,0.04041642298223451,0.04816260002553463,N/A
p3_find_n_smallest_number,prompt_4,11,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return indexes']",10000,0.66007039998658,0.6697257230058312,0.7070561998989433,N/A
p3_find_n_smallest_number,prompt_4,11,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return indexes']",100000,4.681196699850261,4.752784263000358,4.870280999923125,N/A
p3_find_n_smallest_number,prompt_4,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'k cannot be larger than the length of the list.'\n    else:\n        indices = []\n        for i in range(k):\n            min_index = arg1.index(min(arg1))\n            indices.append(min_index)\n            arg1[min_index] = float('inf')\n        return indices""]",1000,0.0022372999228537083,0.0023658329946920275,0.007834000047296286,N/A
p3_find_n_smallest_number,prompt_4,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'k cannot be larger than the length of the list.'\n    else:\n        indices = []\n        for i in range(k):\n            min_index = arg1.index(min(arg1))\n            indices.append(min_index)\n            arg1[min_index] = float('inf')\n        return indices""]",10000,0.02266369992867112,0.03400212898151949,0.09961089980788529,N/A
p3_find_n_smallest_number,prompt_4,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'k cannot be larger than the length of the list.'\n    else:\n        indices = []\n        for i in range(k):\n            min_index = arg1.index(min(arg1))\n            indices.append(min_index)\n            arg1[min_index] = float('inf')\n        return indices""]",100000,0.33595259999856353,0.7437869149981998,1.0915518999099731,N/A
p3_find_n_smallest_number,prompt_4,13,"[""def funcImp(arg1, arg2):\n    smallest_k = [float('inf')] * arg2\n    for i in range(len(arg1)):\n        if arg1[i] < max(smallest_k):\n            smallest_k[smallest_k.index(max(smallest_k))] = arg1[i]\n    indexes = []\n    for j in range(len(arg1)):\n        if arg1[j] in smallest_k:\n            indexes.append(j)\n    return indexes""]",1000,0.010841399896889925,0.011080733987037093,0.011494799982756376,N/A
p3_find_n_smallest_number,prompt_4,13,"[""def funcImp(arg1, arg2):\n    smallest_k = [float('inf')] * arg2\n    for i in range(len(arg1)):\n        if arg1[i] < max(smallest_k):\n            smallest_k[smallest_k.index(max(smallest_k))] = arg1[i]\n    indexes = []\n    for j in range(len(arg1)):\n        if arg1[j] in smallest_k:\n            indexes.append(j)\n    return indexes""]",10000,0.10538349999114871,0.10770600799005478,0.1162058999761939,N/A
p3_find_n_smallest_number,prompt_4,13,"[""def funcImp(arg1, arg2):\n    smallest_k = [float('inf')] * arg2\n    for i in range(len(arg1)):\n        if arg1[i] < max(smallest_k):\n            smallest_k[smallest_k.index(max(smallest_k))] = arg1[i]\n    indexes = []\n    for j in range(len(arg1)):\n        if arg1[j] in smallest_k:\n            indexes.append(j)\n    return indexes""]",100000,1.0644531999714673,1.0776614540116862,1.1137680001556873,N/A
p3_find_n_smallest_number,prompt_4,14,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        """"""\n        Return the kth smallest element in lst via quickselect\n        """"""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes[:arg2]']",1000,0.007863800041377544,0.008194522000849247,0.010637599974870682,N/A
p3_find_n_smallest_number,prompt_4,14,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        """"""\n        Return the kth smallest element in lst via quickselect\n        """"""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes[:arg2]']",10000,0.09617380006238818,0.09788996000308543,0.10242610005661845,N/A
p3_find_n_smallest_number,prompt_4,14,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        """"""\n        Return the kth smallest element in lst via quickselect\n        """"""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes[:arg2]']",100000,1.126163500128314,1.1687913609924727,1.2309962001163512,N/A
p3_find_n_smallest_number,prompt_4,15,"['def funcImp(arg1, arg2):\n\n    def partition(lst, pivot):\n        """"""Partition the list into three parts: < pivot, == pivot, and > pivot.""""""\n        smaller = []\n        larger = []\n        pivots = []\n        for elem in lst:\n            if elem < pivot:\n                smaller.append(elem)\n            elif elem == pivot:\n                pivots.append(elem)\n            else:\n                larger.append(elem)\n        return (smaller, pivots, larger)\n\n    def select(lst, k):\n        """"""Select the k-th smallest element in lst (0-based index).""""""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        left, mid, right = partition(lst, pivot)\n        if k < len(left):\n            return select(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return select(right, k - len(left) - len(mid))\n    kth_smallest = select(arg1, arg2 - 1)\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",1000,0.00663030007854104,0.006987212998792529,0.008311899844557047,N/A
p3_find_n_smallest_number,prompt_4,15,"['def funcImp(arg1, arg2):\n\n    def partition(lst, pivot):\n        """"""Partition the list into three parts: < pivot, == pivot, and > pivot.""""""\n        smaller = []\n        larger = []\n        pivots = []\n        for elem in lst:\n            if elem < pivot:\n                smaller.append(elem)\n            elif elem == pivot:\n                pivots.append(elem)\n            else:\n                larger.append(elem)\n        return (smaller, pivots, larger)\n\n    def select(lst, k):\n        """"""Select the k-th smallest element in lst (0-based index).""""""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        left, mid, right = partition(lst, pivot)\n        if k < len(left):\n            return select(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return select(right, k - len(left) - len(mid))\n    kth_smallest = select(arg1, arg2 - 1)\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",10000,0.091764000011608,0.09307669898262247,0.10143160005100071,N/A
p3_find_n_smallest_number,prompt_4,15,"['def funcImp(arg1, arg2):\n\n    def partition(lst, pivot):\n        """"""Partition the list into three parts: < pivot, == pivot, and > pivot.""""""\n        smaller = []\n        larger = []\n        pivots = []\n        for elem in lst:\n            if elem < pivot:\n                smaller.append(elem)\n            elif elem == pivot:\n                pivots.append(elem)\n            else:\n                larger.append(elem)\n        return (smaller, pivots, larger)\n\n    def select(lst, k):\n        """"""Select the k-th smallest element in lst (0-based index).""""""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        left, mid, right = partition(lst, pivot)\n        if k < len(left):\n            return select(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return select(right, k - len(left) - len(mid))\n    kth_smallest = select(arg1, arg2 - 1)\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",100000,0.7299498000647873,0.7388794940081425,0.7678467999212444,N/A
p3_find_n_smallest_number,prompt_4,16,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def quick_select(lst, k):\n        if not lst:\n            return []\n        pivot = random.choice(lst)\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        mid = [x for x in lst if x == pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quick_select(right, k - len(left) - len(mid))\n    k = arg2\n    smallest_vals = quick_select(arg1, k)\n    smallest_idxs = []\n    for i, val in enumerate(arg1):\n        if val in smallest_vals:\n            smallest_idxs.append(i)\n    return smallest_idxs']",1000,0.011176900006830692,0.012048146002925933,0.013192499987781048,N/A
p3_find_n_smallest_number,prompt_4,16,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def quick_select(lst, k):\n        if not lst:\n            return []\n        pivot = random.choice(lst)\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        mid = [x for x in lst if x == pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quick_select(right, k - len(left) - len(mid))\n    k = arg2\n    smallest_vals = quick_select(arg1, k)\n    smallest_idxs = []\n    for i, val in enumerate(arg1):\n        if val in smallest_vals:\n            smallest_idxs.append(i)\n    return smallest_idxs']",10000,0.10284500010311604,0.10859556800452992,0.11659009987488389,N/A
p3_find_n_smallest_number,prompt_4,16,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def quick_select(lst, k):\n        if not lst:\n            return []\n        pivot = random.choice(lst)\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        mid = [x for x in lst if x == pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quick_select(right, k - len(left) - len(mid))\n    k = arg2\n    smallest_vals = quick_select(arg1, k)\n    smallest_idxs = []\n    for i, val in enumerate(arg1):\n        if val in smallest_vals:\n            smallest_idxs.append(i)\n    return smallest_idxs']",100000,1.0379731999710202,1.1274651200068184,1.232435799902305,N/A
p3_find_n_smallest_number,prompt_4,17,"['def funcImp(arg1, k):\n    value_index = {value: index for index, value in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:k]\n    result = [value_index[value] for value in k_smallest]\n    return result']",1000,0.005617800168693066,0.005997732994146645,0.006969800218939781,N/A
p3_find_n_smallest_number,prompt_4,17,"['def funcImp(arg1, k):\n    value_index = {value: index for index, value in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:k]\n    result = [value_index[value] for value in k_smallest]\n    return result']",10000,0.10734119988046587,0.11095962198916823,0.1283418999519199,N/A
p3_find_n_smallest_number,prompt_4,17,"['def funcImp(arg1, k):\n    value_index = {value: index for index, value in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:k]\n    result = [value_index[value] for value in k_smallest]\n    return result']",100000,1.6406230998691171,1.676113344989717,1.7380836000666022,N/A
p3_find_n_smallest_number,prompt_4,18,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices_k_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices_k_smallest']",1000,0.0070668000262230635,0.007457897998392582,0.008660600055009127,N/A
p3_find_n_smallest_number,prompt_4,18,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices_k_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices_k_smallest']",10000,0.11075189989060163,0.11377907399320975,0.12532239989377558,N/A
p3_find_n_smallest_number,prompt_4,18,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices_k_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices_k_smallest']",100000,1.589366199914366,1.6374374789954163,1.6992446000222117,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-arr[i], i))\n        elif -heap[0][0] > arr[i]:\n            heapq.heappushpop(heap, (-arr[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(k)]\n    result.sort()\n    return result']",1000,0.003840699791908264,0.003969770986586809,0.004777299938723445,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-arr[i], i))\n        elif -heap[0][0] > arr[i]:\n            heapq.heappushpop(heap, (-arr[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(k)]\n    result.sort()\n    return result']",10000,0.03664930001832545,0.03799937000032514,0.0440328000113368,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-arr[i], i))\n        elif -heap[0][0] > arr[i]:\n            heapq.heappushpop(heap, (-arr[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(k)]\n    result.sort()\n    return result']",100000,0.36545690009370446,0.3763932329951786,0.4021570000331849,N/A
p3_find_n_smallest_number,prompt_4,20,"['def funcImp(arg1, arg2):\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_indexes = [t[1] for t in sorted_tuples[:arg2]]\n    return k_indexes']",1000,0.00945560005493462,0.009975468991324305,0.010815500048920512,N/A
p3_find_n_smallest_number,prompt_4,20,"['def funcImp(arg1, arg2):\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_indexes = [t[1] for t in sorted_tuples[:arg2]]\n    return k_indexes']",10000,0.15681850002147257,0.16308135399827733,0.1715226999949664,N/A
p3_find_n_smallest_number,prompt_4,20,"['def funcImp(arg1, arg2):\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_indexes = [t[1] for t in sorted_tuples[:arg2]]\n    return k_indexes']",100000,2.2983014001511037,2.374651056998409,2.46165470010601,N/A
p3_find_n_smallest_number,prompt_4,21,"['def funcImp(arg1, arg2):\n    """"""\n    Takes a list of integers \'arg1\' and an integer \'arg2\'\n    Returns a list containing the indices of the k smallest elements in \'arg1\'\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    kSmallest = arr[:arg2]\n    indexDict = {}\n    for i, num in enumerate(arg1):\n        indexDict[num] = i\n    kSmallestIndices = [indexDict[num] for num in kSmallest]\n    return kSmallestIndices']",1000,0.005950799910351634,0.006355937006883323,0.007594799855723977,N/A
p3_find_n_smallest_number,prompt_4,21,"['def funcImp(arg1, arg2):\n    """"""\n    Takes a list of integers \'arg1\' and an integer \'arg2\'\n    Returns a list containing the indices of the k smallest elements in \'arg1\'\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    kSmallest = arr[:arg2]\n    indexDict = {}\n    for i, num in enumerate(arg1):\n        indexDict[num] = i\n    kSmallestIndices = [indexDict[num] for num in kSmallest]\n    return kSmallestIndices']",10000,0.10908820014446974,0.11352079499280081,0.13272069999948144,N/A
p3_find_n_smallest_number,prompt_4,21,"['def funcImp(arg1, arg2):\n    """"""\n    Takes a list of integers \'arg1\' and an integer \'arg2\'\n    Returns a list containing the indices of the k smallest elements in \'arg1\'\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    kSmallest = arr[:arg2]\n    indexDict = {}\n    for i, num in enumerate(arg1):\n        indexDict[num] = i\n    kSmallestIndices = [indexDict[num] for num in kSmallest]\n    return kSmallestIndices']",100000,1.699924800079316,1.7510056509892455,1.7915070001035929,N/A
p3_find_n_smallest_number,prompt_4,22,"['def funcImp(arg1, arg2):\n    indices = []\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(dict[sorted_arr[i]])\n    return indices']",1000,0.00553980004042387,0.005894284003879875,0.006452500121667981,N/A
p3_find_n_smallest_number,prompt_4,22,"['def funcImp(arg1, arg2):\n    indices = []\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(dict[sorted_arr[i]])\n    return indices']",10000,0.10532099986448884,0.10885047100950032,0.1159777999855578,N/A
p3_find_n_smallest_number,prompt_4,22,"['def funcImp(arg1, arg2):\n    indices = []\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(dict[sorted_arr[i]])\n    return indices']",100000,1.6073501000646502,1.6483607600047252,1.7089288998395205,N/A
p3_find_n_smallest_number,prompt_4,23,"['def funcImp(arg1, arg2):\n    temp = arg1.copy()\n    k = arg2\n    res = []\n    temp.sort()\n    for i in range(k):\n        index = arg1.index(temp[i])\n        res.append(index)\n    return res']",1000,0.003300500102341175,0.003547134003601968,0.0043358998373150826,N/A
p3_find_n_smallest_number,prompt_4,23,"['def funcImp(arg1, arg2):\n    temp = arg1.copy()\n    k = arg2\n    res = []\n    temp.sort()\n    for i in range(k):\n        index = arg1.index(temp[i])\n        res.append(index)\n    return res']",10000,0.08429770008660853,0.08765320800477638,0.09641969995573163,N/A
p3_find_n_smallest_number,prompt_4,23,"['def funcImp(arg1, arg2):\n    temp = arg1.copy()\n    k = arg2\n    res = []\n    temp.sort()\n    for i in range(k):\n        index = arg1.index(temp[i])\n        res.append(index)\n    return res']",100000,1.2090054999571294,1.23657486400567,1.2713721001055092,N/A
p3_find_n_smallest_number,prompt_4,24,"['def funcImp(arg1, arg2):\n    k = arg2\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    res = [idx for val, idx in lst[:k]]\n    return res']",1000,0.011602599872276187,0.012258102977648377,0.01466159988194704,N/A
p3_find_n_smallest_number,prompt_4,24,"['def funcImp(arg1, arg2):\n    k = arg2\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    res = [idx for val, idx in lst[:k]]\n    return res']",10000,0.17324079992249608,0.1818728860002011,0.19653590000234544,N/A
p3_find_n_smallest_number,prompt_4,24,"['def funcImp(arg1, arg2):\n    k = arg2\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    res = [idx for val, idx in lst[:k]]\n    return res']",100000,2.851507200160995,2.9487932530092076,3.099372000200674,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",1000,0.004186500096693635,0.004370578993111849,0.005205400055274367,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",10000,0.04010379989631474,0.04168307299492881,0.04443200002424419,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",100000,0.4038556998129934,0.41536877400940286,0.43657059990800917,N/A
p3_find_n_smallest_number,prompt_4,26,"['def funcImp(arg1, arg2):\n    mapping = {val: i for i, val in enumerate(arg1)}\n    smallest = sorted(arg1)[:arg2]\n    indices = [mapping[val] for val in smallest]\n    return indices']",1000,0.005880200071260333,0.006114933013450354,0.006612800061702728,N/A
p3_find_n_smallest_number,prompt_4,26,"['def funcImp(arg1, arg2):\n    mapping = {val: i for i, val in enumerate(arg1)}\n    smallest = sorted(arg1)[:arg2]\n    indices = [mapping[val] for val in smallest]\n    return indices']",10000,0.10633410001173615,0.11061540500959381,0.1721916999667883,N/A
p3_find_n_smallest_number,prompt_4,26,"['def funcImp(arg1, arg2):\n    mapping = {val: i for i, val in enumerate(arg1)}\n    smallest = sorted(arg1)[:arg2]\n    indices = [mapping[val] for val in smallest]\n    return indices']",100000,1.6339605001267046,1.6810385429975576,1.7314311999361962,N/A
p3_find_n_smallest_number,prompt_4,27,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return range(n)\n    k_smallest_indexes = []\n    k_smallest = [float('inf')] * arg2\n    for i in range(n):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            j = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(j, arg1[i])\n            k_smallest_indexes.insert(j, i)\n    return k_smallest_indexes""]",1000,0,0,0,	 exception: name 'bisect_left' is not defined
p3_find_n_smallest_number,prompt_4,27,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return range(n)\n    k_smallest_indexes = []\n    k_smallest = [float('inf')] * arg2\n    for i in range(n):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            j = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(j, arg1[i])\n            k_smallest_indexes.insert(j, i)\n    return k_smallest_indexes""]",10000,0,0,0,	 exception: name 'bisect_left' is not defined
p3_find_n_smallest_number,prompt_4,27,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return range(n)\n    k_smallest_indexes = []\n    k_smallest = [float('inf')] * arg2\n    for i in range(n):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            j = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(j, arg1[i])\n            k_smallest_indexes.insert(j, i)\n    return k_smallest_indexes""]",100000,0,0,0,	 exception: name 'bisect_left' is not defined
p3_find_n_smallest_number,prompt_4,28,"['def funcImp(arr, k):\n    values = dict(zip(arr, range(len(arr))))\n    smallest = sorted(values.keys())[:k]\n    indices = [values[val] for val in smallest]\n    return indices']",1000,0.005176899954676628,0.005397307008970529,0.0060351998545229435,N/A
p3_find_n_smallest_number,prompt_4,28,"['def funcImp(arr, k):\n    values = dict(zip(arr, range(len(arr))))\n    smallest = sorted(values.keys())[:k]\n    indices = [values[val] for val in smallest]\n    return indices']",10000,0.09938020003028214,0.10225019300123676,0.11401069979183376,N/A
p3_find_n_smallest_number,prompt_4,28,"['def funcImp(arr, k):\n    values = dict(zip(arr, range(len(arr))))\n    smallest = sorted(values.keys())[:k]\n    indices = [values[val] for val in smallest]\n    return indices']",100000,1.548683000029996,1.5996955850021914,1.6671768000815064,N/A
p3_find_n_smallest_number,prompt_4,29,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(indices[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.008270699996501207,0.00882691900478676,0.013132699998095632,N/A
p3_find_n_smallest_number,prompt_4,29,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(indices[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.1353192999958992,0.1398954820050858,0.1665517999790609,N/A
p3_find_n_smallest_number,prompt_4,29,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(indices[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,2.1722375999670476,2.232411493996624,2.292412299895659,N/A
p3_find_n_smallest_number,prompt_4,30,"['def funcImp(arg1, arg2):\n    frequency_dict = {}\n    for ind, num in enumerate(arg1):\n        if num not in frequency_dict:\n            frequency_dict[num] = [0, ind]\n        else:\n            frequency_dict[num][0] += 1\n    distinct_nums = sorted(list(frequency_dict.keys()))\n    k_smallest = []\n    for num in distinct_nums:\n        freq = frequency_dict[num][0]\n        ind = frequency_dict[num][1]\n        if len(k_smallest) < arg2:\n            for i in range(freq + 1):\n                k_smallest.append(ind)\n                if len(k_smallest) == arg2:\n                    return k_smallest\n        else:\n            for i in range(freq + 1):\n                k_smallest[-1] = ind\n                k_smallest.sort()\n                if len(k_smallest) == arg2:\n                    return k_smallest\n    return k_smallest']",1000,0.008838600013405085,0.009442312978208064,0.016079199966043234,N/A
p3_find_n_smallest_number,prompt_4,30,"['def funcImp(arg1, arg2):\n    frequency_dict = {}\n    for ind, num in enumerate(arg1):\n        if num not in frequency_dict:\n            frequency_dict[num] = [0, ind]\n        else:\n            frequency_dict[num][0] += 1\n    distinct_nums = sorted(list(frequency_dict.keys()))\n    k_smallest = []\n    for num in distinct_nums:\n        freq = frequency_dict[num][0]\n        ind = frequency_dict[num][1]\n        if len(k_smallest) < arg2:\n            for i in range(freq + 1):\n                k_smallest.append(ind)\n                if len(k_smallest) == arg2:\n                    return k_smallest\n        else:\n            for i in range(freq + 1):\n                k_smallest[-1] = ind\n                k_smallest.sort()\n                if len(k_smallest) == arg2:\n                    return k_smallest\n    return k_smallest']",10000,0.13912410009652376,0.1446205169800669,0.1542410000693053,N/A
p3_find_n_smallest_number,prompt_4,30,"['def funcImp(arg1, arg2):\n    frequency_dict = {}\n    for ind, num in enumerate(arg1):\n        if num not in frequency_dict:\n            frequency_dict[num] = [0, ind]\n        else:\n            frequency_dict[num][0] += 1\n    distinct_nums = sorted(list(frequency_dict.keys()))\n    k_smallest = []\n    for num in distinct_nums:\n        freq = frequency_dict[num][0]\n        ind = frequency_dict[num][1]\n        if len(k_smallest) < arg2:\n            for i in range(freq + 1):\n                k_smallest.append(ind)\n                if len(k_smallest) == arg2:\n                    return k_smallest\n        else:\n            for i in range(freq + 1):\n                k_smallest[-1] = ind\n                k_smallest.sort()\n                if len(k_smallest) == arg2:\n                    return k_smallest\n    return k_smallest']",100000,2.2770420000888407,2.3241279480000956,2.413674999959767,N/A
p3_find_n_smallest_number,prompt_4,31,"[""def funcImp(arg1, arg2):\n    k = arg2\n    index_list = []\n    for i in range(k):\n        min_idx = arg1.index(min(arg1))\n        index_list.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return index_list""]",1000,0.0021526999771595,0.002434937998186797,0.007866600062698126,N/A
p3_find_n_smallest_number,prompt_4,31,"[""def funcImp(arg1, arg2):\n    k = arg2\n    index_list = []\n    for i in range(k):\n        min_idx = arg1.index(min(arg1))\n        index_list.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return index_list""]",10000,0.022002500016242266,0.03289216697914526,0.08821430010721087,N/A
p3_find_n_smallest_number,prompt_4,31,"[""def funcImp(arg1, arg2):\n    k = arg2\n    index_list = []\n    for i in range(k):\n        min_idx = arg1.index(min(arg1))\n        index_list.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return index_list""]",100000,0.33697229996323586,0.7469041340053082,1.1069341998081654,N/A
p3_find_n_smallest_number,prompt_4,32,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        index = arg1.index(sorted_arr[i])\n        smallest_indexes.append(index)\n    return smallest_indexes']",1000,0.0031832000240683556,0.003499386003240943,0.004245799966156483,N/A
p3_find_n_smallest_number,prompt_4,32,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        index = arg1.index(sorted_arr[i])\n        smallest_indexes.append(index)\n    return smallest_indexes']",10000,0.08261709986254573,0.08572267100447789,0.08977189986035228,N/A
p3_find_n_smallest_number,prompt_4,32,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        index = arg1.index(sorted_arr[i])\n        smallest_indexes.append(index)\n    return smallest_indexes']",100000,1.2104516001418233,1.2392492660018615,1.2773298001848161,N/A
p3_find_n_smallest_number,prompt_4,33,"['def funcImp(arg1, arg2):\n    values = {}\n    for i in range(len(arg1)):\n        values[i] = arg1[i]\n    sorted_values = sorted(values.items(), key=lambda x: x[1])\n    result = [index for index, value in sorted_values[:arg2]]\n    return result']",1000,0.009983700001612306,0.010726706990972161,0.01650670007802546,N/A
p3_find_n_smallest_number,prompt_4,33,"['def funcImp(arg1, arg2):\n    values = {}\n    for i in range(len(arg1)):\n        values[i] = arg1[i]\n    sorted_values = sorted(values.items(), key=lambda x: x[1])\n    result = [index for index, value in sorted_values[:arg2]]\n    return result']",10000,0.1566445000935346,0.16872614100808278,0.17806780012324452,N/A
p3_find_n_smallest_number,prompt_4,33,"['def funcImp(arg1, arg2):\n    values = {}\n    for i in range(len(arg1)):\n        values[i] = arg1[i]\n    sorted_values = sorted(values.items(), key=lambda x: x[1])\n    result = [index for index, value in sorted_values[:arg2]]\n    return result']",100000,2.6291035001631826,2.692730103000067,2.821016099769622,N/A
p3_find_n_smallest_number,prompt_4,34,"['def funcImp(arg1, arg2):\n    k = arg2 if arg2 <= len(arg1) else len(arg1)\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        index = arg1.index(num)\n        indices.append(index)\n    indices.sort()\n    return indices']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,34,"['def funcImp(arg1, arg2):\n    k = arg2 if arg2 <= len(arg1) else len(arg1)\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        index = arg1.index(num)\n        indices.append(index)\n    indices.sort()\n    return indices']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,34,"['def funcImp(arg1, arg2):\n    k = arg2 if arg2 <= len(arg1) else len(arg1)\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        index = arg1.index(num)\n        indices.append(index)\n    indices.sort()\n    return indices']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,35,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [x for x in nums if x < pivot]\n        right = [x for x in nums if x > pivot]\n        mid = [x for x in nums if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    k_smallest = quickselect(arg1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_4,35,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [x for x in nums if x < pivot]\n        right = [x for x in nums if x > pivot]\n        mid = [x for x in nums if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    k_smallest = quickselect(arg1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_4,35,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [x for x in nums if x < pivot]\n        right = [x for x in nums if x > pivot]\n        mid = [x for x in nums if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    k_smallest = quickselect(arg1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_4,36,"['def funcImp(arr, k):\n    heap = arr[:k]\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapreplace(heap, arr[i])\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices']",1000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_4,36,"['def funcImp(arr, k):\n    heap = arr[:k]\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapreplace(heap, arr[i])\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices']",10000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_4,36,"['def funcImp(arr, k):\n    heap = arr[:k]\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapreplace(heap, arr[i])\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices']",100000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_4,37,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [x[1] for x in lst[:arg2]]']",1000,0.01152239996008575,0.012157405011821538,0.014379900181666017,N/A
p3_find_n_smallest_number,prompt_4,37,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [x[1] for x in lst[:arg2]]']",10000,0.1743189999833703,0.1816548540024087,0.19773990008980036,N/A
p3_find_n_smallest_number,prompt_4,37,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [x[1] for x in lst[:arg2]]']",100000,2.858201399911195,2.9189474839996548,3.068473400082439,N/A
p3_find_n_smallest_number,prompt_4,38,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [-i for i in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heapreplace(heap, -arg1[i])\n    indices = []\n    for i in range(arg2):\n        indices.append(arg1.index(-heapq.heappop(heap)))\n    return indices']",1000,0.0030357998330146074,0.003218510993756354,0.004049899987876415,N/A
p3_find_n_smallest_number,prompt_4,38,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [-i for i in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heapreplace(heap, -arg1[i])\n    indices = []\n    for i in range(arg2):\n        indices.append(arg1.index(-heapq.heappop(heap)))\n    return indices']",10000,0.03441060008481145,0.03581457799999043,0.041497099911794066,N/A
p3_find_n_smallest_number,prompt_4,38,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [-i for i in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heapreplace(heap, -arg1[i])\n    indices = []\n    for i in range(arg2):\n        indices.append(arg1.index(-heapq.heappop(heap)))\n    return indices']",100000,0.39174579991959035,0.40471391899511217,0.445371099980548,N/A
p3_find_n_smallest_number,prompt_4,39,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n\n    def quickselect(lst, k):\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1[:], arg2 - 1)\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]']",1000,0.00930330017581582,0.009789017015136778,0.012123200111091137,N/A
p3_find_n_smallest_number,prompt_4,39,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n\n    def quickselect(lst, k):\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1[:], arg2 - 1)\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]']",10000,0.14353480003774166,0.1475537480134517,0.16121470020152628,N/A
p3_find_n_smallest_number,prompt_4,39,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n\n    def quickselect(lst, k):\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1[:], arg2 - 1)\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]']",100000,1.1033439999446273,1.1297930850088596,1.1720412999857217,N/A
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_dict = {num: idx for idx, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest_indices = []\n    for num in sorted_list[:arg2]:\n        k_smallest_indices.append(num_dict[num])\n    return k_smallest_indices']",1000,0.005823199870064855,0.0060668769921176134,0.00803350005298853,N/A
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_dict = {num: idx for idx, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest_indices = []\n    for num in sorted_list[:arg2]:\n        k_smallest_indices.append(num_dict[num])\n    return k_smallest_indices']",10000,0.10582960001192987,0.10943213999038562,0.11825719987973571,N/A
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_dict = {num: idx for idx, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest_indices = []\n    for num in sorted_list[:arg2]:\n        k_smallest_indices.append(num_dict[num])\n    return k_smallest_indices']",100000,1.6292371000163257,1.676768792993389,1.7498238999396563,N/A
p3_find_n_smallest_number,prompt_4,41,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 < 1 or arg2 > n:\n        return []\n    indices = range(n)\n    k_smallest_indices = sorted(indices, key=lambda i: arg1[i])[:arg2]\n    return k_smallest_indices']",1000,0.007061399985104799,0.007473216990474612,0.007918999996036291,N/A
p3_find_n_smallest_number,prompt_4,41,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 < 1 or arg2 > n:\n        return []\n    indices = range(n)\n    k_smallest_indices = sorted(indices, key=lambda i: arg1[i])[:arg2]\n    return k_smallest_indices']",10000,0.1106908000074327,0.11373744799522684,0.1257561999373138,N/A
p3_find_n_smallest_number,prompt_4,41,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 < 1 or arg2 > n:\n        return []\n    indices = range(n)\n    k_smallest_indices = sorted(indices, key=lambda i: arg1[i])[:arg2]\n    return k_smallest_indices']",100000,1.6011566000524908,1.6485499899904243,1.718356299912557,N/A
p3_find_n_smallest_number,prompt_4,42,"['def funcImp(arg1, k):\n    n = len(arg1)\n    if k < 1 or k > n:\n        return []\n    indices = list(range(n))\n    indices.sort(key=lambda i: arg1[i])\n    return indices[:k]']",1000,0.007037600036710501,0.0074370659771375355,0.010601900052279234,N/A
p3_find_n_smallest_number,prompt_4,42,"['def funcImp(arg1, k):\n    n = len(arg1)\n    if k < 1 or k > n:\n        return []\n    indices = list(range(n))\n    indices.sort(key=lambda i: arg1[i])\n    return indices[:k]']",10000,0.1149057000875473,0.11875267999712377,0.1312855000142008,N/A
p3_find_n_smallest_number,prompt_4,42,"['def funcImp(arg1, k):\n    n = len(arg1)\n    if k < 1 or k > n:\n        return []\n    indices = list(range(n))\n    indices.sort(key=lambda i: arg1[i])\n    return indices[:k]']",100000,1.617591500049457,1.6592441620049068,1.7174170999787748,N/A
p3_find_n_smallest_number,prompt_4,43,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Invalid input'\n    nums = arg1\n    k = arg2\n    index_dict = {}\n    heap = nums[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, len(nums)):\n        if nums[i] < heap[0]:\n            heap[0] = nums[i]\n            heapify(heap, k, 0)\n        if nums[i] in heap:\n            index_dict[nums[i]] = index_dict.get(nums[i], []) + [i]\n    result = []\n    for num in heap:\n        if num in index_dict:\n            result.extend(sorted(index_dict[num]))\n    return result\n\ndef heapify(heap, n, i):\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and heap[left] < heap[smallest]:\n        smallest = left\n    if right < n and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != i:\n        heap[i], heap[smallest] = (heap[smallest], heap[i])\n        heapify(heap, n, smallest)""]",1000,0,0,0,	 exception: cannot access local variable 'k' where it is not associated with a value
p3_find_n_smallest_number,prompt_4,43,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Invalid input'\n    nums = arg1\n    k = arg2\n    index_dict = {}\n    heap = nums[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, len(nums)):\n        if nums[i] < heap[0]:\n            heap[0] = nums[i]\n            heapify(heap, k, 0)\n        if nums[i] in heap:\n            index_dict[nums[i]] = index_dict.get(nums[i], []) + [i]\n    result = []\n    for num in heap:\n        if num in index_dict:\n            result.extend(sorted(index_dict[num]))\n    return result\n\ndef heapify(heap, n, i):\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and heap[left] < heap[smallest]:\n        smallest = left\n    if right < n and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != i:\n        heap[i], heap[smallest] = (heap[smallest], heap[i])\n        heapify(heap, n, smallest)""]",10000,0,0,0,	 exception: cannot access local variable 'k' where it is not associated with a value
p3_find_n_smallest_number,prompt_4,43,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Invalid input'\n    nums = arg1\n    k = arg2\n    index_dict = {}\n    heap = nums[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, len(nums)):\n        if nums[i] < heap[0]:\n            heap[0] = nums[i]\n            heapify(heap, k, 0)\n        if nums[i] in heap:\n            index_dict[nums[i]] = index_dict.get(nums[i], []) + [i]\n    result = []\n    for num in heap:\n        if num in index_dict:\n            result.extend(sorted(index_dict[num]))\n    return result\n\ndef heapify(heap, n, i):\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and heap[left] < heap[smallest]:\n        smallest = left\n    if right < n and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != i:\n        heap[i], heap[smallest] = (heap[smallest], heap[i])\n        heapify(heap, n, smallest)""]",100000,0,0,0,	 exception: cannot access local variable 'k' where it is not associated with a value
p3_find_n_smallest_number,prompt_4,44,"['def funcImp(arg1, arg2):\n    d = {i: arg1[i] for i in range(len(arg1))}\n    k_values = sorted(d.values())[:arg2]\n    result = [k for k, v in d.items() if v in k_values]\n    return result']",1000,0.00828789989463985,0.008803610983304679,0.009869599947705865,N/A
p3_find_n_smallest_number,prompt_4,44,"['def funcImp(arg1, arg2):\n    d = {i: arg1[i] for i in range(len(arg1))}\n    k_values = sorted(d.values())[:arg2]\n    result = [k for k, v in d.items() if v in k_values]\n    return result']",10000,0.13012099987827241,0.134032420986332,0.14232420013286173,N/A
p3_find_n_smallest_number,prompt_4,44,"['def funcImp(arg1, arg2):\n    d = {i: arg1[i] for i in range(len(arg1))}\n    k_values = sorted(d.values())[:arg2]\n    result = [k for k, v in d.items() if v in k_values]\n    return result']",100000,1.881967900088057,1.9244225689978338,1.977554599987343,N/A
p3_find_n_smallest_number,prompt_4,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict.setdefault(n, []).append(i)\n    sorted_arr = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.extend(index_dict[sorted_arr[i]])\n    return k_smallest_indexes']",1000,0.008570800069719553,0.00914961600676179,0.010186100145801902,N/A
p3_find_n_smallest_number,prompt_4,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict.setdefault(n, []).append(i)\n    sorted_arr = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.extend(index_dict[sorted_arr[i]])\n    return k_smallest_indexes']",10000,0.1382406000047922,0.14233074299059809,0.15863560000434518,N/A
p3_find_n_smallest_number,prompt_4,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict.setdefault(n, []).append(i)\n    sorted_arr = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.extend(index_dict[sorted_arr[i]])\n    return k_smallest_indexes']",100000,2.264359900029376,2.3182055210019463,2.3888515001162887,N/A
p3_find_n_smallest_number,prompt_4,46,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(sorted_indices)']",1000,0.0069951999466866255,0.007374122007749975,0.007760999957099557,N/A
p3_find_n_smallest_number,prompt_4,46,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(sorted_indices)']",10000,0.11073040007613599,0.11343360199360177,0.12335949996486306,N/A
p3_find_n_smallest_number,prompt_4,46,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(sorted_indices)']",100000,1.6104328001383692,1.6416609180020167,1.7357864999212325,N/A
p3_find_n_smallest_number,prompt_4,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n or arg2 == 0:\n        return []\n    dict1 = {}\n    for i in range(n):\n        dict1[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for j in range(arg2):\n        result.append(dict1[arg1[j]])\n    return result']",1000,0.002765699988231063,0.0030641679954715073,0.004878199892118573,N/A
p3_find_n_smallest_number,prompt_4,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n or arg2 == 0:\n        return []\n    dict1 = {}\n    for i in range(n):\n        dict1[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for j in range(arg2):\n        result.append(dict1[arg1[j]])\n    return result']",10000,0.027733399998396635,0.028881475990638138,0.031820699805393815,N/A
p3_find_n_smallest_number,prompt_4,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n or arg2 == 0:\n        return []\n    dict1 = {}\n    for i in range(n):\n        dict1[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for j in range(arg2):\n        result.append(dict1[arg1[j]])\n    return result']",100000,0.6338043001014739,0.6676851929933764,0.7050185999833047,N/A
p3_find_n_smallest_number,prompt_4,48,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_index = partition(arr, l, r)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, l, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            indexes.append(i)\n            if len(indexes) == k:\n                break\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,48,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_index = partition(arr, l, r)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, l, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            indexes.append(i)\n            if len(indexes) == k:\n                break\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,48,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_index = partition(arr, l, r)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, l, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            indexes.append(i)\n            if len(indexes) == k:\n                break\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,49,"['from random import randint\n\ndef partition(arr, left, right):\n    pivot_index = randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[right] = (arr[right], arr[store_index])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.007214399985969067,0.008053178996779025,0.009312600130215287,N/A
p3_find_n_smallest_number,prompt_4,49,"['from random import randint\n\ndef partition(arr, left, right):\n    pivot_index = randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[right] = (arr[right], arr[store_index])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.0703366999514401,0.07866658298531547,0.09725749981589615,N/A
p3_find_n_smallest_number,prompt_4,49,"['from random import randint\n\ndef partition(arr, left, right):\n    pivot_index = randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[right] = (arr[right], arr[store_index])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",100000,0.8723659999668598,0.9569109590002336,1.0552413000259548,N/A
p3_find_n_smallest_number,prompt_4,50,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [index for value, index in sorted(heap)]']",1000,0.009450900135561824,0.009845964005216956,0.011088799918070436,N/A
p3_find_n_smallest_number,prompt_4,50,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [index for value, index in sorted(heap)]']",10000,0.07038690010085702,0.07199030298739671,0.07418100000359118,N/A
p3_find_n_smallest_number,prompt_4,50,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [index for value, index in sorted(heap)]']",100000,1.1279263000469655,1.1449394490011036,1.2115704000461847,N/A
p3_find_n_smallest_number,prompt_4,51,"['def funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    result = [t[0] for t in sorted_list[:arg2]]\n    return result']",1000,0.00853120000101626,0.00878507299348712,0.009873100090771914,N/A
p3_find_n_smallest_number,prompt_4,51,"['def funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    result = [t[0] for t in sorted_list[:arg2]]\n    return result']",10000,0.13751389994286,0.14512341300724074,0.14999569999054074,N/A
p3_find_n_smallest_number,prompt_4,51,"['def funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    result = [t[0] for t in sorted_list[:arg2]]\n    return result']",100000,2.1430764999240637,2.208297455019783,2.3261080000083894,N/A
p3_find_n_smallest_number,prompt_4,52,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    k_smallest = list(sorted_dict.items())[:arg2]\n    k_smallest_sorted = sorted(k_smallest, key=lambda x: x[0])\n    indexes = [tup[0] for tup in k_smallest_sorted]\n    return indexes']",1000,0.013653600122779608,0.014474930001888424,0.020858400035649538,N/A
p3_find_n_smallest_number,prompt_4,52,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    k_smallest = list(sorted_dict.items())[:arg2]\n    k_smallest_sorted = sorted(k_smallest, key=lambda x: x[0])\n    indexes = [tup[0] for tup in k_smallest_sorted]\n    return indexes']",10000,0.21124039986170828,0.22339630499947816,0.23819539998658001,N/A
p3_find_n_smallest_number,prompt_4,52,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    k_smallest = list(sorted_dict.items())[:arg2]\n    k_smallest_sorted = sorted(k_smallest, key=lambda x: x[0])\n    indexes = [tup[0] for tup in k_smallest_sorted]\n    return indexes']",100000,4.058277900097892,4.181916246030014,4.389003599993885,N/A
p3_find_n_smallest_number,prompt_4,53,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.010047500021755695,0.010614391996059567,0.011747899930924177,N/A
p3_find_n_smallest_number,prompt_4,53,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.16026560007594526,0.16617587798973546,0.17446589982137084,N/A
p3_find_n_smallest_number,prompt_4,53,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.595897499937564,2.6926728329923937,2.824515499873087,N/A
p3_find_n_smallest_number,prompt_4,54,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(index_dict[num])\n    return indexes']",1000,0.005822600098326802,0.006059024001006037,0.007293700007721782,N/A
p3_find_n_smallest_number,prompt_4,54,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(index_dict[num])\n    return indexes']",10000,0.10775920003652573,0.10943323398940265,0.11579370009712875,N/A
p3_find_n_smallest_number,prompt_4,54,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(index_dict[num])\n    return indexes']",100000,1.6465152001474053,1.6808196260081605,1.7479778998531401,N/A
p3_find_n_smallest_number,prompt_4,55,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes a list of integers ""arg1"" and an integer ""arg2"" as input,\n    and returns a list of the first ""arg2"" smallest elements in ""arg1"".\n    """"""\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n\n    def quicksort(arr, left, right, k):\n        if left <= right:\n            pivot_index = partition(arr, left, right)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda i: arr[i])\n            if pivot_index > k - 1:\n                return quicksort(arr, left, pivot_index - 1, k)\n            else:\n                return quicksort(arr, pivot_index + 1, right, k)\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,55,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes a list of integers ""arg1"" and an integer ""arg2"" as input,\n    and returns a list of the first ""arg2"" smallest elements in ""arg1"".\n    """"""\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n\n    def quicksort(arr, left, right, k):\n        if left <= right:\n            pivot_index = partition(arr, left, right)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda i: arr[i])\n            if pivot_index > k - 1:\n                return quicksort(arr, left, pivot_index - 1, k)\n            else:\n                return quicksort(arr, pivot_index + 1, right, k)\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,55,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes a list of integers ""arg1"" and an integer ""arg2"" as input,\n    and returns a list of the first ""arg2"" smallest elements in ""arg1"".\n    """"""\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n\n    def quicksort(arr, left, right, k):\n        if left <= right:\n            pivot_index = partition(arr, left, right)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda i: arr[i])\n            if pivot_index > k - 1:\n                return quicksort(arr, left, pivot_index - 1, k)\n            else:\n                return quicksort(arr, pivot_index + 1, right, k)\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [tup[1] for tup in sorted(heap)]']",1000,0.00341400015167892,0.0036059449915774168,0.0039963999297469854,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [tup[1] for tup in sorted(heap)]']",10000,0.032402200158685446,0.03374266898725182,0.03633520007133484,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [tup[1] for tup in sorted(heap)]']",100000,0.3262831000611186,0.3320689329947345,0.3492597001604736,N/A
p3_find_n_smallest_number,prompt_4,57,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: list of integers\n    :param arg2: integer - k value\n    :return: list of indexes of the k smallest numbers\n    """"""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heap.append((num, i))\n            if i == arg2 - 1:\n                heap = sorted(heap, reverse=True)\n        elif num < heap[0][0]:\n            heap[0] = (num, i)\n            heap = sorted(heap, reverse=True)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(heap[i][1])\n    return indexes']",1000,0.003248599823564291,0.003417435004375875,0.004137000069022179,N/A
p3_find_n_smallest_number,prompt_4,57,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: list of integers\n    :param arg2: integer - k value\n    :return: list of indexes of the k smallest numbers\n    """"""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heap.append((num, i))\n            if i == arg2 - 1:\n                heap = sorted(heap, reverse=True)\n        elif num < heap[0][0]:\n            heap[0] = (num, i)\n            heap = sorted(heap, reverse=True)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(heap[i][1])\n    return indexes']",10000,0.0305806000251323,0.03150633901823312,0.032892700051888824,N/A
p3_find_n_smallest_number,prompt_4,57,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: list of integers\n    :param arg2: integer - k value\n    :return: list of indexes of the k smallest numbers\n    """"""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heap.append((num, i))\n            if i == arg2 - 1:\n                heap = sorted(heap, reverse=True)\n        elif num < heap[0][0]:\n            heap[0] = (num, i)\n            heap = sorted(heap, reverse=True)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(heap[i][1])\n    return indexes']",100000,0.30648350017145276,0.3124071120051667,0.32576019992120564,N/A
p3_find_n_smallest_number,prompt_4,58,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return index_list']",1000,0.0070222001522779465,0.007434728997759521,0.00869280006736517,N/A
p3_find_n_smallest_number,prompt_4,58,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return index_list']",10000,0.11391569999977946,0.11617691101972014,0.13161240005865693,N/A
p3_find_n_smallest_number,prompt_4,58,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return index_list']",100000,1.61282779998146,1.6509051170013844,1.7259712000377476,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, n in enumerate(arg1):\n        if i < k:\n            heap.append((-n, i))\n            if i == k - 1:\n                heapq.heapify(heap)\n        elif n < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-n, i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",1000,0.003508599940687418,0.0037363080214709043,0.0038954000920057297,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, n in enumerate(arg1):\n        if i < k:\n            heap.append((-n, i))\n            if i == k - 1:\n                heapq.heapify(heap)\n        elif n < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-n, i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",10000,0.03481380012817681,0.03562468101037666,0.040252799866721034,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, n in enumerate(arg1):\n        if i < k:\n            heap.append((-n, i))\n            if i == k - 1:\n                heapq.heapify(heap)\n        elif n < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-n, i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",100000,0.33958909986540675,0.3459208539943211,0.3700230000540614,N/A
p3_find_n_smallest_number,prompt_4,60,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heap = sorted(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heap[-1] = i\n            heap = sorted(heap)\n    indexes = [arg1.index(elem) for elem in heap]\n    return indexes']",1000,0.002455399837344885,0.0025061449944041667,0.002649199916049838,N/A
p3_find_n_smallest_number,prompt_4,60,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heap = sorted(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heap[-1] = i\n            heap = sorted(heap)\n    indexes = [arg1.index(elem) for elem in heap]\n    return indexes']",10000,0.026522800093516707,0.02722385501721874,0.030266699846833944,N/A
p3_find_n_smallest_number,prompt_4,60,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heap = sorted(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heap[-1] = i\n            heap = sorted(heap)\n    indexes = [arg1.index(elem) for elem in heap]\n    return indexes']",100000,0.3229892000090331,0.3369694110075943,0.3653229000046849,N/A
p3_find_n_smallest_number,prompt_4,61,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is greater than the length of array arg1'\n    dict1 = {}\n    for i in range(n):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda item: item[1])\n    smallest_k = sorted_dict[:arg2]\n    smallest_k_indices = [x[0] for x in smallest_k]\n    return smallest_k_indices""]",1000,0.010263500036671758,0.010623218019027263,0.011816499987617135,N/A
p3_find_n_smallest_number,prompt_4,61,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is greater than the length of array arg1'\n    dict1 = {}\n    for i in range(n):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda item: item[1])\n    smallest_k = sorted_dict[:arg2]\n    smallest_k_indices = [x[0] for x in smallest_k]\n    return smallest_k_indices""]",10000,0.1594851000700146,0.168531323003117,0.1912587999831885,N/A
p3_find_n_smallest_number,prompt_4,61,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is greater than the length of array arg1'\n    dict1 = {}\n    for i in range(n):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda item: item[1])\n    smallest_k = sorted_dict[:arg2]\n    smallest_k_indices = [x[0] for x in smallest_k]\n    return smallest_k_indices""]",100000,2.6363973000552505,2.694292984986678,2.7942920001223683,N/A
p3_find_n_smallest_number,prompt_4,62,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    return [arg1.index(sorted_arr[i]) for i in range(arg2)]']",1000,0.0033672000281512737,0.003518503999803215,0.0038920999504625797,N/A
p3_find_n_smallest_number,prompt_4,62,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    return [arg1.index(sorted_arr[i]) for i in range(arg2)]']",10000,0.08432960021309555,0.0863994170143269,0.0922250000294298,N/A
p3_find_n_smallest_number,prompt_4,62,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    return [arg1.index(sorted_arr[i]) for i in range(arg2)]']",100000,1.2124179999809712,1.232342474986799,1.2713518999516964,N/A
p3_find_n_smallest_number,prompt_4,63,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(num_dict[num])\n    return sorted(result)[:arg2]']",1000,0.00644939998164773,0.0067195659992285075,0.008128900080919266,N/A
p3_find_n_smallest_number,prompt_4,63,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(num_dict[num])\n    return sorted(result)[:arg2]']",10000,0.07562900008633733,0.07790656100492925,0.08522809995338321,N/A
p3_find_n_smallest_number,prompt_4,63,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(num_dict[num])\n    return sorted(result)[:arg2]']",100000,1.7200684000272304,1.7594746649963782,1.8215240000281483,N/A
p3_find_n_smallest_number,prompt_4,64,"['def funcImp(arg1, arg2):\n\n    def select(arr, k):\n        if len(arr) == 1:\n            return 0\n        pivot = arr[-1]\n        i, j = (0, len(arr) - 1)\n        while i < j:\n            if arr[i] < pivot:\n                i += 1\n            else:\n                arr[i], arr[j - 1], arr[j] = (arr[j - 1], arr[j], arr[i])\n                j -= 1\n        if arr[j] > pivot:\n            j -= 1\n        arr[j], arr[-1] = (arr[-1], arr[j])\n        if k == j:\n            return j\n        elif k < j:\n            return select(arr[:j], k)\n        else:\n            return j + 1 + select(arr[j + 1:], k - j - 1)\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",1000,0.008490300038829446,0.00883963299682364,0.014943599933758378,N/A
p3_find_n_smallest_number,prompt_4,64,"['def funcImp(arg1, arg2):\n\n    def select(arr, k):\n        if len(arr) == 1:\n            return 0\n        pivot = arr[-1]\n        i, j = (0, len(arr) - 1)\n        while i < j:\n            if arr[i] < pivot:\n                i += 1\n            else:\n                arr[i], arr[j - 1], arr[j] = (arr[j - 1], arr[j], arr[i])\n                j -= 1\n        if arr[j] > pivot:\n            j -= 1\n        arr[j], arr[-1] = (arr[-1], arr[j])\n        if k == j:\n            return j\n        elif k < j:\n            return select(arr[:j], k)\n        else:\n            return j + 1 + select(arr[j + 1:], k - j - 1)\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",10000,0.13784590014256537,0.14288433100562542,0.1500438000075519,N/A
p3_find_n_smallest_number,prompt_4,64,"['def funcImp(arg1, arg2):\n\n    def select(arr, k):\n        if len(arr) == 1:\n            return 0\n        pivot = arr[-1]\n        i, j = (0, len(arr) - 1)\n        while i < j:\n            if arr[i] < pivot:\n                i += 1\n            else:\n                arr[i], arr[j - 1], arr[j] = (arr[j - 1], arr[j], arr[i])\n                j -= 1\n        if arr[j] > pivot:\n            j -= 1\n        arr[j], arr[-1] = (arr[-1], arr[j])\n        if k == j:\n            return j\n        elif k < j:\n            return select(arr[:j], k)\n        else:\n            return j + 1 + select(arr[j + 1:], k - j - 1)\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",100000,2.1117767998948693,2.153263388008345,2.237934999866411,N/A
p3_find_n_smallest_number,prompt_4,65,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, x in enumerate(arg1):\n        index_dict[i] = x\n    sorted_dict = sorted(index_dict.items(), key=lambda item: item[1])\n    result = [(i, val) for i, val in sorted_dict[:arg2]]\n    result = sorted(result, key=lambda item: item[0])\n    return result']",1000,0.010350900003686547,0.010865086996927857,0.013113499851897359,N/A
p3_find_n_smallest_number,prompt_4,65,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, x in enumerate(arg1):\n        index_dict[i] = x\n    sorted_dict = sorted(index_dict.items(), key=lambda item: item[1])\n    result = [(i, val) for i, val in sorted_dict[:arg2]]\n    result = sorted(result, key=lambda item: item[0])\n    return result']",10000,0.16022420022636652,0.1696453140093945,0.17710620001889765,N/A
p3_find_n_smallest_number,prompt_4,65,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, x in enumerate(arg1):\n        index_dict[i] = x\n    sorted_dict = sorted(index_dict.items(), key=lambda item: item[1])\n    result = [(i, val) for i, val in sorted_dict[:arg2]]\n    result = sorted(result, key=lambda item: item[0])\n    return result']",100000,2.6702632000669837,2.720883921990171,2.7958440999500453,N/A
p3_find_n_smallest_number,prompt_4,66,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(indices.keys())\n    smallest_indices = []\n    for num in sorted_nums:\n        smallest_indices += indices[num]\n        if len(smallest_indices) >= arg2:\n            break\n    return smallest_indices[:arg2]']",1000,0.008542699972167611,0.00901282899081707,0.011581699829548597,N/A
p3_find_n_smallest_number,prompt_4,66,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(indices.keys())\n    smallest_indices = []\n    for num in sorted_nums:\n        smallest_indices += indices[num]\n        if len(smallest_indices) >= arg2:\n            break\n    return smallest_indices[:arg2]']",10000,0.13740119989961386,0.14034262199886144,0.14710130007006228,N/A
p3_find_n_smallest_number,prompt_4,66,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(indices.keys())\n    smallest_indices = []\n    for num in sorted_nums:\n        smallest_indices += indices[num]\n        if len(smallest_indices) >= arg2:\n            break\n    return smallest_indices[:arg2]']",100000,2.2001116001047194,2.2499355749972163,2.2960887998342514,N/A
p3_find_n_smallest_number,prompt_4,67,"['def funcImp(arg1, arg2):\n    index_dict = dict(zip(range(len(arg1)), arg1))\n    k_smallest = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in k_smallest])']",1000,0.009277099976316094,0.009693579990416765,0.01041140011511743,N/A
p3_find_n_smallest_number,prompt_4,67,"['def funcImp(arg1, arg2):\n    index_dict = dict(zip(range(len(arg1)), arg1))\n    k_smallest = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in k_smallest])']",10000,0.14919609995558858,0.15763927198946476,0.16898189997300506,N/A
p3_find_n_smallest_number,prompt_4,67,"['def funcImp(arg1, arg2):\n    index_dict = dict(zip(range(len(arg1)), arg1))\n    k_smallest = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in k_smallest])']",100000,2.4614132000133395,2.539729834005702,2.6954888999462128,N/A
p3_find_n_smallest_number,prompt_4,68,"['def funcImp(arg1, arg2):\n    indices = []\n    for i, num in enumerate(arg1):\n        if len(indices) < arg2:\n            indices.append(i)\n        else:\n            largest_index = indices[arg2 - 1]\n            if num < arg1[largest_index]:\n                indices[arg2 - 1] = i\n                for j in reversed(range(arg2 - 1)):\n                    if arg1[indices[j + 1]] < arg1[indices[j]]:\n                        indices[j], indices[j + 1] = (indices[j + 1], indices[j])\n                    else:\n                        break\n    return indices']",1000,0.004810099955648184,0.005057107985485345,0.005517400102689862,N/A
p3_find_n_smallest_number,prompt_4,68,"['def funcImp(arg1, arg2):\n    indices = []\n    for i, num in enumerate(arg1):\n        if len(indices) < arg2:\n            indices.append(i)\n        else:\n            largest_index = indices[arg2 - 1]\n            if num < arg1[largest_index]:\n                indices[arg2 - 1] = i\n                for j in reversed(range(arg2 - 1)):\n                    if arg1[indices[j + 1]] < arg1[indices[j]]:\n                        indices[j], indices[j + 1] = (indices[j + 1], indices[j])\n                    else:\n                        break\n    return indices']",10000,0.04348629992455244,0.045429357995744796,0.051139699993655086,N/A
p3_find_n_smallest_number,prompt_4,68,"['def funcImp(arg1, arg2):\n    indices = []\n    for i, num in enumerate(arg1):\n        if len(indices) < arg2:\n            indices.append(i)\n        else:\n            largest_index = indices[arg2 - 1]\n            if num < arg1[largest_index]:\n                indices[arg2 - 1] = i\n                for j in reversed(range(arg2 - 1)):\n                    if arg1[indices[j + 1]] < arg1[indices[j]]:\n                        indices[j], indices[j + 1] = (indices[j + 1], indices[j])\n                    else:\n                        break\n    return indices']",100000,0.43640220002271235,0.44710019499994813,0.47586370003409684,N/A
p3_find_n_smallest_number,prompt_4,69,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[i] = num\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    index_list = [i for i, v in sorted_dict]\n    return index_list']",1000,0.010067599825561047,0.010679223996121437,0.013404199853539467,N/A
p3_find_n_smallest_number,prompt_4,69,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[i] = num\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    index_list = [i for i, v in sorted_dict]\n    return index_list']",10000,0.15695129986852407,0.16697727001504972,0.17960819997824728,N/A
p3_find_n_smallest_number,prompt_4,69,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[i] = num\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    index_list = [i for i, v in sorted_dict]\n    return index_list']",100000,2.617583000101149,2.708983496008441,2.8206674000248313,N/A
p3_find_n_smallest_number,prompt_4,70,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    idx = []\n    if k > len(arg1):\n        return idx\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest:\n            idx.append(i)\n    return idx[:k]']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,70,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    idx = []\n    if k > len(arg1):\n        return idx\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest:\n            idx.append(i)\n    return idx[:k]']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,70,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    idx = []\n    if k > len(arg1):\n        return idx\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest:\n            idx.append(i)\n    return idx[:k]']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_arr = list(range(len(arg1)))\n    index_arr.sort(key=lambda x: arg1[x])\n    return index_arr[:k]']",1000,0.006995300063863397,0.007416942010167986,0.009620300028473139,N/A
p3_find_n_smallest_number,prompt_4,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_arr = list(range(len(arg1)))\n    index_arr.sort(key=lambda x: arg1[x])\n    return index_arr[:k]']",10000,0.11142429988831282,0.11576317899394781,0.12485040002502501,N/A
p3_find_n_smallest_number,prompt_4,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_arr = list(range(len(arg1)))\n    index_arr.sort(key=lambda x: arg1[x])\n    return index_arr[:k]']",100000,1.60220060008578,1.645538592999801,1.7911404001060873,N/A
p3_find_n_smallest_number,prompt_4,72,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[arg2 - 1]\n    k_smallest_indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",1000,0.0033611999824643135,0.003609851992223412,0.003917499911040068,N/A
p3_find_n_smallest_number,prompt_4,72,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[arg2 - 1]\n    k_smallest_indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",10000,0.08648600010201335,0.08947360001504422,0.09391549997963011,N/A
p3_find_n_smallest_number,prompt_4,72,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[arg2 - 1]\n    k_smallest_indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",100000,1.2185162000823766,1.2552361240098253,1.2852630000561476,N/A
p3_find_n_smallest_number,prompt_4,73,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",1000,0.03393849986605346,0.035306287002749744,0.03902100003324449,N/A
p3_find_n_smallest_number,prompt_4,73,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",10000,0.42396720009855926,0.43266189200105143,0.4477300001308322,N/A
p3_find_n_smallest_number,prompt_4,73,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",100000,5.087475399952382,5.155329373988788,5.411497300025076,N/A
p3_find_n_smallest_number,prompt_4,74,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_array:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.008383899927139282,0.008981657000258565,0.010929899988695979,N/A
p3_find_n_smallest_number,prompt_4,74,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_array:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.1360769998282194,0.14087611299008132,0.155556800076738,N/A
p3_find_n_smallest_number,prompt_4,74,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_array:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,2.189174799947068,2.2413694849982857,2.3064645000267774,N/A
p3_find_n_smallest_number,prompt_4,75,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Value of k cannot be greater than length of the array'\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",1000,0.006002799840644002,0.006371178987901658,0.007615499896928668,N/A
p3_find_n_smallest_number,prompt_4,75,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Value of k cannot be greater than length of the array'\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",10000,0.10840849997475743,0.11111732500372455,0.11836840002797544,N/A
p3_find_n_smallest_number,prompt_4,75,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Value of k cannot be greater than length of the array'\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",100000,1.4200128999073058,1.4470027599972672,1.502931599970907,N/A
p3_find_n_smallest_number,prompt_4,76,"[""import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    swap_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[swap_index] = (arr[swap_index], arr[i])\n            swap_index += 1\n    arr[right], arr[swap_index] = (arr[swap_index], arr[right])\n    return swap_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return 'Error: k is larger than the length of the array.'\n    elif k == len(arr):\n        return list(range(len(arr)))\n    result = []\n    for i in range(k):\n        index = quickselect(arr, 0, len(arr) - 1, i)\n        result.append(index)\n    return sorted(result)""]",1000,0.029160700039938092,0.03203100400278345,0.04215570003725588,N/A
p3_find_n_smallest_number,prompt_4,76,"[""import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    swap_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[swap_index] = (arr[swap_index], arr[i])\n            swap_index += 1\n    arr[right], arr[swap_index] = (arr[swap_index], arr[right])\n    return swap_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return 'Error: k is larger than the length of the array.'\n    elif k == len(arr):\n        return list(range(len(arr)))\n    result = []\n    for i in range(k):\n        index = quickselect(arr, 0, len(arr) - 1, i)\n        result.append(index)\n    return sorted(result)""]",10000,0.2898490000516176,0.3129644190031104,0.3436888998840004,N/A
p3_find_n_smallest_number,prompt_4,76,"[""import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    swap_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[swap_index] = (arr[swap_index], arr[i])\n            swap_index += 1\n    arr[right], arr[swap_index] = (arr[swap_index], arr[right])\n    return swap_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return 'Error: k is larger than the length of the array.'\n    elif k == len(arr):\n        return list(range(len(arr)))\n    result = []\n    for i in range(k):\n        index = quickselect(arr, 0, len(arr) - 1, i)\n        result.append(index)\n    return sorted(result)""]",100000,3.579698999878019,3.7920767099852672,4.01367780007422,N/A
p3_find_n_smallest_number,prompt_4,77,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    sorted_nums = sorted(set(arg1))\n    indexes = []\n    for num in sorted_nums[:arg2]:\n        indexes.extend(index_dict[num][:arg2 - len(indexes)])\n    return indexes']",1000,0.006310499971732497,0.006684221005998552,0.009626499842852354,N/A
p3_find_n_smallest_number,prompt_4,77,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    sorted_nums = sorted(set(arg1))\n    indexes = []\n    for num in sorted_nums[:arg2]:\n        indexes.extend(index_dict[num][:arg2 - len(indexes)])\n    return indexes']",10000,0.07382509997114539,0.0762801010068506,0.0789964001160115,N/A
p3_find_n_smallest_number,prompt_4,77,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    sorted_nums = sorted(set(arg1))\n    indexes = []\n    for num in sorted_nums[:arg2]:\n        indexes.extend(index_dict[num][:arg2 - len(indexes)])\n    return indexes']",100000,1.5738707000855356,1.6266173680010252,1.6740779001265764,N/A
p3_find_n_smallest_number,prompt_4,78,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while True:\n        pivotIndex = partition(arr, low, high)\n        if pivotIndex == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivotIndex > k - 1:\n            high = pivotIndex - 1\n        else:\n            low = pivotIndex + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",1000,2.033749300055206,2.1570039449981415,2.2213447000831366,N/A
p3_find_n_smallest_number,prompt_4,78,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while True:\n        pivotIndex = partition(arr, low, high)\n        if pivotIndex == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivotIndex > k - 1:\n            high = pivotIndex - 1\n        else:\n            low = pivotIndex + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_4,78,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while True:\n        pivotIndex = partition(arr, low, high)\n        if pivotIndex == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivotIndex > k - 1:\n            high = pivotIndex - 1\n        else:\n            low = pivotIndex + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_4,79,"['def funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,79,"['def funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,79,"['def funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in heap:\n        result[arg1.index(i)] = i\n    return result""]",1000,0.006074599921703339,0.006237031994387508,0.006650600116699934,N/A
p3_find_n_smallest_number,prompt_4,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in heap:\n        result[arg1.index(i)] = i\n    return result""]",10000,0.06604399997740984,0.06752352400217206,0.0742865998763591,N/A
p3_find_n_smallest_number,prompt_4,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in heap:\n        result[arg1.index(i)] = i\n    return result""]",100000,0.6392103000544012,0.6490344489971176,0.6765912000555545,N/A
p3_find_n_smallest_number,prompt_4,81,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",1000,0.003251400077715516,0.0035197689896449445,0.0049450998194515705,N/A
p3_find_n_smallest_number,prompt_4,81,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",10000,0.08486899989657104,0.08644936098251492,0.09829719993285835,N/A
p3_find_n_smallest_number,prompt_4,81,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",100000,1.210802000015974,1.2297498589963651,1.2584361999761313,N/A
p3_find_n_smallest_number,prompt_4,82,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",1000,0.005689600016921759,0.006052885986864567,0.00666579999960959,N/A
p3_find_n_smallest_number,prompt_4,82,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",10000,0.10681209992617369,0.10893095400184392,0.11568660009652376,N/A
p3_find_n_smallest_number,prompt_4,82,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",100000,1.6291579001117498,1.6658859079959802,1.7090421998873353,N/A
p3_find_n_smallest_number,prompt_4,83,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return low\n    pivot_idx = partition(arr, low, high)\n    if k == pivot_idx:\n        return pivot_idx\n    elif k < pivot_idx:\n        return quickselect(arr, low, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    k_smallest = []\n    for i in range(k):\n        idx = quickselect(arg1, i, len(arg1) - 1, i)\n        k_smallest.append(idx)\n    return k_smallest']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,83,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return low\n    pivot_idx = partition(arr, low, high)\n    if k == pivot_idx:\n        return pivot_idx\n    elif k < pivot_idx:\n        return quickselect(arr, low, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    k_smallest = []\n    for i in range(k):\n        idx = quickselect(arg1, i, len(arg1) - 1, i)\n        k_smallest.append(idx)\n    return k_smallest']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,83,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return low\n    pivot_idx = partition(arr, low, high)\n    if k == pivot_idx:\n        return pivot_idx\n    elif k < pivot_idx:\n        return quickselect(arr, low, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    k_smallest = []\n    for i in range(k):\n        idx = quickselect(arg1, i, len(arg1) - 1, i)\n        k_smallest.append(idx)\n    return k_smallest']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,84,"['import random\n\ndef partition(lst, pivot):\n    lst1, lst2, lst3 = ([], [], [])\n    for elem in lst:\n        if elem < pivot:\n            lst1.append(elem)\n        elif elem == pivot:\n            lst2.append(elem)\n        else:\n            lst3.append(elem)\n    return (lst1, lst2, lst3)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    lst1, lst2, lst3 = partition(lst, pivot)\n    if len(lst1) >= k:\n        return quickselect(lst1, k)\n    elif len(lst1) + len(lst2) >= k:\n        return pivot\n    else:\n        return quickselect(lst3, k - len(lst1) - len(lst2))\n\ndef funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(arg2):\n        kth_smallest = quickselect(arg1, i + 1)\n        k_smallest.append(arg1.index(kth_smallest))\n    return sorted(k_smallest)']",1000,0.02807780005969107,0.029691535998135805,0.03896080004051328,N/A
p3_find_n_smallest_number,prompt_4,84,"['import random\n\ndef partition(lst, pivot):\n    lst1, lst2, lst3 = ([], [], [])\n    for elem in lst:\n        if elem < pivot:\n            lst1.append(elem)\n        elif elem == pivot:\n            lst2.append(elem)\n        else:\n            lst3.append(elem)\n    return (lst1, lst2, lst3)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    lst1, lst2, lst3 = partition(lst, pivot)\n    if len(lst1) >= k:\n        return quickselect(lst1, k)\n    elif len(lst1) + len(lst2) >= k:\n        return pivot\n    else:\n        return quickselect(lst3, k - len(lst1) - len(lst2))\n\ndef funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(arg2):\n        kth_smallest = quickselect(arg1, i + 1)\n        k_smallest.append(arg1.index(kth_smallest))\n    return sorted(k_smallest)']",10000,0.2559307001065463,0.2640596160013229,0.2940980000421405,N/A
p3_find_n_smallest_number,prompt_4,84,"['import random\n\ndef partition(lst, pivot):\n    lst1, lst2, lst3 = ([], [], [])\n    for elem in lst:\n        if elem < pivot:\n            lst1.append(elem)\n        elif elem == pivot:\n            lst2.append(elem)\n        else:\n            lst3.append(elem)\n    return (lst1, lst2, lst3)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    lst1, lst2, lst3 = partition(lst, pivot)\n    if len(lst1) >= k:\n        return quickselect(lst1, k)\n    elif len(lst1) + len(lst2) >= k:\n        return pivot\n    else:\n        return quickselect(lst3, k - len(lst1) - len(lst2))\n\ndef funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(arg2):\n        kth_smallest = quickselect(arg1, i + 1)\n        k_smallest.append(arg1.index(kth_smallest))\n    return sorted(k_smallest)']",100000,2.7368080001324415,2.8524220669898206,2.9989907001145184,N/A
p3_find_n_smallest_number,prompt_4,85,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:k]']",1000,0.007096300134435296,0.007452602982521057,0.008001700043678284,N/A
p3_find_n_smallest_number,prompt_4,85,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:k]']",10000,0.11216599983163178,0.11432999399956316,0.12708200002089143,N/A
p3_find_n_smallest_number,prompt_4,85,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:k]']",100000,1.6087933001108468,1.6396725580003113,1.6838126999791712,N/A
p3_find_n_smallest_number,prompt_4,86,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    smallest_k = sorted(heap)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,86,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    smallest_k = sorted(heap)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,86,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    smallest_k = sorted(heap)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,87,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_val = float('inf')\n        min_index = -1\n        for j in range(len(arg1)):\n            if arg1[j] < min_val and j not in indices:\n                min_val = arg1[j]\n                min_index = j\n        indices.append(min_index)\n    return indices""]",1000,0.007861000020056963,0.008229120997712017,0.009848800022155046,N/A
p3_find_n_smallest_number,prompt_4,87,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_val = float('inf')\n        min_index = -1\n        for j in range(len(arg1)):\n            if arg1[j] < min_val and j not in indices:\n                min_val = arg1[j]\n                min_index = j\n        indices.append(min_index)\n    return indices""]",10000,0.07963709998875856,0.081598911001347,0.0853075000923127,N/A
p3_find_n_smallest_number,prompt_4,87,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_val = float('inf')\n        min_index = -1\n        for j in range(len(arg1)):\n            if arg1[j] < min_val and j not in indices:\n                min_val = arg1[j]\n                min_index = j\n        indices.append(min_index)\n    return indices""]",100000,0.8237071000039577,0.8368651700089685,0.888033099938184,N/A
p3_find_n_smallest_number,prompt_4,88,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if n <= k:\n        return list(range(n))\n    index_list = list(range(k))\n    for i in range(k, n):\n        max_index = max(range(k), key=lambda j: arg1[index_list[j]])\n        if arg1[i] < arg1[index_list[max_index]]:\n            index_list[max_index] = i\n    return sorted(index_list)']",1000,0.041709700133651495,0.04293838399695232,0.048150100046768785,N/A
p3_find_n_smallest_number,prompt_4,88,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if n <= k:\n        return list(range(n))\n    index_list = list(range(k))\n    for i in range(k, n):\n        max_index = max(range(k), key=lambda j: arg1[index_list[j]])\n        if arg1[i] < arg1[index_list[max_index]]:\n            index_list[max_index] = i\n    return sorted(index_list)']",10000,0.4190738000907004,0.4260672420077026,0.44286309997551143,N/A
p3_find_n_smallest_number,prompt_4,88,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if n <= k:\n        return list(range(n))\n    index_list = list(range(k))\n    for i in range(k, n):\n        max_index = max(range(k), key=lambda j: arg1[index_list[j]])\n        if arg1[i] < arg1[index_list[max_index]]:\n            index_list[max_index] = i\n    return sorted(index_list)']",100000,4.167034299811348,4.220541935986839,4.2721559999044985,N/A
p3_find_n_smallest_number,prompt_4,89,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_list = sorted(range(len(arg1)), key=lambda x: arg1[x])[:k]\n    return index_list']",1000,0.007140500005334616,0.007480582990683615,0.008981799939647317,N/A
p3_find_n_smallest_number,prompt_4,89,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_list = sorted(range(len(arg1)), key=lambda x: arg1[x])[:k]\n    return index_list']",10000,0.11132829985581338,0.1139058159920387,0.12269379990175366,N/A
p3_find_n_smallest_number,prompt_4,89,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_list = sorted(range(len(arg1)), key=lambda x: arg1[x])[:k]\n    return index_list']",100000,1.6089832000434399,1.6373005990078673,1.6956040998920798,N/A
p3_find_n_smallest_number,prompt_4,90,"['def funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            k_smallest.append((arg1[i], i))\n        elif arg1[i] < k_smallest[arg2 - 1][0]:\n            k_smallest[arg2 - 1] = (arg1[i], i)\n        k_smallest.sort()\n    return [i[1] for i in k_smallest[:arg2]]']",1000,0.0072206000331789255,0.007518944013863802,0.007918300107121468,N/A
p3_find_n_smallest_number,prompt_4,90,"['def funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            k_smallest.append((arg1[i], i))\n        elif arg1[i] < k_smallest[arg2 - 1][0]:\n            k_smallest[arg2 - 1] = (arg1[i], i)\n        k_smallest.sort()\n    return [i[1] for i in k_smallest[:arg2]]']",10000,0.07293889997527003,0.07484964500181376,0.081721399910748,N/A
p3_find_n_smallest_number,prompt_4,90,"['def funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            k_smallest.append((arg1[i], i))\n        elif arg1[i] < k_smallest[arg2 - 1][0]:\n            k_smallest[arg2 - 1] = (arg1[i], i)\n        k_smallest.sort()\n    return [i[1] for i in k_smallest[:arg2]]']",100000,0.7372868999373168,0.7515049239899964,0.790317399892956,N/A
p3_find_n_smallest_number,prompt_4,91,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.007091899868100882,0.007544705003965646,0.009251800132915378,N/A
p3_find_n_smallest_number,prompt_4,91,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.11114309984259307,0.11445707099279388,0.12563869985751808,N/A
p3_find_n_smallest_number,prompt_4,91,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.6131716999225318,1.6481718459865078,1.7120916999410838,N/A
p3_find_n_smallest_number,prompt_4,92,"['def funcImp(arg1, arg2):\n    indices = dict()\n    for i, x in enumerate(arg1):\n        indices[x] = i\n    k_smallest_indexes = []\n    for x in sorted(arg1)[:arg2]:\n        k_smallest_indexes.append(indices[x])\n    return k_smallest_indexes']",1000,0.00593110010959208,0.0062128009903244675,0.009143700124695897,N/A
p3_find_n_smallest_number,prompt_4,92,"['def funcImp(arg1, arg2):\n    indices = dict()\n    for i, x in enumerate(arg1):\n        indices[x] = i\n    k_smallest_indexes = []\n    for x in sorted(arg1)[:arg2]:\n        k_smallest_indexes.append(indices[x])\n    return k_smallest_indexes']",10000,0.10889599984511733,0.11086511100875214,0.11728799995034933,N/A
p3_find_n_smallest_number,prompt_4,92,"['def funcImp(arg1, arg2):\n    indices = dict()\n    for i, x in enumerate(arg1):\n        indices[x] = i\n    k_smallest_indexes = []\n    for x in sorted(arg1)[:arg2]:\n        k_smallest_indexes.append(indices[x])\n    return k_smallest_indexes']",100000,1.643611100036651,1.7203292760020121,1.7886594999581575,N/A
p3_find_n_smallest_number,prompt_4,93,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i in range(len(arg1)):\n        dict_nums[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    smallest_indexes = list(sorted_dict.keys())[:arg2]\n    return smallest_indexes']",1000,0.01279069995507598,0.013561257012188434,0.018159300088882446,N/A
p3_find_n_smallest_number,prompt_4,93,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i in range(len(arg1)):\n        dict_nums[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    smallest_indexes = list(sorted_dict.keys())[:arg2]\n    return smallest_indexes']",10000,0.19357519992627203,0.21221062400611118,0.2440496999770403,N/A
p3_find_n_smallest_number,prompt_4,93,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i in range(len(arg1)):\n        dict_nums[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    smallest_indexes = list(sorted_dict.keys())[:arg2]\n    return smallest_indexes']",100000,3.8878379999659956,3.9617516970052384,4.105900000082329,N/A
p3_find_n_smallest_number,prompt_4,94,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    n = len(arg1)\n    if k > n:\n        return 'Error: k is greater than the length of the array!'\n    indices = range(n)\n    arg1_with_indices = list(zip(arg1, indices))\n    arg1_with_indices.sort()\n    for i in range(k):\n        indexes.append(arg1_with_indices[i][1])\n    return indexes""]",1000,0.010514500085264444,0.010974181992933154,0.012567699886858463,N/A
p3_find_n_smallest_number,prompt_4,94,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    n = len(arg1)\n    if k > n:\n        return 'Error: k is greater than the length of the array!'\n    indices = range(n)\n    arg1_with_indices = list(zip(arg1, indices))\n    arg1_with_indices.sort()\n    for i in range(k):\n        indexes.append(arg1_with_indices[i][1])\n    return indexes""]",10000,0.16552969999611378,0.1714268320193514,0.1808734000660479,N/A
p3_find_n_smallest_number,prompt_4,94,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    n = len(arg1)\n    if k > n:\n        return 'Error: k is greater than the length of the array!'\n    indices = range(n)\n    arg1_with_indices = list(zip(arg1, indices))\n    arg1_with_indices.sort()\n    for i in range(k):\n        indexes.append(arg1_with_indices[i][1])\n    return indexes""]",100000,2.7216336999554187,2.785143735986203,2.9350020999554545,N/A
p3_find_n_smallest_number,prompt_4,95,"[""def funcImp(arr, k):\n    idxList = []\n    kSmallest = sorted(arr)[:k]\n    for num in kSmallest:\n        idx = arr.index(num)\n        idxList.append(idx)\n        arr[idx] = float('inf')\n    return idxList""]",1000,0.00033810012973845005,0.0005243379948660731,0.010030800011008978,N/A
p3_find_n_smallest_number,prompt_4,95,"[""def funcImp(arr, k):\n    idxList = []\n    kSmallest = sorted(arr)[:k]\n    for num in kSmallest:\n        idx = arr.index(num)\n        idxList.append(idx)\n        arr[idx] = float('inf')\n    return idxList""]",10000,0.0030841000843793154,0.024884791001677512,0.14166289987042546,N/A
p3_find_n_smallest_number,prompt_4,95,"[""def funcImp(arr, k):\n    idxList = []\n    kSmallest = sorted(arr)[:k]\n    for num in kSmallest:\n        idx = arr.index(num)\n        idxList.append(idx)\n        arr[idx] = float('inf')\n    return idxList""]",100000,1.6176704000681639,1.7597734099905937,1.842816999880597,N/A
p3_find_n_smallest_number,prompt_4,96,"['def funcImp(arg1, arg2):\n    indices = list(range(arg2))\n    indices.sort(key=lambda i: arg1[i])\n    for i in range(arg2, len(arg1)):\n        val = arg1[i]\n        if val < arg1[indices[-1]]:\n            pos = arg2 - 1\n            while pos > 0 and val < arg1[indices[pos - 1]]:\n                pos -= 1\n            for j in range(arg2 - 1, pos, -1):\n                indices[j] = indices[j - 1]\n            indices[pos] = i\n    return sorted(indices)']",1000,0.0032871998846530914,0.003423057997133583,0.00410750019364059,N/A
p3_find_n_smallest_number,prompt_4,96,"['def funcImp(arg1, arg2):\n    indices = list(range(arg2))\n    indices.sort(key=lambda i: arg1[i])\n    for i in range(arg2, len(arg1)):\n        val = arg1[i]\n        if val < arg1[indices[-1]]:\n            pos = arg2 - 1\n            while pos > 0 and val < arg1[indices[pos - 1]]:\n                pos -= 1\n            for j in range(arg2 - 1, pos, -1):\n                indices[j] = indices[j - 1]\n            indices[pos] = i\n    return sorted(indices)']",10000,0.028697599889710546,0.029288916981313376,0.03373629995621741,N/A
p3_find_n_smallest_number,prompt_4,96,"['def funcImp(arg1, arg2):\n    indices = list(range(arg2))\n    indices.sort(key=lambda i: arg1[i])\n    for i in range(arg2, len(arg1)):\n        val = arg1[i]\n        if val < arg1[indices[-1]]:\n            pos = arg2 - 1\n            while pos > 0 and val < arg1[indices[pos - 1]]:\n                pos -= 1\n            for j in range(arg2 - 1, pos, -1):\n                indices[j] = indices[j - 1]\n            indices[pos] = i\n    return sorted(indices)']",100000,0.2768301998730749,0.28174795700469984,0.29717370006255805,N/A
p3_find_n_smallest_number,prompt_4,97,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx = list(range(len(arg1)))\n    idx_k_smallest = sorted(idx, key=lambda i: arg1[i])[:arg2]\n    return idx_k_smallest']",1000,0.006772400112822652,0.007161036999896168,0.009002300212159753,N/A
p3_find_n_smallest_number,prompt_4,97,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx = list(range(len(arg1)))\n    idx_k_smallest = sorted(idx, key=lambda i: arg1[i])[:arg2]\n    return idx_k_smallest']",10000,0.11122650001198053,0.1140747969946824,0.1204226000700146,N/A
p3_find_n_smallest_number,prompt_4,97,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx = list(range(len(arg1)))\n    idx_k_smallest = sorted(idx, key=lambda i: arg1[i])[:arg2]\n    return idx_k_smallest']",100000,1.6072989001404494,1.6368187780119479,1.68417640007101,N/A
p3_find_n_smallest_number,prompt_4,98,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    unique_nums = sorted(set(arg1))\n    k_smallest_nums = unique_nums[:arg2]\n    result = []\n    for num in k_smallest_nums:\n        result += index_dict[num][:arg2 - len(result)]\n        if len(result) == arg2:\n            break\n    return result']",1000,0.006245100172236562,0.006527871002908796,0.006854099920019507,N/A
p3_find_n_smallest_number,prompt_4,98,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    unique_nums = sorted(set(arg1))\n    k_smallest_nums = unique_nums[:arg2]\n    result = []\n    for num in k_smallest_nums:\n        result += index_dict[num][:arg2 - len(result)]\n        if len(result) == arg2:\n            break\n    return result']",10000,0.07406200002878904,0.07652377298101783,0.0790901998989284,N/A
p3_find_n_smallest_number,prompt_4,98,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    unique_nums = sorted(set(arg1))\n    k_smallest_nums = unique_nums[:arg2]\n    result = []\n    for num in k_smallest_nums:\n        result += index_dict[num][:arg2 - len(result)]\n        if len(result) == arg2:\n            break\n    return result']",100000,1.5815922999754548,1.6300412150099874,1.6881374998483807,N/A
p3_find_n_smallest_number,prompt_4,99,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(set(arg1))\n    count = 0\n    index = 0\n    k_smallest_indexes = []\n    while count < arg2 and index < len(sorted_list):\n        current = sorted_list[index]\n        current_indexes = index_dict[current]\n        if count + len(current_indexes) > arg2:\n            k_smallest_indexes.extend(current_indexes[:arg2 - count])\n            count = arg2\n            break\n        else:\n            k_smallest_indexes.extend(current_indexes)\n            count += len(current_indexes)\n            index += 1\n    return k_smallest_indexes']",1000,0.006195300025865436,0.006612124009989202,0.00977399991825223,N/A
p3_find_n_smallest_number,prompt_4,99,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(set(arg1))\n    count = 0\n    index = 0\n    k_smallest_indexes = []\n    while count < arg2 and index < len(sorted_list):\n        current = sorted_list[index]\n        current_indexes = index_dict[current]\n        if count + len(current_indexes) > arg2:\n            k_smallest_indexes.extend(current_indexes[:arg2 - count])\n            count = arg2\n            break\n        else:\n            k_smallest_indexes.extend(current_indexes)\n            count += len(current_indexes)\n            index += 1\n    return k_smallest_indexes']",10000,0.07306899991817772,0.07626748198177666,0.08769680000841618,N/A
p3_find_n_smallest_number,prompt_4,99,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(set(arg1))\n    count = 0\n    index = 0\n    k_smallest_indexes = []\n    while count < arg2 and index < len(sorted_list):\n        current = sorted_list[index]\n        current_indexes = index_dict[current]\n        if count + len(current_indexes) > arg2:\n            k_smallest_indexes.extend(current_indexes[:arg2 - count])\n            count = arg2\n            break\n        else:\n            k_smallest_indexes.extend(current_indexes)\n            count += len(current_indexes)\n            index += 1\n    return k_smallest_indexes']",100000,1.5853319000452757,1.6366609680000692,1.7102642999961972,N/A
p3_find_n_smallest_number,prompt_4,100,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:k]']",1000,0.007162900175899267,0.007542616997379809,0.008292400045320392,N/A
p3_find_n_smallest_number,prompt_4,100,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:k]']",10000,0.1099624999333173,0.1135963839944452,0.12406439986079931,N/A
p3_find_n_smallest_number,prompt_4,100,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:k]']",100000,1.6103207999840379,1.650322560989298,1.7110327000264078,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",1000,0.002775099826976657,0.0029923089989461003,0.004819800145924091,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",10000,0.026240300154313445,0.0272884720005095,0.029550000093877316,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",100000,0.2609647000208497,0.26874113600235433,0.3084688000380993,N/A
p3_find_n_smallest_number,prompt_5,2,"['def funcImp(arg1, arg2):\n    arg1.sort()\n    k_smallest = arg1[:arg2]\n    indexes = {}\n    for i, elem in enumerate(arg1):\n        indexes[elem] = i\n    result = []\n    for elem in k_smallest:\n        if elem in k_smallest:\n            result.append(indexes[elem])\n    return result']",1000,0.0029925000853836536,0.003143066007178277,0.004996099974960089,N/A
p3_find_n_smallest_number,prompt_5,2,"['def funcImp(arg1, arg2):\n    arg1.sort()\n    k_smallest = arg1[:arg2]\n    indexes = {}\n    for i, elem in enumerate(arg1):\n        indexes[elem] = i\n    result = []\n    for elem in k_smallest:\n        if elem in k_smallest:\n            result.append(indexes[elem])\n    return result']",10000,0.03001399990171194,0.03111740499502048,0.03544340003281832,N/A
p3_find_n_smallest_number,prompt_5,2,"['def funcImp(arg1, arg2):\n    arg1.sort()\n    k_smallest = arg1[:arg2]\n    indexes = {}\n    for i, elem in enumerate(arg1):\n        indexes[elem] = i\n    result = []\n    for elem in k_smallest:\n        if elem in k_smallest:\n            result.append(indexes[elem])\n    return result']",100000,0.6862129999790341,0.741902129992377,0.7994482999201864,N/A
p3_find_n_smallest_number,prompt_5,3,"['import random\n\ndef partition(arr, left, right, k):\n    pivot_index = random.randint(left, right)\n    pivot_value = arr[pivot_index]\n    left_index = left\n    for i in range(left, right + 1):\n        if arr[i] < pivot_value:\n            arr[left_index], arr[i] = (arr[i], arr[left_index])\n            left_index += 1\n    right_index = left_index\n    for i in range(left_index, right + 1):\n        if arr[i] == pivot_value:\n            arr[right_index], arr[i] = (arr[i], arr[right_index])\n            right_index += 1\n    if k < left_index - left:\n        return partition(arr, left, left_index - 1, k)\n    elif k < right_index - left:\n        return [left + i for i in range(k)]\n    else:\n        return partition(arr, right_index, right, k - (right_index - left))\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        return partition(arg1, 0, len(arg1) - 1, arg2)']",1000,0.007362900068983436,0.008247469980269671,0.009732299949973822,N/A
p3_find_n_smallest_number,prompt_5,3,"['import random\n\ndef partition(arr, left, right, k):\n    pivot_index = random.randint(left, right)\n    pivot_value = arr[pivot_index]\n    left_index = left\n    for i in range(left, right + 1):\n        if arr[i] < pivot_value:\n            arr[left_index], arr[i] = (arr[i], arr[left_index])\n            left_index += 1\n    right_index = left_index\n    for i in range(left_index, right + 1):\n        if arr[i] == pivot_value:\n            arr[right_index], arr[i] = (arr[i], arr[right_index])\n            right_index += 1\n    if k < left_index - left:\n        return partition(arr, left, left_index - 1, k)\n    elif k < right_index - left:\n        return [left + i for i in range(k)]\n    else:\n        return partition(arr, right_index, right, k - (right_index - left))\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        return partition(arg1, 0, len(arg1) - 1, arg2)']",10000,0.07075100019574165,0.08068763099610805,0.0961905000731349,N/A
p3_find_n_smallest_number,prompt_5,3,"['import random\n\ndef partition(arr, left, right, k):\n    pivot_index = random.randint(left, right)\n    pivot_value = arr[pivot_index]\n    left_index = left\n    for i in range(left, right + 1):\n        if arr[i] < pivot_value:\n            arr[left_index], arr[i] = (arr[i], arr[left_index])\n            left_index += 1\n    right_index = left_index\n    for i in range(left_index, right + 1):\n        if arr[i] == pivot_value:\n            arr[right_index], arr[i] = (arr[i], arr[right_index])\n            right_index += 1\n    if k < left_index - left:\n        return partition(arr, left, left_index - 1, k)\n    elif k < right_index - left:\n        return [left + i for i in range(k)]\n    else:\n        return partition(arr, right_index, right, k - (right_index - left))\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        return partition(arg1, 0, len(arg1) - 1, arg2)']",100000,0.8877359998878092,0.9598970279749482,1.0555265999864787,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",1000,0.009915400063619018,0.010134646010119468,0.010628200136125088,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",10000,0.07327499985694885,0.07485900999046863,0.07671379996463656,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",100000,1.143043200019747,1.1717897520191036,1.2599964998662472,N/A
p3_find_n_smallest_number,prompt_5,5,"['def partition(arr, start, end, pivot_index):\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[end] = (arr[end], arr[pivot_index])\n    left = start\n    right = end - 1\n    while left <= right:\n        while left <= right and arr[left] <= pivot:\n            left += 1\n        while left <= right and arr[right] > pivot:\n            right -= 1\n        if left <= right:\n            arr[left], arr[right] = (arr[right], arr[left])\n            left += 1\n            right -= 1\n    arr[left], arr[end] = (arr[end], arr[left])\n    return left\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k <= 0:\n        return []\n    if len(arr) == 0 or k > len(arr):\n        return []\n    start = 0\n    end = len(arr) - 1\n    while True:\n        pivot_index = start\n        pivot_index = partition(arr, start, end, pivot_index)\n        if pivot_index == k - 1:\n            break\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1\n    res = []\n    for i in range(k):\n        res.append([arr[i], i])\n    return res']",1000,0.010118300095200539,0.010602833009324969,0.012232000008225441,N/A
p3_find_n_smallest_number,prompt_5,5,"['def partition(arr, start, end, pivot_index):\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[end] = (arr[end], arr[pivot_index])\n    left = start\n    right = end - 1\n    while left <= right:\n        while left <= right and arr[left] <= pivot:\n            left += 1\n        while left <= right and arr[right] > pivot:\n            right -= 1\n        if left <= right:\n            arr[left], arr[right] = (arr[right], arr[left])\n            left += 1\n            right -= 1\n    arr[left], arr[end] = (arr[end], arr[left])\n    return left\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k <= 0:\n        return []\n    if len(arr) == 0 or k > len(arr):\n        return []\n    start = 0\n    end = len(arr) - 1\n    while True:\n        pivot_index = start\n        pivot_index = partition(arr, start, end, pivot_index)\n        if pivot_index == k - 1:\n            break\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1\n    res = []\n    for i in range(k):\n        res.append([arr[i], i])\n    return res']",10000,0.10402899980545044,0.10767079799668863,0.11702309991233051,N/A
p3_find_n_smallest_number,prompt_5,5,"['def partition(arr, start, end, pivot_index):\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[end] = (arr[end], arr[pivot_index])\n    left = start\n    right = end - 1\n    while left <= right:\n        while left <= right and arr[left] <= pivot:\n            left += 1\n        while left <= right and arr[right] > pivot:\n            right -= 1\n        if left <= right:\n            arr[left], arr[right] = (arr[right], arr[left])\n            left += 1\n            right -= 1\n    arr[left], arr[end] = (arr[end], arr[left])\n    return left\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k <= 0:\n        return []\n    if len(arr) == 0 or k > len(arr):\n        return []\n    start = 0\n    end = len(arr) - 1\n    while True:\n        pivot_index = start\n        pivot_index = partition(arr, start, end, pivot_index)\n        if pivot_index == k - 1:\n            break\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1\n    res = []\n    for i in range(k):\n        res.append([arr[i], i])\n    return res']",100000,1.1202612000051886,1.1472047539800405,1.1910682001616806,N/A
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arr, k):\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] < heapq.nlargest(1, pq, reverse=True)[0]:\n            heapq.heappushpop(pq, arr[i])\n    indexes = {}\n    for i in range(k):\n        indexes[arr.index(pq[i])] = i\n    return indexes']",1000,0,0,0,	 exception: nlargest() got an unexpected keyword argument 'reverse'
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arr, k):\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] < heapq.nlargest(1, pq, reverse=True)[0]:\n            heapq.heappushpop(pq, arr[i])\n    indexes = {}\n    for i in range(k):\n        indexes[arr.index(pq[i])] = i\n    return indexes']",10000,0,0,0,	 exception: nlargest() got an unexpected keyword argument 'reverse'
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arr, k):\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] < heapq.nlargest(1, pq, reverse=True)[0]:\n            heapq.heappushpop(pq, arr[i])\n    indexes = {}\n    for i in range(k):\n        indexes[arr.index(pq[i])] = i\n    return indexes']",100000,0,0,0,	 exception: nlargest() got an unexpected keyword argument 'reverse'
p3_find_n_smallest_number,prompt_5,7,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        index_dict[sorted_list[i]] = arg1.index(sorted_list[i])\n    result_list = []\n    for key in index_dict.keys():\n        if len(result_list) == arg2:\n            break\n        result_list.append(index_dict[key])\n    return result_list']",1000,0.00337349995970726,0.003539438000880182,0.00432629999704659,N/A
p3_find_n_smallest_number,prompt_5,7,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        index_dict[sorted_list[i]] = arg1.index(sorted_list[i])\n    result_list = []\n    for key in index_dict.keys():\n        if len(result_list) == arg2:\n            break\n        result_list.append(index_dict[key])\n    return result_list']",10000,0.08273310004733503,0.08667294102022424,0.09701590007171035,N/A
p3_find_n_smallest_number,prompt_5,7,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        index_dict[sorted_list[i]] = arg1.index(sorted_list[i])\n    result_list = []\n    for key in index_dict.keys():\n        if len(result_list) == arg2:\n            break\n        result_list.append(index_dict[key])\n    return result_list']",100000,1.2122481998521835,1.2398478500079364,1.323682100046426,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for i, num in enumerate(arg1):\n        if num in heap:\n            result.append(i)\n    return result']",1000,0.007334700087085366,0.007708680997602642,0.008279900066554546,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for i, num in enumerate(arg1):\n        if num in heap:\n            result.append(i)\n    return result']",10000,0.07658999995328486,0.07845110098598525,0.08400579984299839,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for i, num in enumerate(arg1):\n        if num in heap:\n            result.append(i)\n    return result']",100000,0.7567636000458151,0.7760669780173339,0.8131323999259621,N/A
p3_find_n_smallest_number,prompt_5,9,"['def funcImp(arg1, k):\n    if len(arg1) < k:\n        return []\n    indices = [(index, value) for index, value in enumerate(arg1)]\n    indices = sorted(indices, key=lambda x: x[1])\n    smallest_indices = [index for index, value in indices[:k]]\n    return smallest_indices']",1000,0.009391400031745434,0.010016690003685652,0.011752699967473745,N/A
p3_find_n_smallest_number,prompt_5,9,"['def funcImp(arg1, k):\n    if len(arg1) < k:\n        return []\n    indices = [(index, value) for index, value in enumerate(arg1)]\n    indices = sorted(indices, key=lambda x: x[1])\n    smallest_indices = [index for index, value in indices[:k]]\n    return smallest_indices']",10000,0.14777819998562336,0.15649170397082343,0.1689307999331504,N/A
p3_find_n_smallest_number,prompt_5,9,"['def funcImp(arg1, k):\n    if len(arg1) < k:\n        return []\n    indices = [(index, value) for index, value in enumerate(arg1)]\n    indices = sorted(indices, key=lambda x: x[1])\n    smallest_indices = [index for index, value in indices[:k]]\n    return smallest_indices']",100000,2.3112183997873217,2.3763157099997625,2.549437299836427,N/A
p3_find_n_smallest_number,prompt_5,10,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, left, right, k):\n        if left == right:\n            return ([lst[left]], [left])\n        pivotIndex = partition(lst, left, right)\n        if k == pivotIndex - left + 1:\n            return (lst[left:pivotIndex + 1], list(range(left, pivotIndex + 1)))\n        elif k < pivotIndex - left + 1:\n            return quickselect(lst, left, pivotIndex - 1, k)\n        else:\n            return quickselect(lst, pivotIndex + 1, right, k - (pivotIndex - left + 1))\n\n    def partition(lst, left, right):\n        pivotIndex = (left + right) // 2\n        pivotValue = lst[pivotIndex]\n        lst[right], lst[pivotIndex] = (lst[pivotIndex], lst[right])\n        storeIndex = left\n        for i in range(left, right):\n            if lst[i] < pivotValue:\n                lst[i], lst[storeIndex] = (lst[storeIndex], lst[i])\n                storeIndex += 1\n        lst[right], lst[storeIndex] = (lst[storeIndex], lst[right])\n        return storeIndex\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",1000,0.005733600119128823,0.006009116994682699,0.007370600011199713,N/A
p3_find_n_smallest_number,prompt_5,10,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, left, right, k):\n        if left == right:\n            return ([lst[left]], [left])\n        pivotIndex = partition(lst, left, right)\n        if k == pivotIndex - left + 1:\n            return (lst[left:pivotIndex + 1], list(range(left, pivotIndex + 1)))\n        elif k < pivotIndex - left + 1:\n            return quickselect(lst, left, pivotIndex - 1, k)\n        else:\n            return quickselect(lst, pivotIndex + 1, right, k - (pivotIndex - left + 1))\n\n    def partition(lst, left, right):\n        pivotIndex = (left + right) // 2\n        pivotValue = lst[pivotIndex]\n        lst[right], lst[pivotIndex] = (lst[pivotIndex], lst[right])\n        storeIndex = left\n        for i in range(left, right):\n            if lst[i] < pivotValue:\n                lst[i], lst[storeIndex] = (lst[storeIndex], lst[i])\n                storeIndex += 1\n        lst[right], lst[storeIndex] = (lst[storeIndex], lst[right])\n        return storeIndex\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",10000,0.060183199821040034,0.06197535200277343,0.08227009978145361,N/A
p3_find_n_smallest_number,prompt_5,10,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, left, right, k):\n        if left == right:\n            return ([lst[left]], [left])\n        pivotIndex = partition(lst, left, right)\n        if k == pivotIndex - left + 1:\n            return (lst[left:pivotIndex + 1], list(range(left, pivotIndex + 1)))\n        elif k < pivotIndex - left + 1:\n            return quickselect(lst, left, pivotIndex - 1, k)\n        else:\n            return quickselect(lst, pivotIndex + 1, right, k - (pivotIndex - left + 1))\n\n    def partition(lst, left, right):\n        pivotIndex = (left + right) // 2\n        pivotValue = lst[pivotIndex]\n        lst[right], lst[pivotIndex] = (lst[pivotIndex], lst[right])\n        storeIndex = left\n        for i in range(left, right):\n            if lst[i] < pivotValue:\n                lst[i], lst[storeIndex] = (lst[storeIndex], lst[i])\n                storeIndex += 1\n        lst[right], lst[storeIndex] = (lst[storeIndex], lst[right])\n        return storeIndex\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",100000,0.6437288001179695,0.7306295719952323,0.76129120006226,N/A
p3_find_n_smallest_number,prompt_5,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot fix the code without knowing what the actual code is. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot fix the code without knowing what the actual code is. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot fix the code without knowing what the actual code is. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,12,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: invalid input parameters'\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k <= len(lows):\n            return quickselect(lows, k)\n        elif k > len(lows) + len(pivots):\n            return quickselect(highs, k - len(lows) - len(pivots))\n        else:\n            return pivots[0]\n    kth_small = quickselect(arg1, arg2)\n    kth_indices = [i for i in range(len(arg1)) if arg1[i] == kth_small]\n    smallest_indices = kth_indices\n    for i in range(2, arg2 + 1):\n        remaining = [arg1[j] for j in range(len(arg1)) if j not in smallest_indices]\n        i_th_small = quickselect(remaining, arg2 - i + 1)\n        i_th_indices = [j for j in range(len(arg1)) if arg1[j] == i_th_small and j not in smallest_indices]\n        smallest_indices += i_th_indices\n    return smallest_indices""]",1000,0.05005880002863705,0.052083430995699016,0.06509610009379685,N/A
p3_find_n_smallest_number,prompt_5,12,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: invalid input parameters'\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k <= len(lows):\n            return quickselect(lows, k)\n        elif k > len(lows) + len(pivots):\n            return quickselect(highs, k - len(lows) - len(pivots))\n        else:\n            return pivots[0]\n    kth_small = quickselect(arg1, arg2)\n    kth_indices = [i for i in range(len(arg1)) if arg1[i] == kth_small]\n    smallest_indices = kth_indices\n    for i in range(2, arg2 + 1):\n        remaining = [arg1[j] for j in range(len(arg1)) if j not in smallest_indices]\n        i_th_small = quickselect(remaining, arg2 - i + 1)\n        i_th_indices = [j for j in range(len(arg1)) if arg1[j] == i_th_small and j not in smallest_indices]\n        smallest_indices += i_th_indices\n    return smallest_indices""]",10000,0.5794194000773132,0.5967167000146583,0.6540814000181854,N/A
p3_find_n_smallest_number,prompt_5,12,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: invalid input parameters'\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k <= len(lows):\n            return quickselect(lows, k)\n        elif k > len(lows) + len(pivots):\n            return quickselect(highs, k - len(lows) - len(pivots))\n        else:\n            return pivots[0]\n    kth_small = quickselect(arg1, arg2)\n    kth_indices = [i for i in range(len(arg1)) if arg1[i] == kth_small]\n    smallest_indices = kth_indices\n    for i in range(2, arg2 + 1):\n        remaining = [arg1[j] for j in range(len(arg1)) if j not in smallest_indices]\n        i_th_small = quickselect(remaining, arg2 - i + 1)\n        i_th_indices = [j for j in range(len(arg1)) if arg1[j] == i_th_small and j not in smallest_indices]\n        smallest_indices += i_th_indices\n    return smallest_indices""]",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,13,"['def funcImp(arg1, k):\n    arg1_sorted = sorted(arg1)\n    smallest_numbers = {}\n    for i, num in enumerate(arg1_sorted):\n        if len(smallest_numbers) < k:\n            smallest_numbers[num] = i\n        elif num < max(smallest_numbers.keys()):\n            del smallest_numbers[max(smallest_numbers.keys())]\n            smallest_numbers[num] = i\n    return [smallest_numbers[num] for num in smallest_numbers.keys()]']",1000,0.013365500140935183,0.014148955009877682,0.015116999857127666,N/A
p3_find_n_smallest_number,prompt_5,13,"['def funcImp(arg1, k):\n    arg1_sorted = sorted(arg1)\n    smallest_numbers = {}\n    for i, num in enumerate(arg1_sorted):\n        if len(smallest_numbers) < k:\n            smallest_numbers[num] = i\n        elif num < max(smallest_numbers.keys()):\n            del smallest_numbers[max(smallest_numbers.keys())]\n            smallest_numbers[num] = i\n    return [smallest_numbers[num] for num in smallest_numbers.keys()]']",10000,0.18625260004773736,0.18961094599217176,0.19515669997781515,N/A
p3_find_n_smallest_number,prompt_5,13,"['def funcImp(arg1, k):\n    arg1_sorted = sorted(arg1)\n    smallest_numbers = {}\n    for i, num in enumerate(arg1_sorted):\n        if len(smallest_numbers) < k:\n            smallest_numbers[num] = i\n        elif num < max(smallest_numbers.keys()):\n            del smallest_numbers[max(smallest_numbers.keys())]\n            smallest_numbers[num] = i\n    return [smallest_numbers[num] for num in smallest_numbers.keys()]']",100000,2.2313954001292586,2.26653214601567,2.34694610000588,N/A
p3_find_n_smallest_number,prompt_5,14,"['def funcImp(arg1, arg2):\n    indices = {}\n    s_arr = sorted(arg1)\n    for i in range(arg2):\n        idx = arg1.index(s_arr[i])\n        indices[s_arr[i]] = idx\n    return dict(sorted(indices.items(), key=lambda item: item[1]))']",1000,0.0033909000921994448,0.0035278879920952024,0.003822699887678027,N/A
p3_find_n_smallest_number,prompt_5,14,"['def funcImp(arg1, arg2):\n    indices = {}\n    s_arr = sorted(arg1)\n    for i in range(arg2):\n        idx = arg1.index(s_arr[i])\n        indices[s_arr[i]] = idx\n    return dict(sorted(indices.items(), key=lambda item: item[1]))']",10000,0.08508299989625812,0.08718538999557496,0.09213129989802837,N/A
p3_find_n_smallest_number,prompt_5,14,"['def funcImp(arg1, arg2):\n    indices = {}\n    s_arr = sorted(arg1)\n    for i in range(arg2):\n        idx = arg1.index(s_arr[i])\n        indices[s_arr[i]] = idx\n    return dict(sorted(indices.items(), key=lambda item: item[1]))']",100000,1.213878900045529,1.2376710109901614,1.300264900084585,N/A
p3_find_n_smallest_number,prompt_5,15,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: Array must have at least k elements'""]",1000,8.499948307871819e-06,9.104001801460981e-06,1.209997572004795e-05,N/A
p3_find_n_smallest_number,prompt_5,15,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: Array must have at least k elements'""]",10000,8.599832653999329e-06,9.210016578435898e-06,1.5999889001250267e-05,N/A
p3_find_n_smallest_number,prompt_5,15,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: Array must have at least k elements'""]",100000,8.600065484642982e-06,9.124001953750849e-06,1.3200100511312485e-05,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    result = []\n    heap = []\n    k = arg2\n    for i, item in enumerate(arg1):\n        index_dict[item] = i\n        if len(heap) < k:\n            heapq.heappush(heap, (-item, i))\n        elif item < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-item, i))\n    for i in heap:\n        result.append(index_dict[i[1]])\n    return result']",1000,0.005983599927276373,0.00624420999083668,0.0068316999822855,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    result = []\n    heap = []\n    k = arg2\n    for i, item in enumerate(arg1):\n        index_dict[item] = i\n        if len(heap) < k:\n            heapq.heappush(heap, (-item, i))\n        elif item < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-item, i))\n    for i in heap:\n        result.append(index_dict[i[1]])\n    return result']",10000,0.059262000024318695,0.0603365989937447,0.06407490000128746,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    result = []\n    heap = []\n    k = arg2\n    for i, item in enumerate(arg1):\n        index_dict[item] = i\n        if len(heap) < k:\n            heapq.heappush(heap, (-item, i))\n        elif item < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-item, i))\n    for i in heap:\n        result.append(index_dict[i[1]])\n    return result']",100000,0.8531112000346184,0.8871879789861851,0.9921744999010116,N/A
p3_find_n_smallest_number,prompt_5,17,"[""{'code': None, 'raw': 'I apologize, but there is no prior code in this conversation. Can you please provide the code you are referring to so that I can assist you in fixing it?', 'success': False, 'error': None}""]",1000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,17,"[""{'code': None, 'raw': 'I apologize, but there is no prior code in this conversation. Can you please provide the code you are referring to so that I can assist you in fixing it?', 'success': False, 'error': None}""]",10000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,17,"[""{'code': None, 'raw': 'I apologize, but there is no prior code in this conversation. Can you please provide the code you are referring to so that I can assist you in fixing it?', 'success': False, 'error': None}""]",100000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, el in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-el, i))\n        elif el < -heap[0][0]:\n            heapq.heappushpop(heap, (-el, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",1000,0.003951699938625097,0.004167464000638574,0.004580900073051453,N/A
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, el in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-el, i))\n        elif el < -heap[0][0]:\n            heapq.heappushpop(heap, (-el, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",10000,0.038512099999934435,0.04017591000301764,0.04348400002345443,N/A
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, el in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-el, i))\n        elif el < -heap[0][0]:\n            heapq.heappushpop(heap, (-el, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",100000,0.3947596000507474,0.4027094770059921,0.42706639994867146,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    return heap']",1000,0.004823500057682395,0.005096427996177226,0.006606499897316098,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    return heap']",10000,0.05412440001964569,0.05540957497898489,0.05934239993803203,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    return heap']",100000,0.5439380998723209,0.5539876029943116,0.6017100000753999,N/A
p3_find_n_smallest_number,prompt_5,20,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code in this conversation. Please provide the code that you want to update or fix."", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,20,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code in this conversation. Please provide the code that you want to update or fix."", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,20,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code in this conversation. Please provide the code that you want to update or fix."", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,21,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    result = [-1] * arg2\n    for elem in sorted_arr:\n        if elem < sorted_arr[result[0]] or result[0] == -1:\n            result[0] = sorted_arr.index(elem)\n            result.sort()\n    return result']",1000,0.005263700149953365,0.005574972999747843,0.009183799847960472,N/A
p3_find_n_smallest_number,prompt_5,21,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    result = [-1] * arg2\n    for elem in sorted_arr:\n        if elem < sorted_arr[result[0]] or result[0] == -1:\n            result[0] = sorted_arr.index(elem)\n            result.sort()\n    return result']",10000,0.09936259989626706,0.10197075399570167,0.10804329998791218,N/A
p3_find_n_smallest_number,prompt_5,21,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    result = [-1] * arg2\n    for elem in sorted_arr:\n        if elem < sorted_arr[result[0]] or result[0] == -1:\n            result[0] = sorted_arr.index(elem)\n            result.sort()\n    return result']",100000,1.3603656000923365,1.4147380090178923,1.6355157000944018,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    kth_smallest_num = sorted_array[arg2 - 1]\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest_num:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",1000,0.0034263001289218664,0.0036336160078644752,0.004064899869263172,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    kth_smallest_num = sorted_array[arg2 - 1]\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest_num:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",10000,0.08809370012022555,0.09136795000638813,0.11198569997213781,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    kth_smallest_num = sorted_array[arg2 - 1]\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest_num:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",100000,1.252464400138706,1.2904683250002562,1.3964362000115216,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",1000,0.005518699996173382,0.005747120003215969,0.006668299902230501,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",10000,0.05894649983383715,0.06130290999310091,0.0737106001470238,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",100000,0.5212061998900026,0.5358650509966537,0.5702076000161469,N/A
p3_find_n_smallest_number,prompt_5,24,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, val in enumerate(arg1):\n        dict_index[val] = i\n    min_k = sorted(dict_index.keys())[:arg2]\n    return [dict_index[x] for x in min_k]']",1000,0.006065400084480643,0.006558008007705212,0.010460400022566319,N/A
p3_find_n_smallest_number,prompt_5,24,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, val in enumerate(arg1):\n        dict_index[val] = i\n    min_k = sorted(dict_index.keys())[:arg2]\n    return [dict_index[x] for x in min_k]']",10000,0.1107495001051575,0.11404935499420389,0.12719569983892143,N/A
p3_find_n_smallest_number,prompt_5,24,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, val in enumerate(arg1):\n        dict_index[val] = i\n    min_k = sorted(dict_index.keys())[:arg2]\n    return [dict_index[x] for x in min_k]']",100000,1.6811653999611735,1.7317044460005127,1.8107743998989463,N/A
p3_find_n_smallest_number,prompt_5,25,"['from typing import List\n\ndef quick_select(nums: List[int], k: int) -> int:\n    if not nums:\n        return None\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    right = [x for x in nums if x > pivot]\n    mid = [x for x in nums if x == pivot]\n    if k < len(left):\n        return quick_select(left, k)\n    elif k < len(left) + len(mid):\n        return mid[0]\n    else:\n        return quick_select(right, k - len(left) - len(mid))\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    kth_smallest = quick_select(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indexes']",1000,0.009200699860230088,0.009875298005063086,0.014945199945941567,N/A
p3_find_n_smallest_number,prompt_5,25,"['from typing import List\n\ndef quick_select(nums: List[int], k: int) -> int:\n    if not nums:\n        return None\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    right = [x for x in nums if x > pivot]\n    mid = [x for x in nums if x == pivot]\n    if k < len(left):\n        return quick_select(left, k)\n    elif k < len(left) + len(mid):\n        return mid[0]\n    else:\n        return quick_select(right, k - len(left) - len(mid))\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    kth_smallest = quick_select(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indexes']",10000,0.1417759999167174,0.14619083199184388,0.1596910001244396,N/A
p3_find_n_smallest_number,prompt_5,25,"['from typing import List\n\ndef quick_select(nums: List[int], k: int) -> int:\n    if not nums:\n        return None\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    right = [x for x in nums if x > pivot]\n    mid = [x for x in nums if x == pivot]\n    if k < len(left):\n        return quick_select(left, k)\n    elif k < len(left) + len(mid):\n        return mid[0]\n    else:\n        return quick_select(right, k - len(left) - len(mid))\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    kth_smallest = quick_select(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indexes']",100000,1.0597169001121074,1.0885807020007632,1.1547634999733418,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = heapq.nlargest(arg2, arg1)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n    result = []\n    for i in max_heap:\n        result.append(arg1.index(i))\n    return result']",1000,0.004246400203555822,0.004461143999360501,0.006314599886536598,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = heapq.nlargest(arg2, arg1)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n    result = []\n    for i in max_heap:\n        result.append(arg1.index(i))\n    return result']",10000,0.035018600057810545,0.03673409499693662,0.045180900022387505,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = heapq.nlargest(arg2, arg1)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n    result = []\n    for i in max_heap:\n        result.append(arg1.index(i))\n    return result']",100000,0.3461279000621289,0.35558112502330913,0.3741812000516802,N/A
p3_find_n_smallest_number,prompt_5,27,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",1000,0.003283600090071559,0.003460797988809645,0.003861099947243929,N/A
p3_find_n_smallest_number,prompt_5,27,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",10000,0.08429330005310476,0.08670387198682875,0.10696240002289414,N/A
p3_find_n_smallest_number,prompt_5,27,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",100000,1.2046515999827534,1.2252797649847345,1.2750534999649972,N/A
p3_find_n_smallest_number,prompt_5,28,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, k):\n        low = 0\n        high = len(arr) - 1\n        while True:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda x: arr[x])\n            elif pivot_index < k - 1:\n                low = pivot_index + 1\n            else:\n                high = pivot_index - 1\n    return quickselect(arg1, arg2)']",1000,2.0135650001466274,2.1348612210014837,2.252036700025201,N/A
p3_find_n_smallest_number,prompt_5,28,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, k):\n        low = 0\n        high = len(arr) - 1\n        while True:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda x: arr[x])\n            elif pivot_index < k - 1:\n                low = pivot_index + 1\n            else:\n                high = pivot_index - 1\n    return quickselect(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,28,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, k):\n        low = 0\n        high = len(arr) - 1\n        while True:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda x: arr[x])\n            elif pivot_index < k - 1:\n                low = pivot_index + 1\n            else:\n                high = pivot_index - 1\n    return quickselect(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,29,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    index_list = []\n    for i in range(arg2):\n        index_list.append(arg1.index(sorted_list[i]))\n    return index_list']",1000,0.003258700016885996,0.0034699060139246284,0.0038428001571446657,N/A
p3_find_n_smallest_number,prompt_5,29,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    index_list = []\n    for i in range(arg2):\n        index_list.append(arg1.index(sorted_list[i]))\n    return index_list']",10000,0.08485860005021095,0.08687675998546183,0.09573299996554852,N/A
p3_find_n_smallest_number,prompt_5,29,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    index_list = []\n    for i in range(arg2):\n        index_list.append(arg1.index(sorted_list[i]))\n    return index_list']",100000,1.2109763999469578,1.2343960670055822,1.2822233999613672,N/A
p3_find_n_smallest_number,prompt_5,30,"[""def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k.')\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n    return sorted(result)""]",1000,0.00844390015117824,0.008781754996161907,0.010491800028830767,N/A
p3_find_n_smallest_number,prompt_5,30,"[""def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k.')\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n    return sorted(result)""]",10000,0.13630799995735288,0.13945269799092785,0.14479369996115565,N/A
p3_find_n_smallest_number,prompt_5,30,"[""def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k.')\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n    return sorted(result)""]",100000,2.2045217000413686,2.247115647015162,2.3640382001176476,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    smallest_k = heapq.nsmallest(arg2, sorted_list, key=lambda x: x[1])\n    return [i[0] for i in smallest_k]']",1000,0.011505200061947107,0.012273942003957927,0.0137339998036623,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    smallest_k = heapq.nsmallest(arg2, sorted_list, key=lambda x: x[1])\n    return [i[0] for i in smallest_k]']",10000,0.1739465999417007,0.18336094199446962,0.19605819997377694,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    smallest_k = heapq.nsmallest(arg2, sorted_list, key=lambda x: x[1])\n    return [i[0] for i in smallest_k]']",100000,2.7992377001792192,3.012090487985406,3.8138186000287533,N/A
p3_find_n_smallest_number,prompt_5,32,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, kth, start, end):\n        if start == end:\n            return start\n        pivot_idx = random.randint(start, end)\n        pivot_val = arr[pivot_idx]\n        arr[pivot_idx], arr[end] = (arr[end], arr[pivot_idx])\n        smaller_idx = start\n        for i in range(start, end):\n            if arr[i] < pivot_val:\n                arr[i], arr[smaller_idx] = (arr[smaller_idx], arr[i])\n                smaller_idx += 1\n        arr[smaller_idx], arr[end] = (arr[end], arr[smaller_idx])\n        if kth == smaller_idx - start:\n            return smaller_idx\n        elif kth < smaller_idx - start:\n            return quickselect(arr, kth, start, smaller_idx - 1)\n        else:\n            return quickselect(arr, kth - (smaller_idx - start + 1), smaller_idx + 1, end)\n    kth_idx = quickselect(arg1, arg2 - 1, 0, len(arg1) - 1)\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,32,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, kth, start, end):\n        if start == end:\n            return start\n        pivot_idx = random.randint(start, end)\n        pivot_val = arr[pivot_idx]\n        arr[pivot_idx], arr[end] = (arr[end], arr[pivot_idx])\n        smaller_idx = start\n        for i in range(start, end):\n            if arr[i] < pivot_val:\n                arr[i], arr[smaller_idx] = (arr[smaller_idx], arr[i])\n                smaller_idx += 1\n        arr[smaller_idx], arr[end] = (arr[end], arr[smaller_idx])\n        if kth == smaller_idx - start:\n            return smaller_idx\n        elif kth < smaller_idx - start:\n            return quickselect(arr, kth, start, smaller_idx - 1)\n        else:\n            return quickselect(arr, kth - (smaller_idx - start + 1), smaller_idx + 1, end)\n    kth_idx = quickselect(arg1, arg2 - 1, 0, len(arg1) - 1)\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,32,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, kth, start, end):\n        if start == end:\n            return start\n        pivot_idx = random.randint(start, end)\n        pivot_val = arr[pivot_idx]\n        arr[pivot_idx], arr[end] = (arr[end], arr[pivot_idx])\n        smaller_idx = start\n        for i in range(start, end):\n            if arr[i] < pivot_val:\n                arr[i], arr[smaller_idx] = (arr[smaller_idx], arr[i])\n                smaller_idx += 1\n        arr[smaller_idx], arr[end] = (arr[end], arr[smaller_idx])\n        if kth == smaller_idx - start:\n            return smaller_idx\n        elif kth < smaller_idx - start:\n            return quickselect(arr, kth, start, smaller_idx - 1)\n        else:\n            return quickselect(arr, kth - (smaller_idx - start + 1), smaller_idx + 1, end)\n    kth_idx = quickselect(arg1, arg2 - 1, 0, len(arg1) - 1)\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1[i:])\n        min_index = arg1.index(min_val)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n        indexes.append(min_index)\n    return indexes']",1000,0.002789400052279234,0.0029697069991379975,0.0036116999108344316,N/A
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1[i:])\n        min_index = arg1.index(min_val)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n        indexes.append(min_index)\n    return indexes']",10000,0.027836000081151724,0.029650981009472163,0.0487075001001358,N/A
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1[i:])\n        min_index = arg1.index(min_val)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n        indexes.append(min_index)\n    return indexes']",100000,0.31975780008360744,0.36106455098371953,0.4495898000895977,N/A
p3_find_n_smallest_number,prompt_5,34,"['def funcImp(arg1, arg2):\n\n    def quick_select(lst, left, right, k):\n        if left == right:\n            return left\n        pivot_index = median_of_three_partition(lst, left, right)\n        count = left\n        for i in range(left, right):\n            if lst[i] <= lst[pivot_index]:\n                lst[i], lst[count] = (lst[count], lst[i])\n                count += 1\n        lst[right], lst[count] = (lst[count], lst[right])\n        if count == k:\n            return count\n        if count > k:\n            return quick_select(lst, left, count - 1, k)\n        return quick_select(lst, count + 1, right, k - count)\n    result = []\n    index = 0\n    for i in range(arg2):\n        index = quick_select(arg1, index, len(arg1) - 1, i)\n        result.append(index)\n    return result\n\ndef median_of_three_partition(lst, left, right):\n    mid = (left + right) // 2\n    if lst[right] < lst[left]:\n        lst[right], lst[left] = (lst[left], lst[right])\n    if lst[mid] < lst[left]:\n        lst[mid], lst[left] = (lst[left], lst[mid])\n    if lst[right] < lst[mid]:\n        lst[right], lst[mid] = (lst[mid], lst[right])\n    return mid']",1000,0.02672540000639856,0.029187862002290784,0.03272780007682741,N/A
p3_find_n_smallest_number,prompt_5,34,"['def funcImp(arg1, arg2):\n\n    def quick_select(lst, left, right, k):\n        if left == right:\n            return left\n        pivot_index = median_of_three_partition(lst, left, right)\n        count = left\n        for i in range(left, right):\n            if lst[i] <= lst[pivot_index]:\n                lst[i], lst[count] = (lst[count], lst[i])\n                count += 1\n        lst[right], lst[count] = (lst[count], lst[right])\n        if count == k:\n            return count\n        if count > k:\n            return quick_select(lst, left, count - 1, k)\n        return quick_select(lst, count + 1, right, k - count)\n    result = []\n    index = 0\n    for i in range(arg2):\n        index = quick_select(arg1, index, len(arg1) - 1, i)\n        result.append(index)\n    return result\n\ndef median_of_three_partition(lst, left, right):\n    mid = (left + right) // 2\n    if lst[right] < lst[left]:\n        lst[right], lst[left] = (lst[left], lst[right])\n    if lst[mid] < lst[left]:\n        lst[mid], lst[left] = (lst[left], lst[mid])\n    if lst[right] < lst[mid]:\n        lst[right], lst[mid] = (lst[mid], lst[right])\n    return mid']",10000,0.2171032999176532,0.2872071540006436,0.4000405000988394,N/A
p3_find_n_smallest_number,prompt_5,34,"['def funcImp(arg1, arg2):\n\n    def quick_select(lst, left, right, k):\n        if left == right:\n            return left\n        pivot_index = median_of_three_partition(lst, left, right)\n        count = left\n        for i in range(left, right):\n            if lst[i] <= lst[pivot_index]:\n                lst[i], lst[count] = (lst[count], lst[i])\n                count += 1\n        lst[right], lst[count] = (lst[count], lst[right])\n        if count == k:\n            return count\n        if count > k:\n            return quick_select(lst, left, count - 1, k)\n        return quick_select(lst, count + 1, right, k - count)\n    result = []\n    index = 0\n    for i in range(arg2):\n        index = quick_select(arg1, index, len(arg1) - 1, i)\n        result.append(index)\n    return result\n\ndef median_of_three_partition(lst, left, right):\n    mid = (left + right) // 2\n    if lst[right] < lst[left]:\n        lst[right], lst[left] = (lst[left], lst[right])\n    if lst[mid] < lst[left]:\n        lst[mid], lst[left] = (lst[left], lst[mid])\n    if lst[right] < lst[mid]:\n        lst[right], lst[mid] = (lst[mid], lst[right])\n    return mid']",100000,2.003763400018215,3.2541288479953074,3.9473612001165748,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    index_dict = {heap[i]: i for i in range(k)}\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            continue\n        else:\n            heapq.heappushpop(heap, arg1[i])\n            index_dict[arg1[i]] = i\n    return [index_dict[x] for x in heap]']",1000,0.0022766999900341034,0.0024046949902549386,0.0034904000349342823,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    index_dict = {heap[i]: i for i in range(k)}\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            continue\n        else:\n            heapq.heappushpop(heap, arg1[i])\n            index_dict[arg1[i]] = i\n    return [index_dict[x] for x in heap]']",10000,0.019887899979948997,0.020915898005478085,0.024986800039187074,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    index_dict = {heap[i]: i for i in range(k)}\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            continue\n        else:\n            heapq.heappushpop(heap, arg1[i])\n            index_dict[arg1[i]] = i\n    return [index_dict[x] for x in heap]']",100000,0.19868510006926954,0.21021969402208923,0.2424995000474155,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arr, k):\n    min_heap = [(value, index) for index, value in enumerate(arr[:k])]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",1000,0.0023068999871611595,0.0024450799962505696,0.0039363999385386705,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arr, k):\n    min_heap = [(value, index) for index, value in enumerate(arr[:k])]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",10000,0.022621499840170145,0.024074640984181314,0.0307564998511225,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arr, k):\n    min_heap = [(value, index) for index, value in enumerate(arr[:k])]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",100000,0.22732220008037984,0.240354283999186,0.3132084000390023,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    result = []\n    for i in heap:\n        result.append(arg1.index(i))\n    return result']",1000,0.006554699968546629,0.006660874995868653,0.007193499943241477,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    result = []\n    for i in heap:\n        result.append(arg1.index(i))\n    return result']",10000,0.04853320005349815,0.05098045200807974,0.061413299990817904,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    result = []\n    for i in heap:\n        result.append(arg1.index(i))\n    return result']",100000,0.7617973000742495,0.7958819370018319,1.1542009999975562,N/A
p3_find_n_smallest_number,prompt_5,38,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(sorted_list[i]) for i in range(arg2)]\n    return indexes']",1000,0.0033026000019162893,0.0036054960056208073,0.004798100097104907,N/A
p3_find_n_smallest_number,prompt_5,38,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(sorted_list[i]) for i in range(arg2)]\n    return indexes']",10000,0.08578240009956062,0.08771015600766986,0.09397390019148588,N/A
p3_find_n_smallest_number,prompt_5,38,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(sorted_list[i]) for i in range(arg2)]\n    return indexes']",100000,1.226329700089991,1.2802226410107687,1.5933403000235558,N/A
p3_find_n_smallest_number,prompt_5,39,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_indexes = []\n    for i in range(0, arg2):\n        smallest_indexes.append(arg1.index(sorted_array[i]))\n    return smallest_indexes']",1000,0.003292700042948127,0.0036072339862585068,0.004972399910911918,N/A
p3_find_n_smallest_number,prompt_5,39,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_indexes = []\n    for i in range(0, arg2):\n        smallest_indexes.append(arg1.index(sorted_array[i]))\n    return smallest_indexes']",10000,0.08587360009551048,0.08884330899920315,0.09517919993959367,N/A
p3_find_n_smallest_number,prompt_5,39,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_indexes = []\n    for i in range(0, arg2):\n        smallest_indexes.append(arg1.index(sorted_array[i]))\n    return smallest_indexes']",100000,1.2207306001801044,1.2659389310027473,1.4588468000292778,N/A
p3_find_n_smallest_number,prompt_5,40,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i, v in enumerate(arg1):\n        dict_values[v] = i\n    selected_numbers = sorted(arg1)[:arg2]\n    result = []\n    for num in selected_numbers:\n        result.append(dict_values[num])\n    return result']",1000,0.0060350000858306885,0.006409493004903197,0.011604900006204844,N/A
p3_find_n_smallest_number,prompt_5,40,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i, v in enumerate(arg1):\n        dict_values[v] = i\n    selected_numbers = sorted(arg1)[:arg2]\n    result = []\n    for num in selected_numbers:\n        result.append(dict_values[num])\n    return result']",10000,0.10997190000489354,0.11559107799548655,0.15392050007358193,N/A
p3_find_n_smallest_number,prompt_5,40,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i, v in enumerate(arg1):\n        dict_values[v] = i\n    selected_numbers = sorted(arg1)[:arg2]\n    result = []\n    for num in selected_numbers:\n        result.append(dict_values[num])\n    return result']",100000,1.685506499838084,1.746876480996143,1.9684966998174787,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    enumerated_list = list(enumerate(arg1))\n    smallest_elements = heapq.nlargest(arg2, enumerated_list, key=lambda x: x[1])\n    smallest_indices = [index for index, _ in smallest_elements]\n    smallest_indices.sort()\n    return smallest_indices']",1000,0.0052674999460577965,0.005570139007177204,0.006373499985784292,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    enumerated_list = list(enumerate(arg1))\n    smallest_elements = heapq.nlargest(arg2, enumerated_list, key=lambda x: x[1])\n    smallest_indices = [index for index, _ in smallest_elements]\n    smallest_indices.sort()\n    return smallest_indices']",10000,0.05424199998378754,0.05674851900665089,0.062373099848628044,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    enumerated_list = list(enumerate(arg1))\n    smallest_elements = heapq.nlargest(arg2, enumerated_list, key=lambda x: x[1])\n    smallest_indices = [index for index, _ in smallest_elements]\n    smallest_indices.sort()\n    return smallest_indices']",100000,0.6569991998840123,0.6892009269935079,0.8188451000023633,N/A
p3_find_n_smallest_number,prompt_5,42,"['def funcImp(arg1: list, arg2: int) -> list:\n    sorted_array = sorted(arg1)\n    result = sorted_array[:arg2]\n    index_map = {num: i for i, num in enumerate(arg1)}\n    index_result = [index_map[num] for num in result]\n    return index_result']",1000,0.005887199891731143,0.006361864001955837,0.010050099808722734,N/A
p3_find_n_smallest_number,prompt_5,42,"['def funcImp(arg1: list, arg2: int) -> list:\n    sorted_array = sorted(arg1)\n    result = sorted_array[:arg2]\n    index_map = {num: i for i, num in enumerate(arg1)}\n    index_result = [index_map[num] for num in result]\n    return index_result']",10000,0.10836789989843965,0.11270766898291186,0.12249869992956519,N/A
p3_find_n_smallest_number,prompt_5,42,"['def funcImp(arg1: list, arg2: int) -> list:\n    sorted_array = sorted(arg1)\n    result = sorted_array[:arg2]\n    index_map = {num: i for i, num in enumerate(arg1)}\n    index_result = [index_map[num] for num in result]\n    return index_result']",100000,1.6972319998312742,1.7376385180000216,1.7967972999904305,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, -num)\n        elif num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    return sorted([-n for n in heap])']",1000,0.002787400037050247,0.0029545850050635637,0.003879000199958682,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, -num)\n        elif num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    return sorted([-n for n in heap])']",10000,0.02520969999022782,0.026722958001773805,0.03188930009491742,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, -num)\n        elif num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    return sorted([-n for n in heap])']",100000,0.256564199924469,0.2637644310109317,0.2962678000330925,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, val in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-val, i))\n        elif -val > heap[0][0]:\n            heapq.heappushpop(heap, (-val, i))\n    return [pair[1] for pair in heap]']",1000,0.00367900007404387,0.00387986900517717,0.004519999958574772,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, val in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-val, i))\n        elif -val > heap[0][0]:\n            heapq.heappushpop(heap, (-val, i))\n    return [pair[1] for pair in heap]']",10000,0.035492700058966875,0.036868127004709095,0.04332580021582544,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, val in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-val, i))\n        elif -val > heap[0][0]:\n            heapq.heappushpop(heap, (-val, i))\n    return [pair[1] for pair in heap]']",100000,0.36656009987927973,0.37530994100961834,0.3916495000012219,N/A
p3_find_n_smallest_number,prompt_5,45,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 >= len(arg1):\n        return []\n\n    def quick_select(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        eq = [x for x in lst if x == pivot]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(eq):\n            return eq[0]\n        else:\n            return quick_select(right, k - len(left) - len(eq))\n    kth_smallest = quick_select(arg1, arg2)\n    tuples_lst = [(v, i) for i, v in enumerate(arg1)]\n    smallest_k_tuples = filter(lambda x: x[0] <= kth_smallest, tuples_lst)\n    return [i[1] for i in smallest_k_tuples][:arg2]']",1000,0.012012699851766229,0.012884236006066203,0.020168599905446172,N/A
p3_find_n_smallest_number,prompt_5,45,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 >= len(arg1):\n        return []\n\n    def quick_select(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        eq = [x for x in lst if x == pivot]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(eq):\n            return eq[0]\n        else:\n            return quick_select(right, k - len(left) - len(eq))\n    kth_smallest = quick_select(arg1, arg2)\n    tuples_lst = [(v, i) for i, v in enumerate(arg1)]\n    smallest_k_tuples = filter(lambda x: x[0] <= kth_smallest, tuples_lst)\n    return [i[1] for i in smallest_k_tuples][:arg2]']",10000,0.1422139999922365,0.1467048000311479,0.15477939997799695,N/A
p3_find_n_smallest_number,prompt_5,45,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 >= len(arg1):\n        return []\n\n    def quick_select(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        eq = [x for x in lst if x == pivot]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(eq):\n            return eq[0]\n        else:\n            return quick_select(right, k - len(left) - len(eq))\n    kth_smallest = quick_select(arg1, arg2)\n    tuples_lst = [(v, i) for i, v in enumerate(arg1)]\n    smallest_k_tuples = filter(lambda x: x[0] <= kth_smallest, tuples_lst)\n    return [i[1] for i in smallest_k_tuples][:arg2]']",100000,1.7749514000024647,1.8197308219992556,1.9373775999993086,N/A
p3_find_n_smallest_number,prompt_5,46,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list):\n        raise TypeError('The first argument arg1 must be a list of integers.')\n    if not isinstance(arg2, int):\n        raise TypeError('The second argument arg2 must be an integer.')""]",1000,9.399838745594025e-06,1.005000900477171e-05,1.6600126400589943e-05,N/A
p3_find_n_smallest_number,prompt_5,46,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list):\n        raise TypeError('The first argument arg1 must be a list of integers.')\n    if not isinstance(arg2, int):\n        raise TypeError('The second argument arg2 must be an integer.')""]",10000,9.19983722269535e-06,9.66999912634492e-06,1.2799864634871483e-05,N/A
p3_find_n_smallest_number,prompt_5,46,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list):\n        raise TypeError('The first argument arg1 must be a list of integers.')\n    if not isinstance(arg2, int):\n        raise TypeError('The second argument arg2 must be an integer.')""]",100000,9.400071576237679e-06,1.0030018165707588e-05,1.3499986380338669e-05,N/A
p3_find_n_smallest_number,prompt_5,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",1000,0.006966100074350834,0.0073340529878623785,0.008910800097510219,N/A
p3_find_n_smallest_number,prompt_5,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",10000,0.055022599874064326,0.0568753989902325,0.06223620008677244,N/A
p3_find_n_smallest_number,prompt_5,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",100000,0.8137881001457572,0.8299212300032377,0.8529812998604029,N/A
p3_find_n_smallest_number,prompt_5,48,"[""def partition(arr, pivot):\n    smaller = []\n    larger = []\n    pivots = []\n    for elem in arr:\n        if elem < pivot:\n            smaller.append(elem)\n        elif elem > pivot:\n            larger.append(elem)\n        else:\n            pivots.append(elem)\n    if len(smaller) >= k:\n        return partition(smaller, pivot)\n    elif len(smaller) + len(pivots) >= k:\n        return smaller + pivots[:k - len(smaller)]\n    else:\n        return smaller + pivots + partition(larger, pivot)\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the input list.'\n    else:\n        k_smallest = partition(arg1, arg1[0])\n        if len(k_smallest) == arg2:\n            return [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n        elif len(k_smallest) < arg2:\n            return funcImp([elem for elem in arg1 if elem not in k_smallest], arg2 - len(k_smallest))\n        else:\n            return funcImp(k_smallest, arg2)""]",1000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_5,48,"[""def partition(arr, pivot):\n    smaller = []\n    larger = []\n    pivots = []\n    for elem in arr:\n        if elem < pivot:\n            smaller.append(elem)\n        elif elem > pivot:\n            larger.append(elem)\n        else:\n            pivots.append(elem)\n    if len(smaller) >= k:\n        return partition(smaller, pivot)\n    elif len(smaller) + len(pivots) >= k:\n        return smaller + pivots[:k - len(smaller)]\n    else:\n        return smaller + pivots + partition(larger, pivot)\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the input list.'\n    else:\n        k_smallest = partition(arg1, arg1[0])\n        if len(k_smallest) == arg2:\n            return [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n        elif len(k_smallest) < arg2:\n            return funcImp([elem for elem in arg1 if elem not in k_smallest], arg2 - len(k_smallest))\n        else:\n            return funcImp(k_smallest, arg2)""]",10000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_5,48,"[""def partition(arr, pivot):\n    smaller = []\n    larger = []\n    pivots = []\n    for elem in arr:\n        if elem < pivot:\n            smaller.append(elem)\n        elif elem > pivot:\n            larger.append(elem)\n        else:\n            pivots.append(elem)\n    if len(smaller) >= k:\n        return partition(smaller, pivot)\n    elif len(smaller) + len(pivots) >= k:\n        return smaller + pivots[:k - len(smaller)]\n    else:\n        return smaller + pivots + partition(larger, pivot)\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the input list.'\n    else:\n        k_smallest = partition(arg1, arg1[0])\n        if len(k_smallest) == arg2:\n            return [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n        elif len(k_smallest) < arg2:\n            return funcImp([elem for elem in arg1 if elem not in k_smallest], arg2 - len(k_smallest))\n        else:\n            return funcImp(k_smallest, arg2)""]",100000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_5,49,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_idx):\n        pivot_value = arr[pivot_idx]\n        arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arr[i] <= pivot_value:\n                arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n                store_idx += 1\n        arr[store_idx], arr[right] = (arr[right], arr[store_idx])\n        return store_idx\n    left = 0\n    right = len(arg1) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        pivot_idx = partition(arg1, left, right, pivot_idx)\n        if pivot_idx == arg2 - 1:\n            return sorted(range(arg2), key=lambda i: arg1[i])\n        elif pivot_idx < arg2 - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1']",1000,0.0055356998927891254,0.0066278699948452416,0.010933199897408485,N/A
p3_find_n_smallest_number,prompt_5,49,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_idx):\n        pivot_value = arr[pivot_idx]\n        arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arr[i] <= pivot_value:\n                arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n                store_idx += 1\n        arr[store_idx], arr[right] = (arr[right], arr[store_idx])\n        return store_idx\n    left = 0\n    right = len(arg1) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        pivot_idx = partition(arg1, left, right, pivot_idx)\n        if pivot_idx == arg2 - 1:\n            return sorted(range(arg2), key=lambda i: arg1[i])\n        elif pivot_idx < arg2 - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1']",10000,0.05686880019493401,0.06285435601137579,0.07300289999693632,N/A
p3_find_n_smallest_number,prompt_5,49,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_idx):\n        pivot_value = arr[pivot_idx]\n        arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arr[i] <= pivot_value:\n                arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n                store_idx += 1\n        arr[store_idx], arr[right] = (arr[right], arr[store_idx])\n        return store_idx\n    left = 0\n    right = len(arg1) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        pivot_idx = partition(arg1, left, right, pivot_idx)\n        if pivot_idx == arg2 - 1:\n            return sorted(range(arg2), key=lambda i: arg1[i])\n        elif pivot_idx < arg2 - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1']",100000,0.6383032000157982,0.7410995489917696,0.8469998000655323,N/A
p3_find_n_smallest_number,prompt_5,50,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    vals_dict = {}\n    for idx, val in enumerate(arg1):\n        vals_dict[idx] = val\n    sorted_vals = sorted(arg1)[:arg2]\n    indexes = []\n    for val in sorted_vals:\n        idx = [key for key, value in vals_dict.items() if value == val][0]\n        indexes.append(idx)\n    return sorted(indexes)']",1000,0.0122339001391083,0.013120474999304861,0.01624129991978407,N/A
p3_find_n_smallest_number,prompt_5,50,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    vals_dict = {}\n    for idx, val in enumerate(arg1):\n        vals_dict[idx] = val\n    sorted_vals = sorted(arg1)[:arg2]\n    indexes = []\n    for val in sorted_vals:\n        idx = [key for key, value in vals_dict.items() if value == val][0]\n        indexes.append(idx)\n    return sorted(indexes)']",10000,0.1713596999179572,0.1747862559906207,0.18704169988632202,N/A
p3_find_n_smallest_number,prompt_5,50,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    vals_dict = {}\n    for idx, val in enumerate(arg1):\n        vals_dict[idx] = val\n    sorted_vals = sorted(arg1)[:arg2]\n    indexes = []\n    for val in sorted_vals:\n        idx = [key for key, value in vals_dict.items() if value == val][0]\n        indexes.append(idx)\n    return sorted(indexes)']",100000,2.2975300000980496,2.3482419599895366,2.4307126998901367,N/A
p3_find_n_smallest_number,prompt_5,51,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indices = []\n    counter = 0\n    for i in range(len(sorted_array)):\n        if sorted_array[i] <= arg2 and counter < arg2:\n            k_smallest_indices.append(i)\n            counter += 1\n    return k_smallest_indices']",1000,0.004260699963197112,0.004583733982872218,0.005103799980133772,N/A
p3_find_n_smallest_number,prompt_5,51,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indices = []\n    counter = 0\n    for i in range(len(sorted_array)):\n        if sorted_array[i] <= arg2 and counter < arg2:\n            k_smallest_indices.append(i)\n            counter += 1\n    return k_smallest_indices']",10000,0.09180950000882149,0.09389479101169855,0.10029720002785325,N/A
p3_find_n_smallest_number,prompt_5,51,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indices = []\n    counter = 0\n    for i in range(len(sorted_array)):\n        if sorted_array[i] <= arg2 and counter < arg2:\n            k_smallest_indices.append(i)\n            counter += 1\n    return k_smallest_indices']",100000,1.2739111999981105,1.2971006489777936,1.3419995999429375,N/A
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] in min_heap:\n            res.append(i)\n    return res']",1000,0.004904899979010224,0.005164896007627249,0.0063888998702168465,N/A
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] in min_heap:\n            res.append(i)\n    return res']",10000,0.051073700189590454,0.05228136399528012,0.055682900128886104,N/A
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] in min_heap:\n            res.append(i)\n    return res']",100000,0.5174008999019861,0.5297884829924442,0.5725545000750571,N/A
p3_find_n_smallest_number,prompt_5,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    minHeap = arg1[:arg2]\n    heapq.heapify(minHeap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < minHeap[0]:\n            heapq.heapreplace(minHeap, arg1[i])\n    for num in minHeap:\n        result.append(arg1.index(num))\n    return result']",1000,0.0019531999714672565,0.002039625986944884,0.002296699909493327,N/A
p3_find_n_smallest_number,prompt_5,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    minHeap = arg1[:arg2]\n    heapq.heapify(minHeap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < minHeap[0]:\n            heapq.heapreplace(minHeap, arg1[i])\n    for num in minHeap:\n        result.append(arg1.index(num))\n    return result']",10000,0.020501799881458282,0.0212774210027419,0.02371259988285601,N/A
p3_find_n_smallest_number,prompt_5,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    minHeap = arg1[:arg2]\n    heapq.heapify(minHeap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < minHeap[0]:\n            heapq.heapreplace(minHeap, arg1[i])\n    for num in minHeap:\n        result.append(arg1.index(num))\n    return result']",100000,0.1928481999784708,0.19766345700016244,0.20757479988969862,N/A
p3_find_n_smallest_number,prompt_5,54,"['def funcImp(arr, k):\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        right = [x for x in arr if x > pivot]\n        mid = [x for x in arr if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    kth_smallest = quickselect(arr, k - 1)\n    indexes = [i for i in range(len(arr)) if arr[i] <= kth_smallest]\n    return (sorted(arr)[:k], indexes[:k])']",1000,0.012635899940505624,0.01328698200173676,0.015916600124910474,N/A
p3_find_n_smallest_number,prompt_5,54,"['def funcImp(arr, k):\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        right = [x for x in arr if x > pivot]\n        mid = [x for x in arr if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    kth_smallest = quickselect(arr, k - 1)\n    indexes = [i for i in range(len(arr)) if arr[i] <= kth_smallest]\n    return (sorted(arr)[:k], indexes[:k])']",10000,0.21705659991130233,0.22354531598044558,0.2415223999414593,N/A
p3_find_n_smallest_number,prompt_5,54,"['def funcImp(arr, k):\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        right = [x for x in arr if x > pivot]\n        mid = [x for x in arr if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    kth_smallest = quickselect(arr, k - 1)\n    indexes = [i for i in range(len(arr)) if arr[i] <= kth_smallest]\n    return (sorted(arr)[:k], indexes[:k])']",100000,2.1211827001534402,2.1542416709964165,2.2338686999864876,N/A
p3_find_n_smallest_number,prompt_5,55,"['def funcImp(arg1, arg2):\n    element_index = {}\n    for i, element in enumerate(arg1):\n        element_index[element] = i\n    arg1.sort()\n    k_smallest_elements = arg1[:arg2]\n    k_smallest_indexes = []\n    for element in k_smallest_elements:\n        k_smallest_indexes.append(element_index[element])\n    return k_smallest_indexes']",1000,0.002935900120064616,0.0030582500086165964,0.003306600032374263,N/A
p3_find_n_smallest_number,prompt_5,55,"['def funcImp(arg1, arg2):\n    element_index = {}\n    for i, element in enumerate(arg1):\n        element_index[element] = i\n    arg1.sort()\n    k_smallest_elements = arg1[:arg2]\n    k_smallest_indexes = []\n    for element in k_smallest_elements:\n        k_smallest_indexes.append(element_index[element])\n    return k_smallest_indexes']",10000,0.029859500005841255,0.031176767996512353,0.03581169992685318,N/A
p3_find_n_smallest_number,prompt_5,55,"['def funcImp(arg1, arg2):\n    element_index = {}\n    for i, element in enumerate(arg1):\n        element_index[element] = i\n    arg1.sort()\n    k_smallest_elements = arg1[:arg2]\n    k_smallest_indexes = []\n    for element in k_smallest_elements:\n        k_smallest_indexes.append(element_index[element])\n    return k_smallest_indexes']",100000,0.680871699936688,0.7196704669971951,0.7717672998551279,N/A
p3_find_n_smallest_number,prompt_5,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0]:\n            heapq.heappushpop(heap, -arg1[i])\n            result.append(i)\n    return result']",1000,0.0022768001072108746,0.0023810849874280394,0.003132499987259507,N/A
p3_find_n_smallest_number,prompt_5,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0]:\n            heapq.heappushpop(heap, -arg1[i])\n            result.append(i)\n    return result']",10000,0.02372659998945892,0.024613654005806892,0.026517000049352646,N/A
p3_find_n_smallest_number,prompt_5,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0]:\n            heapq.heappushpop(heap, -arg1[i])\n            result.append(i)\n    return result']",100000,0.24119210010394454,0.24738213599659503,0.2558538999874145,N/A
p3_find_n_smallest_number,prompt_5,57,"['def funcImp(arg1, arg2):\n    dictionary = {}\n    for index, element in enumerate(arg1):\n        if element in dictionary:\n            dictionary[element].append(index)\n        else:\n            dictionary[element] = [index]\n    sortedKeys = sorted(dictionary.keys())\n    smallestIndexes = []\n    for key in sortedKeys[:arg2]:\n        for index in dictionary[key]:\n            smallestIndexes.append(index)\n        if len(smallestIndexes) >= arg2:\n            break\n    return smallestIndexes']",1000,0.008382800035178661,0.009019879992119968,0.013016199925914407,N/A
p3_find_n_smallest_number,prompt_5,57,"['def funcImp(arg1, arg2):\n    dictionary = {}\n    for index, element in enumerate(arg1):\n        if element in dictionary:\n            dictionary[element].append(index)\n        else:\n            dictionary[element] = [index]\n    sortedKeys = sorted(dictionary.keys())\n    smallestIndexes = []\n    for key in sortedKeys[:arg2]:\n        for index in dictionary[key]:\n            smallestIndexes.append(index)\n        if len(smallestIndexes) >= arg2:\n            break\n    return smallestIndexes']",10000,0.13583960011601448,0.13926130399340764,0.1481173001229763,N/A
p3_find_n_smallest_number,prompt_5,57,"['def funcImp(arg1, arg2):\n    dictionary = {}\n    for index, element in enumerate(arg1):\n        if element in dictionary:\n            dictionary[element].append(index)\n        else:\n            dictionary[element] = [index]\n    sortedKeys = sorted(dictionary.keys())\n    smallestIndexes = []\n    for key in sortedKeys[:arg2]:\n        for index in dictionary[key]:\n            smallestIndexes.append(index)\n        if len(smallestIndexes) >= arg2:\n            break\n    return smallestIndexes']",100000,2.1994708999991417,2.2390918319975026,2.3257346998434514,N/A
p3_find_n_smallest_number,prompt_5,58,"[""import random\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: k is out of range'\n\n    def partition(arr, low, high):\n        pivot_index = random.randint(low, high)\n        arr[low], arr[pivot_index] = (arr[pivot_index], arr[low])\n        pivot = arr[low]\n        i = low + 1\n        j = high\n        while i <= j:\n            while i <= j and arr[i] <= pivot:\n                i += 1\n            while i <= j and arr[j] > pivot:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[low], arr[j] = (arr[j], arr[low])\n        return j\n\n    def find_indices(arr, low, high, k):\n        if low <= high:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return range(k)\n            elif pivot_index > k - 1:\n                return find_indices(arr, low, pivot_index - 1, k)\n            else:\n                return find_indices(arr, pivot_index + 1, high, k)\n        else:\n            return 'Error: k not found'\n    return find_indices(arg1, 0, len(arg1) - 1, arg2)""]",1000,0.004284600028768182,0.004627319988794625,0.005399100016802549,N/A
p3_find_n_smallest_number,prompt_5,58,"[""import random\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: k is out of range'\n\n    def partition(arr, low, high):\n        pivot_index = random.randint(low, high)\n        arr[low], arr[pivot_index] = (arr[pivot_index], arr[low])\n        pivot = arr[low]\n        i = low + 1\n        j = high\n        while i <= j:\n            while i <= j and arr[i] <= pivot:\n                i += 1\n            while i <= j and arr[j] > pivot:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[low], arr[j] = (arr[j], arr[low])\n        return j\n\n    def find_indices(arr, low, high, k):\n        if low <= high:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return range(k)\n            elif pivot_index > k - 1:\n                return find_indices(arr, low, pivot_index - 1, k)\n            else:\n                return find_indices(arr, pivot_index + 1, high, k)\n        else:\n            return 'Error: k not found'\n    return find_indices(arg1, 0, len(arg1) - 1, arg2)""]",10000,0.03936029993928969,0.0437060899916105,0.052577999886125326,N/A
p3_find_n_smallest_number,prompt_5,58,"[""import random\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: k is out of range'\n\n    def partition(arr, low, high):\n        pivot_index = random.randint(low, high)\n        arr[low], arr[pivot_index] = (arr[pivot_index], arr[low])\n        pivot = arr[low]\n        i = low + 1\n        j = high\n        while i <= j:\n            while i <= j and arr[i] <= pivot:\n                i += 1\n            while i <= j and arr[j] > pivot:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[low], arr[j] = (arr[j], arr[low])\n        return j\n\n    def find_indices(arr, low, high, k):\n        if low <= high:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return range(k)\n            elif pivot_index > k - 1:\n                return find_indices(arr, low, pivot_index - 1, k)\n            else:\n                return find_indices(arr, pivot_index + 1, high, k)\n        else:\n            return 'Error: k not found'\n    return find_indices(arg1, 0, len(arg1) - 1, arg2)""]",100000,0.5200087002012879,0.5604196899919771,0.6238149998243898,N/A
p3_find_n_smallest_number,prompt_5,59,"['def find_k_smallest(arr, left, right, k):\n    if left <= right:\n        pivot = arr[left]\n        i = left\n        j = right\n        while i <= j:\n            while arr[i] < pivot:\n                i += 1\n            while arr[j] > pivot:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        pivot_pos = i - 1\n        if pivot_pos < k:\n            return find_k_smallest(arr, pivot_pos + 1, right, k)\n        elif pivot_pos > k:\n            return find_k_smallest(arr, left, pivot_pos - 1, k)\n        else:\n            return [(index, num) for index, num in enumerate(arr[:k])]\n\ndef funcImp(arg1, arg2):\n    return find_k_smallest(arg1, 0, len(arg1) - 1, arg2)']",1000,0.009600299876183271,0.010268965002615005,0.014912300044670701,N/A
p3_find_n_smallest_number,prompt_5,59,"['def find_k_smallest(arr, left, right, k):\n    if left <= right:\n        pivot = arr[left]\n        i = left\n        j = right\n        while i <= j:\n            while arr[i] < pivot:\n                i += 1\n            while arr[j] > pivot:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        pivot_pos = i - 1\n        if pivot_pos < k:\n            return find_k_smallest(arr, pivot_pos + 1, right, k)\n        elif pivot_pos > k:\n            return find_k_smallest(arr, left, pivot_pos - 1, k)\n        else:\n            return [(index, num) for index, num in enumerate(arr[:k])]\n\ndef funcImp(arg1, arg2):\n    return find_k_smallest(arg1, 0, len(arg1) - 1, arg2)']",10000,0.09831909998320043,0.10247258702525869,0.11296559986658394,N/A
p3_find_n_smallest_number,prompt_5,59,"['def find_k_smallest(arr, left, right, k):\n    if left <= right:\n        pivot = arr[left]\n        i = left\n        j = right\n        while i <= j:\n            while arr[i] < pivot:\n                i += 1\n            while arr[j] > pivot:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        pivot_pos = i - 1\n        if pivot_pos < k:\n            return find_k_smallest(arr, pivot_pos + 1, right, k)\n        elif pivot_pos > k:\n            return find_k_smallest(arr, left, pivot_pos - 1, k)\n        else:\n            return [(index, num) for index, num in enumerate(arr[:k])]\n\ndef funcImp(arg1, arg2):\n    return find_k_smallest(arg1, 0, len(arg1) - 1, arg2)']",100000,1.0440157998818904,1.0593892529862934,1.1152906999923289,N/A
p3_find_n_smallest_number,prompt_5,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    results = []\n    min_heap = heapq.nsmallest(arg2, arg1)\n    for i in arg1[arg2:]:\n        if i < min_heap[-1]:\n            heapq.heapreplace(min_heap, i)\n    for i in range(arg2):\n        results.append(arg1.index(min_heap[i]))\n    return results']",1000,0.0035200000274926424,0.003686067999806255,0.00396490003913641,N/A
p3_find_n_smallest_number,prompt_5,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    results = []\n    min_heap = heapq.nsmallest(arg2, arg1)\n    for i in arg1[arg2:]:\n        if i < min_heap[-1]:\n            heapq.heapreplace(min_heap, i)\n    for i in range(arg2):\n        results.append(arg1.index(min_heap[i]))\n    return results']",10000,0.035621900111436844,0.037075920009519904,0.043080200208351016,N/A
p3_find_n_smallest_number,prompt_5,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    results = []\n    min_heap = heapq.nsmallest(arg2, arg1)\n    for i in arg1[arg2:]:\n        if i < min_heap[-1]:\n            heapq.heapreplace(min_heap, i)\n    for i in range(arg2):\n        results.append(arg1.index(min_heap[i]))\n    return results']",100000,0.4560110999736935,0.46915590099757537,0.495260399999097,N/A
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, num)\n            index_dict[num] = i\n        elif num < heap[0]:\n            removed_num = heapq.heappushpop(heap, num)\n            index_dict.pop(removed_num)\n            index_dict[num] = i\n    return [index_dict[num] for num in heap]']",1000,0,0,0,	 exception: 67
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, num)\n            index_dict[num] = i\n        elif num < heap[0]:\n            removed_num = heapq.heappushpop(heap, num)\n            index_dict.pop(removed_num)\n            index_dict[num] = i\n    return [index_dict[num] for num in heap]']",10000,0,0,0,	 exception: 67
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, num)\n            index_dict[num] = i\n        elif num < heap[0]:\n            removed_num = heapq.heappushpop(heap, num)\n            index_dict.pop(removed_num)\n            index_dict[num] = i\n    return [index_dict[num] for num in heap]']",100000,0,0,0,	 exception: 67
p3_find_n_smallest_number,prompt_5,62,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_nums = sorted(arg1)\n    return [i for i, num in enumerate(arg1) if num in sorted_nums[:arg2]]']",1000,0.008747800020501018,0.009175956004764885,0.01020550006069243,N/A
p3_find_n_smallest_number,prompt_5,62,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_nums = sorted(arg1)\n    return [i for i, num in enumerate(arg1) if num in sorted_nums[:arg2]]']",10000,0.1366495001129806,0.13941554201068357,0.14898980013094842,N/A
p3_find_n_smallest_number,prompt_5,62,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_nums = sorted(arg1)\n    return [i for i, num in enumerate(arg1) if num in sorted_nums[:arg2]]']",100000,1.685180800035596,1.7148712349962443,1.7789528998546302,N/A
p3_find_n_smallest_number,prompt_5,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for j in heap:\n        indices.append(arg1.index(j))\n    return indices']",1000,0.0019714999943971634,0.002087043994106352,0.0025683001149445772,N/A
p3_find_n_smallest_number,prompt_5,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for j in heap:\n        indices.append(arg1.index(j))\n    return indices']",10000,0.020594599889591336,0.021523148990236222,0.02507640002295375,N/A
p3_find_n_smallest_number,prompt_5,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for j in heap:\n        indices.append(arg1.index(j))\n    return indices']",100000,0.19874160015024245,0.20330414399737493,0.22335330001078546,N/A
p3_find_n_smallest_number,prompt_5,64,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    else:\n        pivot = arg1[0]\n        smaller_elements = [x for x in arg1 if x < pivot]\n        m = len(smaller_elements)\n        if m == arg2:\n            return [i for i, x in enumerate(arg1) if x < pivot]\n        elif m < arg2:\n            result = funcImp([x for x in arg1 if x > pivot], arg2 - m)\n            return [i + m for i in result]\n        else:\n            return funcImp(smaller_elements, arg2)']",1000,0.0020494998898357153,0.002172099002636969,0.002498899819329381,N/A
p3_find_n_smallest_number,prompt_5,64,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    else:\n        pivot = arg1[0]\n        smaller_elements = [x for x in arg1 if x < pivot]\n        m = len(smaller_elements)\n        if m == arg2:\n            return [i for i, x in enumerate(arg1) if x < pivot]\n        elif m < arg2:\n            result = funcImp([x for x in arg1 if x > pivot], arg2 - m)\n            return [i + m for i in result]\n        else:\n            return funcImp(smaller_elements, arg2)']",10000,0.027125299908220768,0.028648376998025925,0.06042740005068481,N/A
p3_find_n_smallest_number,prompt_5,64,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    else:\n        pivot = arg1[0]\n        smaller_elements = [x for x in arg1 if x < pivot]\n        m = len(smaller_elements)\n        if m == arg2:\n            return [i for i, x in enumerate(arg1) if x < pivot]\n        elif m < arg2:\n            result = funcImp([x for x in arg1 if x > pivot], arg2 - m)\n            return [i + m for i in result]\n        else:\n            return funcImp(smaller_elements, arg2)']",100000,0.3389248000457883,0.34719860199606045,0.38113170000724494,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq._heapify_max(heap)\n    for num in arg1[arg2:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    return list(reversed(heap))']",1000,0.001375500112771988,0.0014988690125755965,0.0017273998819291592,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq._heapify_max(heap)\n    for num in arg1[arg2:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    return list(reversed(heap))']",10000,0.013253399869427085,0.014089606008492411,0.01660569990053773,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq._heapify_max(heap)\n    for num in arg1[arg2:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    return list(reversed(heap))']",100000,0.14641869999468327,0.15868903500493617,0.17202069982886314,N/A
p3_find_n_smallest_number,prompt_5,66,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indices = {num: i for i, num in enumerate(arg1)}\n    result = []\n    for num in sorted_list[:arg2]:\n        result.append(indices[num])\n    return result']",1000,0.005661400035023689,0.006082231008913368,0.008246999932453036,N/A
p3_find_n_smallest_number,prompt_5,66,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indices = {num: i for i, num in enumerate(arg1)}\n    result = []\n    for num in sorted_list[:arg2]:\n        result.append(indices[num])\n    return result']",10000,0.10631909989751875,0.10965211699018255,0.12739829998463392,N/A
p3_find_n_smallest_number,prompt_5,66,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indices = {num: i for i, num in enumerate(arg1)}\n    result = []\n    for num in sorted_list[:arg2]:\n        result.append(indices[num])\n    return result']",100000,1.6739513000939041,1.7188947549951263,1.7852751000318676,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    heapq.heapify(heap)\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    index_dict = {heap[i]: i for i in range(arg2)}\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",1000,0.004400799982249737,0.0046564950281754135,0.006125400075688958,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    heapq.heapify(heap)\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    index_dict = {heap[i]: i for i in range(arg2)}\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",10000,0.05541469994932413,0.05688135000644252,0.06127990013919771,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    heapq.heapify(heap)\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    index_dict = {heap[i]: i for i in range(arg2)}\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",100000,0.554556000046432,0.5666838229983113,0.6353759998455644,N/A
p3_find_n_smallest_number,prompt_5,68,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(x) for x in sorted_list]\n    return indexes[:arg2]']",1000,0.20925690000876784,0.21407807302428408,0.23433080012910068,N/A
p3_find_n_smallest_number,prompt_5,68,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(x) for x in sorted_list]\n    return indexes[:arg2]']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,68,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(x) for x in sorted_list]\n    return indexes[:arg2]']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,69,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k = arg2\n    kth_smallest = sorted_array[k - 1]\n    index_list = []\n    for i in range(len(sorted_array)):\n        if sorted_array[i] <= kth_smallest:\n            index_list.append(i)\n            k -= 1\n            if k == 0:\n                break\n    result_list = []\n    for index in index_list:\n        result_list.append(arg1.index(sorted_array[index]))\n    return result_list']",1000,0.0034310000482946634,0.003671348989009857,0.004520100075751543,N/A
p3_find_n_smallest_number,prompt_5,69,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k = arg2\n    kth_smallest = sorted_array[k - 1]\n    index_list = []\n    for i in range(len(sorted_array)):\n        if sorted_array[i] <= kth_smallest:\n            index_list.append(i)\n            k -= 1\n            if k == 0:\n                break\n    result_list = []\n    for index in index_list:\n        result_list.append(arg1.index(sorted_array[index]))\n    return result_list']",10000,0.0845643999055028,0.08891394000733271,0.09674440021626651,N/A
p3_find_n_smallest_number,prompt_5,69,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k = arg2\n    kth_smallest = sorted_array[k - 1]\n    index_list = []\n    for i in range(len(sorted_array)):\n        if sorted_array[i] <= kth_smallest:\n            index_list.append(i)\n            k -= 1\n            if k == 0:\n                break\n    result_list = []\n    for index in index_list:\n        result_list.append(arg1.index(sorted_array[index]))\n    return result_list']",100000,1.2221634001471102,1.2666638169949875,1.3713086999487132,N/A
p3_find_n_smallest_number,prompt_5,70,"['def QuickSelect(arr, left, right, k):\n    if k > 0 and k <= right - left + 1:\n        pivot = partition(arr, left, right)\n        if pivot - left == k - 1:\n            return pivot\n        if pivot - left > k - 1:\n            return QuickSelect(arr, left, pivot - 1, k)\n        return QuickSelect(arr, pivot + 1, right, k - pivot + left - 1)\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            arr[i], arr[j] = (arr[j], arr[i])\n            i += 1\n    arr[i], arr[right] = (arr[right], arr[i])\n    return i\n\ndef funcImp(arg1, arg2):\n    kth_smallest = QuickSelect(arg1, 0, len(arg1) - 1, arg2)\n    sub_array = arg1[:kth_smallest + 1]\n    sorted_sub_array = sorted(sub_array)\n    indexes = [arg1.index(i) for i in sorted_sub_array[:arg2]]\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_5,70,"['def QuickSelect(arr, left, right, k):\n    if k > 0 and k <= right - left + 1:\n        pivot = partition(arr, left, right)\n        if pivot - left == k - 1:\n            return pivot\n        if pivot - left > k - 1:\n            return QuickSelect(arr, left, pivot - 1, k)\n        return QuickSelect(arr, pivot + 1, right, k - pivot + left - 1)\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            arr[i], arr[j] = (arr[j], arr[i])\n            i += 1\n    arr[i], arr[right] = (arr[right], arr[i])\n    return i\n\ndef funcImp(arg1, arg2):\n    kth_smallest = QuickSelect(arg1, 0, len(arg1) - 1, arg2)\n    sub_array = arg1[:kth_smallest + 1]\n    sorted_sub_array = sorted(sub_array)\n    indexes = [arg1.index(i) for i in sorted_sub_array[:arg2]]\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_5,70,"['def QuickSelect(arr, left, right, k):\n    if k > 0 and k <= right - left + 1:\n        pivot = partition(arr, left, right)\n        if pivot - left == k - 1:\n            return pivot\n        if pivot - left > k - 1:\n            return QuickSelect(arr, left, pivot - 1, k)\n        return QuickSelect(arr, pivot + 1, right, k - pivot + left - 1)\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            arr[i], arr[j] = (arr[j], arr[i])\n            i += 1\n    arr[i], arr[right] = (arr[right], arr[i])\n    return i\n\ndef funcImp(arg1, arg2):\n    kth_smallest = QuickSelect(arg1, 0, len(arg1) - 1, arg2)\n    sub_array = arg1[:kth_smallest + 1]\n    sorted_sub_array = sorted(sub_array)\n    indexes = [arg1.index(i) for i in sorted_sub_array[:arg2]]\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_5,71,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n\n    def quickselect(l, r, k):\n        if l == r:\n            return l\n        pivot_idx = partition(l, r)\n        if pivot_idx == k:\n            return pivot_idx\n        elif pivot_idx < k:\n            return quickselect(pivot_idx + 1, r, k)\n        else:\n            return quickselect(l, pivot_idx - 1, k)\n\n    def partition(l, r):\n        pivot_idx = (l + r) // 2\n        pivot = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[r] = (arg1[r], arg1[pivot_idx])\n        idx = l\n        for i in range(l, r):\n            if arg1[i] < pivot:\n                arg1[i], arg1[idx] = (arg1[idx], arg1[i])\n                idx += 1\n        arg1[idx], arg1[r] = (arg1[r], arg1[idx])\n        return idx\n    k_smallest_idx = [quickselect(0, len(arg1) - 1, i) for i in range(arg2)]\n    return k_smallest_idx']",1000,0.030039099976420403,0.031621960001066325,0.04082409990951419,N/A
p3_find_n_smallest_number,prompt_5,71,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n\n    def quickselect(l, r, k):\n        if l == r:\n            return l\n        pivot_idx = partition(l, r)\n        if pivot_idx == k:\n            return pivot_idx\n        elif pivot_idx < k:\n            return quickselect(pivot_idx + 1, r, k)\n        else:\n            return quickselect(l, pivot_idx - 1, k)\n\n    def partition(l, r):\n        pivot_idx = (l + r) // 2\n        pivot = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[r] = (arg1[r], arg1[pivot_idx])\n        idx = l\n        for i in range(l, r):\n            if arg1[i] < pivot:\n                arg1[i], arg1[idx] = (arg1[idx], arg1[i])\n                idx += 1\n        arg1[idx], arg1[r] = (arg1[r], arg1[idx])\n        return idx\n    k_smallest_idx = [quickselect(0, len(arg1) - 1, i) for i in range(arg2)]\n    return k_smallest_idx']",10000,0.3223401999566704,0.3334480029856786,0.3521734999958426,N/A
p3_find_n_smallest_number,prompt_5,71,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n\n    def quickselect(l, r, k):\n        if l == r:\n            return l\n        pivot_idx = partition(l, r)\n        if pivot_idx == k:\n            return pivot_idx\n        elif pivot_idx < k:\n            return quickselect(pivot_idx + 1, r, k)\n        else:\n            return quickselect(l, pivot_idx - 1, k)\n\n    def partition(l, r):\n        pivot_idx = (l + r) // 2\n        pivot = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[r] = (arg1[r], arg1[pivot_idx])\n        idx = l\n        for i in range(l, r):\n            if arg1[i] < pivot:\n                arg1[i], arg1[idx] = (arg1[idx], arg1[i])\n                idx += 1\n        arg1[idx], arg1[r] = (arg1[r], arg1[idx])\n        return idx\n    k_smallest_idx = [quickselect(0, len(arg1) - 1, i) for i in range(arg2)]\n    return k_smallest_idx']",100000,3.6985742999240756,3.876475685990881,3.9913543998263776,N/A
p3_find_n_smallest_number,prompt_5,72,"[""from bisect import bisect_left\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Array is smaller than k'\n    k_smallest = arg1[:arg2]\n    k_smallest.sort()\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            index = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(index, arg1[i])\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            result.append(i)\n    return result""]",1000,0.00558570004068315,0.005743517996743322,0.006166199920699,N/A
p3_find_n_smallest_number,prompt_5,72,"[""from bisect import bisect_left\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Array is smaller than k'\n    k_smallest = arg1[:arg2]\n    k_smallest.sort()\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            index = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(index, arg1[i])\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            result.append(i)\n    return result""]",10000,0.05454810010269284,0.05727871699957177,0.06340889981947839,N/A
p3_find_n_smallest_number,prompt_5,72,"[""from bisect import bisect_left\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Array is smaller than k'\n    k_smallest = arg1[:arg2]\n    k_smallest.sort()\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            index = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(index, arg1[i])\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            result.append(i)\n    return result""]",100000,0.5510959001258016,0.5675027400045656,0.5914686000905931,N/A
p3_find_n_smallest_number,prompt_5,73,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict[i] = n\n    k_smallest_indexes = sorted(index_dict, key=index_dict.get)[:arg2]\n    return k_smallest_indexes']",1000,0.007802399806678295,0.008260830000508576,0.012108199996873736,N/A
p3_find_n_smallest_number,prompt_5,73,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict[i] = n\n    k_smallest_indexes = sorted(index_dict, key=index_dict.get)[:arg2]\n    return k_smallest_indexes']",10000,0.12070630001835525,0.12428159500239416,0.14048830000683665,N/A
p3_find_n_smallest_number,prompt_5,73,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict[i] = n\n    k_smallest_indexes = sorted(index_dict, key=index_dict.get)[:arg2]\n    return k_smallest_indexes']",100000,1.9209784001577646,1.9604386439872905,2.0807926000561565,N/A
p3_find_n_smallest_number,prompt_5,74,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i, num in enumerate(arr):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    smallest_k_nums = [(-x[0], x[1]) for x in heap]\n    smallest_k_nums_sorted = sorted(smallest_k_nums, key=lambda x: x[0])\n    k_smallest_indexes = []\n    for i in range(len(smallest_k_nums_sorted)):\n        if i < k:\n            k_smallest_indexes.append(smallest_k_nums_sorted[i][1])\n    return k_smallest_indexes']",1000,0.012592900078743696,0.013241618003230543,0.017877599922940135,N/A
p3_find_n_smallest_number,prompt_5,74,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i, num in enumerate(arr):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    smallest_k_nums = [(-x[0], x[1]) for x in heap]\n    smallest_k_nums_sorted = sorted(smallest_k_nums, key=lambda x: x[0])\n    k_smallest_indexes = []\n    for i in range(len(smallest_k_nums_sorted)):\n        if i < k:\n            k_smallest_indexes.append(smallest_k_nums_sorted[i][1])\n    return k_smallest_indexes']",10000,0.12457009986974299,0.1291431209957227,0.1416704999282956,N/A
p3_find_n_smallest_number,prompt_5,74,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i, num in enumerate(arr):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    smallest_k_nums = [(-x[0], x[1]) for x in heap]\n    smallest_k_nums_sorted = sorted(smallest_k_nums, key=lambda x: x[0])\n    k_smallest_indexes = []\n    for i in range(len(smallest_k_nums_sorted)):\n        if i < k:\n            k_smallest_indexes.append(smallest_k_nums_sorted[i][1])\n    return k_smallest_indexes']",100000,1.2850271998904645,1.3154333750088698,1.4450405999086797,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    dict_indexes = {}\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, num)\n            dict_indexes[num] = dict_indexes.get(num, []) + [index]\n        elif num < heap[0]:\n            smallest = heapq.heappop(heap)\n            dict_indexes[smallest].pop(0)\n            if len(dict_indexes[smallest]) == 0:\n                dict_indexes.pop(smallest)\n            heapq.heappush(heap, num)\n            dict_indexes[num] = dict_indexes.get(num, []) + [index]\n    result = []\n    for t in heap:\n        result.extend(dict_indexes[t])\n    return result']",1000,0.0033619001042097807,0.003624230003915727,0.005110499914735556,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    dict_indexes = {}\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, num)\n            dict_indexes[num] = dict_indexes.get(num, []) + [index]\n        elif num < heap[0]:\n            smallest = heapq.heappop(heap)\n            dict_indexes[smallest].pop(0)\n            if len(dict_indexes[smallest]) == 0:\n                dict_indexes.pop(smallest)\n            heapq.heappush(heap, num)\n            dict_indexes[num] = dict_indexes.get(num, []) + [index]\n    result = []\n    for t in heap:\n        result.extend(dict_indexes[t])\n    return result']",10000,0.032803700072690845,0.03443677000235766,0.04662739997729659,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    dict_indexes = {}\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, num)\n            dict_indexes[num] = dict_indexes.get(num, []) + [index]\n        elif num < heap[0]:\n            smallest = heapq.heappop(heap)\n            dict_indexes[smallest].pop(0)\n            if len(dict_indexes[smallest]) == 0:\n                dict_indexes.pop(smallest)\n            heapq.heappush(heap, num)\n            dict_indexes[num] = dict_indexes.get(num, []) + [index]\n    result = []\n    for t in heap:\n        result.extend(dict_indexes[t])\n    return result']",100000,0.3292038000654429,0.33703136500436814,0.36085069994442165,N/A
p3_find_n_smallest_number,prompt_5,76,"['def partition(arr, left, right, k):\n    if left == right:\n        return arr[:k]\n    pivot = arr[(left + right) // 2]\n    i, j = (left, right)\n    while i <= j:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = (arr[j], arr[i])\n            i += 1\n            j -= 1\n    if k <= j:\n        return partition(arr, left, j, k)\n    elif k >= i:\n        return partition(arr, i, right, k)\n    else:\n        return arr[:k]\n\ndef funcImp(arg1, arg2):\n    return [arg1.index(elem) for elem in partition(arg1, 0, len(arg1) - 1, arg2)]']",1000,0.003306599799543619,0.003572026987094432,0.0060303001664578915,N/A
p3_find_n_smallest_number,prompt_5,76,"['def partition(arr, left, right, k):\n    if left == right:\n        return arr[:k]\n    pivot = arr[(left + right) // 2]\n    i, j = (left, right)\n    while i <= j:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = (arr[j], arr[i])\n            i += 1\n            j -= 1\n    if k <= j:\n        return partition(arr, left, j, k)\n    elif k >= i:\n        return partition(arr, i, right, k)\n    else:\n        return arr[:k]\n\ndef funcImp(arg1, arg2):\n    return [arg1.index(elem) for elem in partition(arg1, 0, len(arg1) - 1, arg2)]']",10000,0.03398149996064603,0.03503729199059308,0.03909710003063083,N/A
p3_find_n_smallest_number,prompt_5,76,"['def partition(arr, left, right, k):\n    if left == right:\n        return arr[:k]\n    pivot = arr[(left + right) // 2]\n    i, j = (left, right)\n    while i <= j:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = (arr[j], arr[i])\n            i += 1\n            j -= 1\n    if k <= j:\n        return partition(arr, left, j, k)\n    elif k >= i:\n        return partition(arr, i, right, k)\n    else:\n        return arr[:k]\n\ndef funcImp(arg1, arg2):\n    return [arg1.index(elem) for elem in partition(arg1, 0, len(arg1) - 1, arg2)]']",100000,0.4024241999723017,0.42984624300152063,0.46601110021583736,N/A
p3_find_n_smallest_number,prompt_5,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    res = []\n    for i in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return sorted(res)']",1000,0.003253999864682555,0.0033683909941464663,0.0035571998450905085,N/A
p3_find_n_smallest_number,prompt_5,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    res = []\n    for i in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return sorted(res)']",10000,0.030225600115954876,0.031186829989310355,0.03563350019976497,N/A
p3_find_n_smallest_number,prompt_5,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    res = []\n    for i in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return sorted(res)']",100000,0.30087530007585883,0.30673751601483673,0.3192607997916639,N/A
p3_find_n_smallest_number,prompt_5,78,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:arg2]\n    indexes = []\n    for num in smallest_k:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.0033235999289900064,0.003525844996329397,0.0048227000515908,N/A
p3_find_n_smallest_number,prompt_5,78,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:arg2]\n    indexes = []\n    for num in smallest_k:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.08477959991432726,0.08734015299240128,0.0922575001604855,N/A
p3_find_n_smallest_number,prompt_5,78,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:arg2]\n    indexes = []\n    for num in smallest_k:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,1.204814000055194,1.2267744919843973,1.2591305000241846,N/A
p3_find_n_smallest_number,prompt_5,79,"['def funcImp(arg1, arg2):\n    dictionary = {}\n    for i, num in enumerate(arg1):\n        dictionary[num] = i\n    smallest_k = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(dictionary[num])\n    return indexes']",1000,0.005979200126603246,0.00630177297629416,0.008841300150379539,N/A
p3_find_n_smallest_number,prompt_5,79,"['def funcImp(arg1, arg2):\n    dictionary = {}\n    for i, num in enumerate(arg1):\n        dictionary[num] = i\n    smallest_k = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(dictionary[num])\n    return indexes']",10000,0.10881630005314946,0.11185014299117028,0.1301097001414746,N/A
p3_find_n_smallest_number,prompt_5,79,"['def funcImp(arg1, arg2):\n    dictionary = {}\n    for i, num in enumerate(arg1):\n        dictionary[num] = i\n    smallest_k = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(dictionary[num])\n    return indexes']",100000,1.6580049998592585,1.6920337770017795,1.72954610013403,N/A
p3_find_n_smallest_number,prompt_5,80,"['def funcImp(arg1, arg2):\n\n    def partition(pairs, pivot_idx):\n        pivot = pairs[pivot_idx][0]\n        left, right = ([], [])\n        for i, (value, index) in enumerate(pairs):\n            if i != pivot_idx:\n                if value < pivot:\n                    left.append((value, index))\n                else:\n                    right.append((value, index))\n        return (left, right)\n\n    def quicksort(pairs):\n        n = len(pairs)\n        if n == 0:\n            return []\n        elif n == 1:\n            return pairs[:1]\n        else:\n            pivot_idx = n // 2\n            left, right = partition(pairs, pivot_idx)\n            if len(left) >= arg2:\n                return quicksort(left)\n            else:\n                k_pairs = left + [pairs[pivot_idx]]\n                num_remaining = arg2 - len(k_pairs)\n                return k_pairs + quicksort(right)[:num_remaining]\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    indices = [index for value, index in quicksort(pairs)]\n    return indices']",1000,0.011614100076258183,0.012188118000049144,0.013856799807399511,N/A
p3_find_n_smallest_number,prompt_5,80,"['def funcImp(arg1, arg2):\n\n    def partition(pairs, pivot_idx):\n        pivot = pairs[pivot_idx][0]\n        left, right = ([], [])\n        for i, (value, index) in enumerate(pairs):\n            if i != pivot_idx:\n                if value < pivot:\n                    left.append((value, index))\n                else:\n                    right.append((value, index))\n        return (left, right)\n\n    def quicksort(pairs):\n        n = len(pairs)\n        if n == 0:\n            return []\n        elif n == 1:\n            return pairs[:1]\n        else:\n            pivot_idx = n // 2\n            left, right = partition(pairs, pivot_idx)\n            if len(left) >= arg2:\n                return quicksort(left)\n            else:\n                k_pairs = left + [pairs[pivot_idx]]\n                num_remaining = arg2 - len(k_pairs)\n                return k_pairs + quicksort(right)[:num_remaining]\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    indices = [index for value, index in quicksort(pairs)]\n    return indices']",10000,0.22809690004214644,0.24179962801048532,0.26145470002666116,N/A
p3_find_n_smallest_number,prompt_5,80,"['def funcImp(arg1, arg2):\n\n    def partition(pairs, pivot_idx):\n        pivot = pairs[pivot_idx][0]\n        left, right = ([], [])\n        for i, (value, index) in enumerate(pairs):\n            if i != pivot_idx:\n                if value < pivot:\n                    left.append((value, index))\n                else:\n                    right.append((value, index))\n        return (left, right)\n\n    def quicksort(pairs):\n        n = len(pairs)\n        if n == 0:\n            return []\n        elif n == 1:\n            return pairs[:1]\n        else:\n            pivot_idx = n // 2\n            left, right = partition(pairs, pivot_idx)\n            if len(left) >= arg2:\n                return quicksort(left)\n            else:\n                k_pairs = left + [pairs[pivot_idx]]\n                num_remaining = arg2 - len(k_pairs)\n                return k_pairs + quicksort(right)[:num_remaining]\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    indices = [index for value, index in quicksort(pairs)]\n    return indices']",100000,1.95650490000844,2.013542397005949,2.067007699981332,N/A
p3_find_n_smallest_number,prompt_5,81,"['def funcImp(arg1, arg2):\n    arg1_sorted = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(arg1_sorted[i])\n        result.append((arg1_sorted[i], index))\n    return result']",1000,0.0033193998970091343,0.0035797100071795285,0.004946099827066064,N/A
p3_find_n_smallest_number,prompt_5,81,"['def funcImp(arg1, arg2):\n    arg1_sorted = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(arg1_sorted[i])\n        result.append((arg1_sorted[i], index))\n    return result']",10000,0.08550240006297827,0.0873712769895792,0.09791520005092025,N/A
p3_find_n_smallest_number,prompt_5,81,"['def funcImp(arg1, arg2):\n    arg1_sorted = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(arg1_sorted[i])\n        result.append((arg1_sorted[i], index))\n    return result']",100000,1.2080985000357032,1.2329353820090183,1.271627200068906,N/A
p3_find_n_smallest_number,prompt_5,82,"[""def funcImp(arg1, k):\n    if len(arg1) < k or k <= 0:\n        return []\n    dict_ = {i: float('inf') for i in range(k)}\n    res = []\n    for i, num in enumerate(arg1):\n        if num < max(dict_.values()):\n            max_key = max(dict_, key=dict_.get)\n            dict_[max_key] = num\n    for key in sorted(dict_, key=dict_.get):\n        res.append(key)\n    return res""]",1000,0.010776599869132042,0.011411219015717506,0.013534000143408775,N/A
p3_find_n_smallest_number,prompt_5,82,"[""def funcImp(arg1, k):\n    if len(arg1) < k or k <= 0:\n        return []\n    dict_ = {i: float('inf') for i in range(k)}\n    res = []\n    for i, num in enumerate(arg1):\n        if num < max(dict_.values()):\n            max_key = max(dict_, key=dict_.get)\n            dict_[max_key] = num\n    for key in sorted(dict_, key=dict_.get):\n        res.append(key)\n    return res""]",10000,0.10154470009729266,0.10544915498932823,0.11408620001748204,N/A
p3_find_n_smallest_number,prompt_5,82,"[""def funcImp(arg1, k):\n    if len(arg1) < k or k <= 0:\n        return []\n    dict_ = {i: float('inf') for i in range(k)}\n    res = []\n    for i, num in enumerate(arg1):\n        if num < max(dict_.values()):\n            max_key = max(dict_, key=dict_.get)\n            dict_[max_key] = num\n    for key in sorted(dict_, key=dict_.get):\n        res.append(key)\n    return res""]",100000,1.0155669001396745,1.0317475330014714,1.0470825999509543,N/A
p3_find_n_smallest_number,prompt_5,83,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k is greater than the length of the input array!')\n    kth = heapq.nsmallest(arg2, arg1)[-1]\n    result = [i for i, x in enumerate(arg1) if x <= kth]\n    if len(result) < arg2:\n        for i, x in enumerate(arg1):\n            if x > kth:\n                continue\n            if len(result) < arg2:\n                result.append(i)\n            else:\n                break\n    return result""]",1000,0.0031042001210153103,0.003184126007836312,0.0034338999539613724,N/A
p3_find_n_smallest_number,prompt_5,83,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k is greater than the length of the input array!')\n    kth = heapq.nsmallest(arg2, arg1)[-1]\n    result = [i for i, x in enumerate(arg1) if x <= kth]\n    if len(result) < arg2:\n        for i, x in enumerate(arg1):\n            if x > kth:\n                continue\n            if len(result) < arg2:\n                result.append(i)\n            else:\n                break\n    return result""]",10000,0.028810499934479594,0.029811490993015468,0.03460899996571243,N/A
p3_find_n_smallest_number,prompt_5,83,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k is greater than the length of the input array!')\n    kth = heapq.nsmallest(arg2, arg1)[-1]\n    result = [i for i, x in enumerate(arg1) if x <= kth]\n    if len(result) < arg2:\n        for i, x in enumerate(arg1):\n            if x > kth:\n                continue\n            if len(result) < arg2:\n                result.append(i)\n            else:\n                break\n    return result""]",100000,0.2851984999142587,0.29118319500470535,0.3027860000729561,N/A
p3_find_n_smallest_number,prompt_5,84,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indices = {}\n    arr_copy = arg1.copy()\n    ...\n    return indices']",1000,0,0,0,	 exception: name 'indices' is not defined
p3_find_n_smallest_number,prompt_5,84,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indices = {}\n    arr_copy = arg1.copy()\n    ...\n    return indices']",10000,0,0,0,	 exception: name 'indices' is not defined
p3_find_n_smallest_number,prompt_5,84,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indices = {}\n    arr_copy = arg1.copy()\n    ...\n    return indices']",100000,0,0,0,	 exception: name 'indices' is not defined
p3_find_n_smallest_number,prompt_5,85,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    index_dict = {}\n    for i in range(arg2):\n        index_dict[arg1.index(sorted_arr[i])] = True\n    return list(index_dict.keys())']",1000,0.003334099892526865,0.0035394009971059857,0.004198600072413683,N/A
p3_find_n_smallest_number,prompt_5,85,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    index_dict = {}\n    for i in range(arg2):\n        index_dict[arg1.index(sorted_arr[i])] = True\n    return list(index_dict.keys())']",10000,0.08355149999260902,0.0867206280096434,0.09305769996717572,N/A
p3_find_n_smallest_number,prompt_5,85,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    index_dict = {}\n    for i in range(arg2):\n        index_dict[arg1.index(sorted_arr[i])] = True\n    return list(index_dict.keys())']",100000,1.2105137999169528,1.2296615799958817,1.2590715000405908,N/A
p3_find_n_smallest_number,prompt_5,86,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef funcImp(arg1, arg2):\n    pi = partition(arg1, 0, len(arg1) - 1)\n    if pi == arg2:\n        return arg1[:pi]\n    elif pi > arg2:\n        return funcImp(arg1[:pi], arg2)\n    else:\n        return arg1[:pi + 1] + funcImp(arg1[pi + 1:], arg2 - pi - 1)']",1000,0.0058623000513762236,0.006765396003611385,0.009739800123497844,N/A
p3_find_n_smallest_number,prompt_5,86,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef funcImp(arg1, arg2):\n    pi = partition(arg1, 0, len(arg1) - 1)\n    if pi == arg2:\n        return arg1[:pi]\n    elif pi > arg2:\n        return funcImp(arg1[:pi], arg2)\n    else:\n        return arg1[:pi + 1] + funcImp(arg1[pi + 1:], arg2 - pi - 1)']",10000,0.058914999943226576,0.06708653599023819,0.0912277998868376,N/A
p3_find_n_smallest_number,prompt_5,86,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef funcImp(arg1, arg2):\n    pi = partition(arg1, 0, len(arg1) - 1)\n    if pi == arg2:\n        return arg1[:pi]\n    elif pi > arg2:\n        return funcImp(arg1[:pi], arg2)\n    else:\n        return arg1[:pi + 1] + funcImp(arg1[pi + 1:], arg2 - pi - 1)']",100000,0.7308223999571055,0.8452191760181449,0.9803903999272734,N/A
p3_find_n_smallest_number,prompt_5,87,"['def funcImp(arr, k):\n    index_dict = {}\n    sorted_arr = sorted(range(len(arr)), key=lambda i: arr[i])\n    for i in range(k):\n        index_dict[sorted_arr[i]] = arr[sorted_arr[i]]\n    sorted_dict = dict(sorted(index_dict.items(), key=lambda item: item[1]))\n    return list(sorted_dict.keys())[:k]']",1000,0.0074818001594394445,0.007921590991318226,0.01359199988655746,N/A
p3_find_n_smallest_number,prompt_5,87,"['def funcImp(arr, k):\n    index_dict = {}\n    sorted_arr = sorted(range(len(arr)), key=lambda i: arr[i])\n    for i in range(k):\n        index_dict[sorted_arr[i]] = arr[sorted_arr[i]]\n    sorted_dict = dict(sorted(index_dict.items(), key=lambda item: item[1]))\n    return list(sorted_dict.keys())[:k]']",10000,0.1128660999238491,0.115371199992951,0.13188169989734888,N/A
p3_find_n_smallest_number,prompt_5,87,"['def funcImp(arr, k):\n    index_dict = {}\n    sorted_arr = sorted(range(len(arr)), key=lambda i: arr[i])\n    for i in range(k):\n        index_dict[sorted_arr[i]] = arr[sorted_arr[i]]\n    sorted_dict = dict(sorted(index_dict.items(), key=lambda item: item[1]))\n    return list(sorted_dict.keys())[:k]']",100000,1.602661799872294,1.644936647992581,1.6993869999423623,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[arg2 - 1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for num in heap:\n        result.append(arg1.index(num))\n    return result']",1000,0.004918399965390563,0.005176087003201246,0.006761400029063225,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[arg2 - 1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for num in heap:\n        result.append(arg1.index(num))\n    return result']",10000,0.05330809997394681,0.05517051100032404,0.06566559989005327,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[arg2 - 1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for num in heap:\n        result.append(arg1.index(num))\n    return result']",100000,0.4921800000593066,0.503377898002509,0.5178664000704885,N/A
p3_find_n_smallest_number,prompt_5,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    idx = []\n    heap = list(arg1)\n    heapq.heapify(heap)\n    for _ in range(arg2):\n        val = heapq.heappop(heap)\n        idx.append(arg1.index(val))\n    return idx']",1000,0.00162870017811656,0.0016970409965142608,0.002721899887546897,N/A
p3_find_n_smallest_number,prompt_5,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    idx = []\n    heap = list(arg1)\n    heapq.heapify(heap)\n    for _ in range(arg2):\n        val = heapq.heappop(heap)\n        idx.append(arg1.index(val))\n    return idx']",10000,0.026542500127106905,0.027405661020893604,0.02850749995559454,N/A
p3_find_n_smallest_number,prompt_5,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    idx = []\n    heap = list(arg1)\n    heapq.heapify(heap)\n    for _ in range(arg2):\n        val = heapq.heappop(heap)\n        idx.append(arg1.index(val))\n    return idx']",100000,0.35753930010832846,0.36621480000671,0.38554589985869825,N/A
p3_find_n_smallest_number,prompt_5,90,"['def funcImp(arg1, arg2):\n    indices = {}\n    sorted_arr = sorted(arg1)\n    for i, j in enumerate(arg1):\n        if j in sorted_arr[:arg2]:\n            indices[i] = j\n    return list(indices.keys())']",1000,0.008624499896541238,0.009159621007274837,0.010004200041294098,N/A
p3_find_n_smallest_number,prompt_5,90,"['def funcImp(arg1, arg2):\n    indices = {}\n    sorted_arr = sorted(arg1)\n    for i, j in enumerate(arg1):\n        if j in sorted_arr[:arg2]:\n            indices[i] = j\n    return list(indices.keys())']",10000,0.13617519987747073,0.13904214999172837,0.14942320017144084,N/A
p3_find_n_smallest_number,prompt_5,90,"['def funcImp(arg1, arg2):\n    indices = {}\n    sorted_arr = sorted(arg1)\n    for i, j in enumerate(arg1):\n        if j in sorted_arr[:arg2]:\n            indices[i] = j\n    return list(indices.keys())']",100000,1.6833333000540733,1.705786300979089,1.7421825998462737,N/A
p3_find_n_smallest_number,prompt_5,91,"['def funcImp(arg1, arg2):\n    copy_list = arg1.copy()\n    sorted_list = sorted(copy_list)\n    k_smallest = sorted_list[:arg2]\n    index_list = [arg1.index(elem) for elem in k_smallest]\n    return index_list']",1000,0.0034497000742703676,0.0037187450053170323,0.00574590009637177,N/A
p3_find_n_smallest_number,prompt_5,91,"['def funcImp(arg1, arg2):\n    copy_list = arg1.copy()\n    sorted_list = sorted(copy_list)\n    k_smallest = sorted_list[:arg2]\n    index_list = [arg1.index(elem) for elem in k_smallest]\n    return index_list']",10000,0.0857696000020951,0.08867419601185247,0.09493799996562302,N/A
p3_find_n_smallest_number,prompt_5,91,"['def funcImp(arg1, arg2):\n    copy_list = arg1.copy()\n    sorted_list = sorted(copy_list)\n    k_smallest = sorted_list[:arg2]\n    index_list = [arg1.index(elem) for elem in k_smallest]\n    return index_list']",100000,1.2663976999465376,1.2929566569929012,1.3184704000595957,N/A
p3_find_n_smallest_number,prompt_5,92,"['import random\n\ndef quickselect(arr, left, right, k):\n    if left > right:\n        return []\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    partition_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[partition_index] = (arr[partition_index], arr[i])\n            partition_index += 1\n    arr[right], arr[partition_index] = (arr[partition_index], arr[right])\n    size = partition_index - left + 1\n    if size == k:\n        return arr[left:partition_index]\n    elif size > k:\n        return quickselect(arr, left, partition_index - 1, k)\n    else:\n        return quickselect(arr, partition_index + 1, right, k - size)\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indices = quickselect(list(range(len(arg1))), 0, len(arg1) - 1, arg2)\n    indices.sort()\n    return indices']",1000,0.00591910001821816,0.007054830007255077,0.011150500038638711,N/A
p3_find_n_smallest_number,prompt_5,92,"['import random\n\ndef quickselect(arr, left, right, k):\n    if left > right:\n        return []\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    partition_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[partition_index] = (arr[partition_index], arr[i])\n            partition_index += 1\n    arr[right], arr[partition_index] = (arr[partition_index], arr[right])\n    size = partition_index - left + 1\n    if size == k:\n        return arr[left:partition_index]\n    elif size > k:\n        return quickselect(arr, left, partition_index - 1, k)\n    else:\n        return quickselect(arr, partition_index + 1, right, k - size)\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indices = quickselect(list(range(len(arg1))), 0, len(arg1) - 1, arg2)\n    indices.sort()\n    return indices']",10000,0.05972620006650686,0.0676802410138771,0.08013160014525056,N/A
p3_find_n_smallest_number,prompt_5,92,"['import random\n\ndef quickselect(arr, left, right, k):\n    if left > right:\n        return []\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    partition_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[partition_index] = (arr[partition_index], arr[i])\n            partition_index += 1\n    arr[right], arr[partition_index] = (arr[partition_index], arr[right])\n    size = partition_index - left + 1\n    if size == k:\n        return arr[left:partition_index]\n    elif size > k:\n        return quickselect(arr, left, partition_index - 1, k)\n    else:\n        return quickselect(arr, partition_index + 1, right, k - size)\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indices = quickselect(list(range(len(arg1))), 0, len(arg1) - 1, arg2)\n    indices.sort()\n    return indices']",100000,0.636067499872297,0.7197272049938328,0.8149230999406427,N/A
p3_find_n_smallest_number,prompt_5,93,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    index_list = []\n    for element in arg1:\n        if element in sorted_list:\n            index_list.append(arg1.index(element))\n    return index_list']",1000,0.005782600026577711,0.0062491939985193316,0.009852000046521425,N/A
p3_find_n_smallest_number,prompt_5,93,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    index_list = []\n    for element in arg1:\n        if element in sorted_list:\n            index_list.append(arg1.index(element))\n    return index_list']",10000,0.11080330004915595,0.11290564299561083,0.1324907001107931,N/A
p3_find_n_smallest_number,prompt_5,93,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    index_list = []\n    for element in arg1:\n        if element in sorted_list:\n            index_list.append(arg1.index(element))\n    return index_list']",100000,1.4681647000834346,1.4950642539933323,1.5329640000127256,N/A
p3_find_n_smallest_number,prompt_5,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_lst = sorted(arg1)\n    idx = []\n    for num in sorted_lst[:k]:\n        idx.append(arg1.index(num))\n    return idx']",1000,0.003318500006571412,0.0035988960205577316,0.005512300180271268,N/A
p3_find_n_smallest_number,prompt_5,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_lst = sorted(arg1)\n    idx = []\n    for num in sorted_lst[:k]:\n        idx.append(arg1.index(num))\n    return idx']",10000,0.0849904001224786,0.08760156299220398,0.09480890003032982,N/A
p3_find_n_smallest_number,prompt_5,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_lst = sorted(arg1)\n    idx = []\n    for num in sorted_lst[:k]:\n        idx.append(arg1.index(num))\n    return idx']",100000,1.2125110998749733,1.2316816700063646,1.2614577999338508,N/A
p3_find_n_smallest_number,prompt_5,95,"['def funcImp(arg1, arg2):\n    smallest = []\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if len(smallest) < arg2:\n            smallest.append(num)\n            indexes[num] = i\n        else:\n            max_num = max(smallest)\n            if num < max_num:\n                max_index = indexes[max_num]\n                smallest.remove(max_num)\n                del indexes[max_num]\n                smallest.append(num)\n                indexes[num] = max_index\n    return [indexes[num] for num in smallest]']",1000,0.009761299937963486,0.01024286099942401,0.013230500044301152,N/A
p3_find_n_smallest_number,prompt_5,95,"['def funcImp(arg1, arg2):\n    smallest = []\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if len(smallest) < arg2:\n            smallest.append(num)\n            indexes[num] = i\n        else:\n            max_num = max(smallest)\n            if num < max_num:\n                max_index = indexes[max_num]\n                smallest.remove(max_num)\n                del indexes[max_num]\n                smallest.append(num)\n                indexes[num] = max_index\n    return [indexes[num] for num in smallest]']",10000,0.09521409985609353,0.09865649699466303,0.11247080005705357,N/A
p3_find_n_smallest_number,prompt_5,95,"['def funcImp(arg1, arg2):\n    smallest = []\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if len(smallest) < arg2:\n            smallest.append(num)\n            indexes[num] = i\n        else:\n            max_num = max(smallest)\n            if num < max_num:\n                max_index = indexes[max_num]\n                smallest.remove(max_num)\n                del indexes[max_num]\n                smallest.append(num)\n                indexes[num] = max_index\n    return [indexes[num] for num in smallest]']",100000,0.9452931999694556,0.958086502996739,0.9994594999589026,N/A
p3_find_n_smallest_number,prompt_5,96,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    indices = []\n    for i in range(arg2):\n        index = arg1.index(min(arg1[i:]))\n        arg1[i], arg1[index] = (arg1[index], arg1[i])\n        indices.append(index)\n    return sorted(indices)']",1000,0.002713100053369999,0.0029107270133681595,0.003110499819740653,N/A
p3_find_n_smallest_number,prompt_5,96,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    indices = []\n    for i in range(arg2):\n        index = arg1.index(min(arg1[i:]))\n        arg1[i], arg1[index] = (arg1[index], arg1[i])\n        indices.append(index)\n    return sorted(indices)']",10000,0.027507799910381436,0.028884367996361106,0.03193120006471872,N/A
p3_find_n_smallest_number,prompt_5,96,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    indices = []\n    for i in range(arg2):\n        index = arg1.index(min(arg1[i:]))\n        arg1[i], arg1[index] = (arg1[index], arg1[i])\n        indices.append(index)\n    return sorted(indices)']",100000,0.3173804001417011,0.34088487301254644,0.4024046000558883,N/A
p3_find_n_smallest_number,prompt_5,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(array, left, right, k):\n        if left == right:\n            return [i for i, x in enumerate(array) if x <= array[left]][:k]\n        pivot = array[(left + right) // 2]\n        i = left\n        j = right\n        while i <= j:\n            while array[i] < pivot:\n                i += 1\n            while array[j] > pivot:\n                j -= 1\n            if i <= j:\n                array[i], array[j] = (array[j], array[i])\n                i += 1\n                j -= 1\n        if k <= j:\n            return quickselect(array, left, j, k)\n        elif k >= i:\n            return quickselect(array, i, right, k)\n        else:\n            return [i for i, x in enumerate(array) if x <= array[j]][:k]\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",1000,0.005787600064650178,0.00605804500868544,0.006531099788844585,N/A
p3_find_n_smallest_number,prompt_5,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(array, left, right, k):\n        if left == right:\n            return [i for i, x in enumerate(array) if x <= array[left]][:k]\n        pivot = array[(left + right) // 2]\n        i = left\n        j = right\n        while i <= j:\n            while array[i] < pivot:\n                i += 1\n            while array[j] > pivot:\n                j -= 1\n            if i <= j:\n                array[i], array[j] = (array[j], array[i])\n                i += 1\n                j -= 1\n        if k <= j:\n            return quickselect(array, left, j, k)\n        elif k >= i:\n            return quickselect(array, i, right, k)\n        else:\n            return [i for i, x in enumerate(array) if x <= array[j]][:k]\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",10000,0.05960289994254708,0.06100463600363582,0.06439869990572333,N/A
p3_find_n_smallest_number,prompt_5,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(array, left, right, k):\n        if left == right:\n            return [i for i, x in enumerate(array) if x <= array[left]][:k]\n        pivot = array[(left + right) // 2]\n        i = left\n        j = right\n        while i <= j:\n            while array[i] < pivot:\n                i += 1\n            while array[j] > pivot:\n                j -= 1\n            if i <= j:\n                array[i], array[j] = (array[j], array[i])\n                i += 1\n                j -= 1\n        if k <= j:\n            return quickselect(array, left, j, k)\n        elif k >= i:\n            return quickselect(array, i, right, k)\n        else:\n            return [i for i, x in enumerate(array) if x <= array[j]][:k]\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",100000,0.7725241999141872,0.7968113049911335,0.8286067000590265,N/A
p3_find_n_smallest_number,prompt_5,98,"['def funcImp(arr, k):\n\n    def quickselect(arr, k, low, high):\n        if low == high:\n            return arr[:k]\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[:k]\n        elif k < pivot_index:\n            return quickselect(arr, k, low, pivot_index - 1)\n        else:\n            return quickselect(arr, k, pivot_index + 1, high)\n\n    def partition(arr, low, high):\n        pivot_index = random.randint(low, high)\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[high] = (arr[high], arr[pivot_index])\n        store_index = low\n        for i in range(low, high):\n            if arr[i] < pivot:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[store_index], arr[high] = (arr[high], arr[store_index])\n        return store_index\n    return quickselect(arr, k - 1, 0, len(arr) - 1)[:k]']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,98,"['def funcImp(arr, k):\n\n    def quickselect(arr, k, low, high):\n        if low == high:\n            return arr[:k]\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[:k]\n        elif k < pivot_index:\n            return quickselect(arr, k, low, pivot_index - 1)\n        else:\n            return quickselect(arr, k, pivot_index + 1, high)\n\n    def partition(arr, low, high):\n        pivot_index = random.randint(low, high)\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[high] = (arr[high], arr[pivot_index])\n        store_index = low\n        for i in range(low, high):\n            if arr[i] < pivot:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[store_index], arr[high] = (arr[high], arr[store_index])\n        return store_index\n    return quickselect(arr, k - 1, 0, len(arr) - 1)[:k]']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,98,"['def funcImp(arr, k):\n\n    def quickselect(arr, k, low, high):\n        if low == high:\n            return arr[:k]\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[:k]\n        elif k < pivot_index:\n            return quickselect(arr, k, low, pivot_index - 1)\n        else:\n            return quickselect(arr, k, pivot_index + 1, high)\n\n    def partition(arr, low, high):\n        pivot_index = random.randint(low, high)\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[high] = (arr[high], arr[pivot_index])\n        store_index = low\n        for i in range(low, high):\n            if arr[i] < pivot:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[store_index], arr[high] = (arr[high], arr[store_index])\n        return store_index\n    return quickselect(arr, k - 1, 0, len(arr) - 1)[:k]']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,99,"['def funcImp(arg1, k):\n    sorted_arg1 = sorted(arg1)\n    indices = []\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indices.append(index)\n    return indices']",1000,0.003377899993211031,0.003576625995337963,0.004354099975898862,N/A
p3_find_n_smallest_number,prompt_5,99,"['def funcImp(arg1, k):\n    sorted_arg1 = sorted(arg1)\n    indices = []\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indices.append(index)\n    return indices']",10000,0.08524110005237162,0.08745325301541015,0.094765700167045,N/A
p3_find_n_smallest_number,prompt_5,99,"['def funcImp(arg1, k):\n    sorted_arg1 = sorted(arg1)\n    indices = []\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indices.append(index)\n    return indices']",100000,1.20984850008972,1.241728344995063,1.2872293000109494,N/A
p3_find_n_smallest_number,prompt_5,100,"['def quick_select(arr, l, r, k):\n    if k > 0 and k <= r - l + 1:\n        pivotIndex = partition(arr, l, r)\n        if pivotIndex - l == k - 1:\n            return pivotIndex\n        if pivotIndex - l > k - 1:\n            return quick_select(arr, l, pivotIndex - 1, k)\n        return quick_select(arr, pivotIndex + 1, r, k - pivotIndex + l - 1)\n    return -1\n\ndef partition(arr, l, r):\n    pivotIndex = choose_pivot(arr, l, r)\n    pivotValue = arr[pivotIndex]\n    arr[pivotIndex], arr[r] = (arr[r], arr[pivotIndex])\n    storeIndex = l\n    for i in range(l, r):\n        if arr[i] < pivotValue:\n            arr[storeIndex], arr[i] = (arr[i], arr[storeIndex])\n            storeIndex += 1\n    arr[r], arr[storeIndex] = (arr[storeIndex], arr[r])\n    return storeIndex\n\ndef choose_pivot(arr, l, r):\n    return (l + r) // 2\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    k_smallest_indices = []\n    for i in range(k):\n        index = quick_select(arg1, 0, len(arg1) - 1, i + 1)\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",1000,0.029966700123623013,0.03132367099402472,0.03774479986168444,N/A
p3_find_n_smallest_number,prompt_5,100,"['def quick_select(arr, l, r, k):\n    if k > 0 and k <= r - l + 1:\n        pivotIndex = partition(arr, l, r)\n        if pivotIndex - l == k - 1:\n            return pivotIndex\n        if pivotIndex - l > k - 1:\n            return quick_select(arr, l, pivotIndex - 1, k)\n        return quick_select(arr, pivotIndex + 1, r, k - pivotIndex + l - 1)\n    return -1\n\ndef partition(arr, l, r):\n    pivotIndex = choose_pivot(arr, l, r)\n    pivotValue = arr[pivotIndex]\n    arr[pivotIndex], arr[r] = (arr[r], arr[pivotIndex])\n    storeIndex = l\n    for i in range(l, r):\n        if arr[i] < pivotValue:\n            arr[storeIndex], arr[i] = (arr[i], arr[storeIndex])\n            storeIndex += 1\n    arr[r], arr[storeIndex] = (arr[storeIndex], arr[r])\n    return storeIndex\n\ndef choose_pivot(arr, l, r):\n    return (l + r) // 2\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    k_smallest_indices = []\n    for i in range(k):\n        index = quick_select(arg1, 0, len(arg1) - 1, i + 1)\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",10000,0.31025229999795556,0.31849381199106575,0.33673990005627275,N/A
p3_find_n_smallest_number,prompt_5,100,"['def quick_select(arr, l, r, k):\n    if k > 0 and k <= r - l + 1:\n        pivotIndex = partition(arr, l, r)\n        if pivotIndex - l == k - 1:\n            return pivotIndex\n        if pivotIndex - l > k - 1:\n            return quick_select(arr, l, pivotIndex - 1, k)\n        return quick_select(arr, pivotIndex + 1, r, k - pivotIndex + l - 1)\n    return -1\n\ndef partition(arr, l, r):\n    pivotIndex = choose_pivot(arr, l, r)\n    pivotValue = arr[pivotIndex]\n    arr[pivotIndex], arr[r] = (arr[r], arr[pivotIndex])\n    storeIndex = l\n    for i in range(l, r):\n        if arr[i] < pivotValue:\n            arr[storeIndex], arr[i] = (arr[i], arr[storeIndex])\n            storeIndex += 1\n    arr[r], arr[storeIndex] = (arr[storeIndex], arr[r])\n    return storeIndex\n\ndef choose_pivot(arr, l, r):\n    return (l + r) // 2\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    k_smallest_indices = []\n    for i in range(k):\n        index = quick_select(arg1, 0, len(arg1) - 1, i + 1)\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",100000,3.582250599982217,3.693953809007071,3.817183000035584,N/A
p3_find_n_smallest_number,prompt_6,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(min_heap, (arg1[i], i))\n        elif arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    smallest_indexes = sorted(heapq.nsmallest(arg2, min_heap))\n    return [i[1] for i in smallest_indexes]']",1000,0.0027318999636918306,0.0028982550092041494,0.004179499810561538,N/A
p3_find_n_smallest_number,prompt_6,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(min_heap, (arg1[i], i))\n        elif arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    smallest_indexes = sorted(heapq.nsmallest(arg2, min_heap))\n    return [i[1] for i in smallest_indexes]']",10000,0.027211899869143963,0.028721487992443145,0.03727380000054836,N/A
p3_find_n_smallest_number,prompt_6,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(min_heap, (arg1[i], i))\n        elif arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    smallest_indexes = sorted(heapq.nsmallest(arg2, min_heap))\n    return [i[1] for i in smallest_indexes]']",100000,0.27512469980865717,0.282403901994694,0.30250210012309253,N/A
p3_find_n_smallest_number,prompt_6,2,"['from heapq import heappush, heappop\n\ndef funcImp(arg1, k):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < k:\n            heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heappop(heap)\n            heappush(heap, (-num, i))\n    indices = []\n    for num, i in heap:\n        indices.append(i)\n    return indices if len(indices) == k else None']",1000,0.004115399904549122,0.004350278999190778,0.007631300017237663,N/A
p3_find_n_smallest_number,prompt_6,2,"['from heapq import heappush, heappop\n\ndef funcImp(arg1, k):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < k:\n            heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heappop(heap)\n            heappush(heap, (-num, i))\n    indices = []\n    for num, i in heap:\n        indices.append(i)\n    return indices if len(indices) == k else None']",10000,0.04041580017656088,0.04177531799301505,0.050151900155469775,N/A
p3_find_n_smallest_number,prompt_6,2,"['from heapq import heappush, heappop\n\ndef funcImp(arg1, k):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < k:\n            heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heappop(heap)\n            heappush(heap, (-num, i))\n    indices = []\n    for num, i in heap:\n        indices.append(i)\n    return indices if len(indices) == k else None']",100000,0.3981069999281317,0.40853648698888717,0.43109349999576807,N/A
p3_find_n_smallest_number,prompt_6,3,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n\n    def partition(arr, low, high, k):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        if i > k:\n            partition(arr, low, i - 1, k)\n        elif i < k:\n            partition(arr, i + 1, high, k)\n    partition(arg1, 0, len(arg1) - 1, arg2 - 1)\n    return sorted(list(range(arg2)))']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,3,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n\n    def partition(arr, low, high, k):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        if i > k:\n            partition(arr, low, i - 1, k)\n        elif i < k:\n            partition(arr, i + 1, high, k)\n    partition(arg1, 0, len(arg1) - 1, arg2 - 1)\n    return sorted(list(range(arg2)))']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,3,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n\n    def partition(arr, low, high, k):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        if i > k:\n            partition(arr, low, i - 1, k)\n        elif i < k:\n            partition(arr, i + 1, high, k)\n    partition(arg1, 0, len(arg1) - 1, arg2 - 1)\n    return sorted(list(range(arg2)))']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,4,"['def funcImp(arr, k):\n    min_element = min(arr)\n    max_element = max(arr)\n    count_arr = [0] * (max_element - min_element + 1)\n    index_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        count_arr[arr[i] - min_element] += 1\n        index_arr[i] = i\n    count_sum = 0\n    for i in range(len(count_arr)):\n        count_sum += count_arr[i]\n        if count_sum >= k:\n            break\n    k_indexes = sorted(index_arr[:count_sum])\n    return k_indexes']",1000,0.005172699922695756,0.005492446001153439,0.009544400032609701,N/A
p3_find_n_smallest_number,prompt_6,4,"['def funcImp(arr, k):\n    min_element = min(arr)\n    max_element = max(arr)\n    count_arr = [0] * (max_element - min_element + 1)\n    index_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        count_arr[arr[i] - min_element] += 1\n        index_arr[i] = i\n    count_sum = 0\n    for i in range(len(count_arr)):\n        count_sum += count_arr[i]\n        if count_sum >= k:\n            break\n    k_indexes = sorted(index_arr[:count_sum])\n    return k_indexes']",10000,0.05009820009581745,0.051884201997891066,0.057799499947577715,N/A
p3_find_n_smallest_number,prompt_6,4,"['def funcImp(arr, k):\n    min_element = min(arr)\n    max_element = max(arr)\n    count_arr = [0] * (max_element - min_element + 1)\n    index_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        count_arr[arr[i] - min_element] += 1\n        index_arr[i] = i\n    count_sum = 0\n    for i in range(len(count_arr)):\n        count_sum += count_arr[i]\n        if count_sum >= k:\n            break\n    k_indexes = sorted(index_arr[:count_sum])\n    return k_indexes']",100000,0.6543459000531584,0.6779123320034706,0.7257739999331534,N/A
p3_find_n_smallest_number,prompt_6,5,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapq.heappushpop(heap, arr[i])\n    return [arr.index(element) for element in heap]']",1000,0.002347400179132819,0.002505488994065672,0.0041693998500704765,N/A
p3_find_n_smallest_number,prompt_6,5,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapq.heappushpop(heap, arr[i])\n    return [arr.index(element) for element in heap]']",10000,0.02573580015450716,0.026721980008296668,0.03153089992702007,N/A
p3_find_n_smallest_number,prompt_6,5,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapq.heappushpop(heap, arr[i])\n    return [arr.index(element) for element in heap]']",100000,0.18451339984312654,0.1912121529923752,0.27485669986344874,N/A
p3_find_n_smallest_number,prompt_6,6,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0 or k > len(arr):\n        return []\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    idxs = {}\n    for i in range(k):\n        idxs[heap[i]] = i\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            del idxs[heap[0]]\n            heapq._heapreplace_max(heap, arr[i])\n            idxs[arr[i]] = i\n    return sorted(idxs.values())']",1000,0.001978399930521846,0.0021230239793658258,0.002807399956509471,N/A
p3_find_n_smallest_number,prompt_6,6,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0 or k > len(arr):\n        return []\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    idxs = {}\n    for i in range(k):\n        idxs[heap[i]] = i\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            del idxs[heap[0]]\n            heapq._heapreplace_max(heap, arr[i])\n            idxs[arr[i]] = i\n    return sorted(idxs.values())']",10000,0.018448200076818466,0.01941980600357056,0.022332499967887998,N/A
p3_find_n_smallest_number,prompt_6,6,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0 or k > len(arr):\n        return []\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    idxs = {}\n    for i in range(k):\n        idxs[heap[i]] = i\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            del idxs[heap[0]]\n            heapq._heapreplace_max(heap, arr[i])\n            idxs[arr[i]] = i\n    return sorted(idxs.values())']",100000,0.1870184000581503,0.19156640300760044,0.19868170004338026,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(k, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = []\n    while heap:\n        indexes.append(heapq.heappop(heap)[1])\n    return sorted(indexes)']",1000,0.0027740001678466797,0.0029524749983102084,0.003173600183799863,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(k, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = []\n    while heap:\n        indexes.append(heapq.heappop(heap)[1])\n    return sorted(indexes)']",10000,0.026362899923697114,0.02720953799318522,0.030259700026363134,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(k, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = []\n    while heap:\n        indexes.append(heapq.heappop(heap)[1])\n    return sorted(indexes)']",100000,0.26267709978856146,0.2696405169856735,0.28891600016504526,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    heap = list(arg1[:arg2])\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            res.append(i)\n    return res']",1000,0.005008900072425604,0.005295201984699816,0.008016800042241812,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    heap = list(arg1[:arg2])\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            res.append(i)\n    return res']",10000,0.051560299936681986,0.05319562700809911,0.061067699920386076,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    heap = list(arg1[:arg2])\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            res.append(i)\n    return res']",100000,0.5272217998281121,0.5396366859739646,0.5808075000531971,N/A
p3_find_n_smallest_number,prompt_6,9,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the array'\n    if arg2 == 0:\n        return []\n    if arg2 == len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]""]",1000,0.010062600020319223,0.010564296015072614,0.01440819981507957,N/A
p3_find_n_smallest_number,prompt_6,9,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the array'\n    if arg2 == 0:\n        return []\n    if arg2 == len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]""]",10000,0.07487699994817376,0.0772613160056062,0.08552820002660155,N/A
p3_find_n_smallest_number,prompt_6,9,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the array'\n    if arg2 == 0:\n        return []\n    if arg2 == len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]""]",100000,1.1741170999594033,1.193239661990665,1.2289511000271887,N/A
p3_find_n_smallest_number,prompt_6,10,"[""def funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array!'\n    elif arg2 == len(arg1):\n        return range(len(arg1))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapreplace(heap, (arg1[i], i))\n    indexes = sorted([heapq.heappop(heap)[1] for i in range(arg2)])\n    return indexes""]",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_6,10,"[""def funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array!'\n    elif arg2 == len(arg1):\n        return range(len(arg1))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapreplace(heap, (arg1[i], i))\n    indexes = sorted([heapq.heappop(heap)[1] for i in range(arg2)])\n    return indexes""]",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_6,10,"[""def funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array!'\n    elif arg2 == len(arg1):\n        return range(len(arg1))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapreplace(heap, (arg1[i], i))\n    indexes = sorted([heapq.heappop(heap)[1] for i in range(arg2)])\n    return indexes""]",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_6,11,"['def funcImp(arr, k):\n    n = len(arr)\n    freq = [0] * (max(arr) + 1)\n    for i in range(n):\n        freq[arr[i]] += 1\n    k_smallest = -1\n    count = 0\n    for i in range(max(arr) + 1):\n        if freq[i]:\n            count += freq[i]\n        if count >= k:\n            k_smallest = i\n            break\n    result = []\n    for i in range(n):\n        if arr[i] <= k_smallest:\n            result.append(i)\n            if len(result) == k:\n                return result\n    return result']",1000,0.0043289999011904,0.0046173020056448875,0.007643999997526407,N/A
p3_find_n_smallest_number,prompt_6,11,"['def funcImp(arr, k):\n    n = len(arr)\n    freq = [0] * (max(arr) + 1)\n    for i in range(n):\n        freq[arr[i]] += 1\n    k_smallest = -1\n    count = 0\n    for i in range(max(arr) + 1):\n        if freq[i]:\n            count += freq[i]\n        if count >= k:\n            k_smallest = i\n            break\n    result = []\n    for i in range(n):\n        if arr[i] <= k_smallest:\n            result.append(i)\n            if len(result) == k:\n                return result\n    return result']",10000,0.047690900042653084,0.04963542501907796,0.05615409999154508,N/A
p3_find_n_smallest_number,prompt_6,11,"['def funcImp(arr, k):\n    n = len(arr)\n    freq = [0] * (max(arr) + 1)\n    for i in range(n):\n        freq[arr[i]] += 1\n    k_smallest = -1\n    count = 0\n    for i in range(max(arr) + 1):\n        if freq[i]:\n            count += freq[i]\n        if count >= k:\n            k_smallest = i\n            break\n    result = []\n    for i in range(n):\n        if arr[i] <= k_smallest:\n            result.append(i)\n            if len(result) == k:\n                return result\n    return result']",100000,0.5522515999618918,0.5688676309864968,0.6406421000137925,N/A
p3_find_n_smallest_number,prompt_6,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = [None] * k\n    smallest = [float('inf')] * k\n    for i, x in enumerate(arg1):\n        if x < smallest[-1]:\n            j = k - 1\n            while j > 0 and x < smallest[j - 1]:\n                j -= 1\n            smallest[j] = x\n            indices[j] = i\n    return indices""]",1000,0.002951200120151043,0.003105550005566329,0.003672200022265315,N/A
p3_find_n_smallest_number,prompt_6,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = [None] * k\n    smallest = [float('inf')] * k\n    for i, x in enumerate(arg1):\n        if x < smallest[-1]:\n            j = k - 1\n            while j > 0 and x < smallest[j - 1]:\n                j -= 1\n            smallest[j] = x\n            indices[j] = i\n    return indices""]",10000,0.025673799915239215,0.02667621800210327,0.03054729988798499,N/A
p3_find_n_smallest_number,prompt_6,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = [None] * k\n    smallest = [float('inf')] * k\n    for i, x in enumerate(arg1):\n        if x < smallest[-1]:\n            j = k - 1\n            while j > 0 and x < smallest[j - 1]:\n                j -= 1\n            smallest[j] = x\n            indices[j] = i\n    return indices""]",100000,0.2550768000073731,0.26009388900129127,0.2725066998973489,N/A
p3_find_n_smallest_number,prompt_6,13,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return {}\n    k_smallest = {}\n    for i, num in enumerate(arg1):\n        if len(k_smallest) < arg2:\n            k_smallest[num] = []\n            k_smallest[num].append(i)\n        else:\n            max_key = max(k_smallest.keys())\n            if num < max_key:\n                del k_smallest[max_key]\n                k_smallest[num] = []\n                k_smallest[num].append(i)\n            elif num == max_key:\n                k_smallest[num].append(i)\n    return k_smallest']",1000,0.012100299820303917,0.012755010982509703,0.014295300003141165,N/A
p3_find_n_smallest_number,prompt_6,13,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return {}\n    k_smallest = {}\n    for i, num in enumerate(arg1):\n        if len(k_smallest) < arg2:\n            k_smallest[num] = []\n            k_smallest[num].append(i)\n        else:\n            max_key = max(k_smallest.keys())\n            if num < max_key:\n                del k_smallest[max_key]\n                k_smallest[num] = []\n                k_smallest[num].append(i)\n            elif num == max_key:\n                k_smallest[num].append(i)\n    return k_smallest']",10000,0.12247230019420385,0.12674544400535523,0.13709930004552007,N/A
p3_find_n_smallest_number,prompt_6,13,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return {}\n    k_smallest = {}\n    for i, num in enumerate(arg1):\n        if len(k_smallest) < arg2:\n            k_smallest[num] = []\n            k_smallest[num].append(i)\n        else:\n            max_key = max(k_smallest.keys())\n            if num < max_key:\n                del k_smallest[max_key]\n                k_smallest[num] = []\n                k_smallest[num].append(i)\n            elif num == max_key:\n                k_smallest[num].append(i)\n    return k_smallest']",100000,1.2102880000602454,1.2551719019934535,1.322053800104186,N/A
p3_find_n_smallest_number,prompt_6,14,"['from random import choice\n\ndef funcImp(arr, k):\n    n = len(arr)\n    if k > n or k < 1:\n        return []\n\n    def quickselect(idx):\n        left, right = ([], [])\n        pivot = choice(arr)\n        for i, val in enumerate(arr):\n            if val < pivot:\n                left.append(i)\n            elif val > pivot:\n                right.append(i)\n        if idx < len(left):\n            return quickselect(idx, left)\n        elif idx < len(left) + arr.count(pivot):\n            return [i for i, val in enumerate(arr) if val == pivot]\n        else:\n            return quickselect(idx - len(left) - arr.count(pivot), right)\n    return quickselect(k - 1)']",1000,0,0,0,	 exception: funcImp.<locals>.quickselect() takes 1 positional argument but 2 were given
p3_find_n_smallest_number,prompt_6,14,"['from random import choice\n\ndef funcImp(arr, k):\n    n = len(arr)\n    if k > n or k < 1:\n        return []\n\n    def quickselect(idx):\n        left, right = ([], [])\n        pivot = choice(arr)\n        for i, val in enumerate(arr):\n            if val < pivot:\n                left.append(i)\n            elif val > pivot:\n                right.append(i)\n        if idx < len(left):\n            return quickselect(idx, left)\n        elif idx < len(left) + arr.count(pivot):\n            return [i for i, val in enumerate(arr) if val == pivot]\n        else:\n            return quickselect(idx - len(left) - arr.count(pivot), right)\n    return quickselect(k - 1)']",10000,0,0,0,	 exception: funcImp.<locals>.quickselect() takes 1 positional argument but 2 were given
p3_find_n_smallest_number,prompt_6,14,"['from random import choice\n\ndef funcImp(arr, k):\n    n = len(arr)\n    if k > n or k < 1:\n        return []\n\n    def quickselect(idx):\n        left, right = ([], [])\n        pivot = choice(arr)\n        for i, val in enumerate(arr):\n            if val < pivot:\n                left.append(i)\n            elif val > pivot:\n                right.append(i)\n        if idx < len(left):\n            return quickselect(idx, left)\n        elif idx < len(left) + arr.count(pivot):\n            return [i for i, val in enumerate(arr) if val == pivot]\n        else:\n            return quickselect(idx - len(left) - arr.count(pivot), right)\n    return quickselect(k - 1)']",100000,0,0,0,	 exception: funcImp.<locals>.quickselect() takes 1 positional argument but 2 were given
p3_find_n_smallest_number,prompt_6,15,"['def funcImp(arg1, arg2):\n    pivot = arg1[0]\n    smaller = []\n    equal = []\n    for x in arg1:\n        if x < pivot:\n            smaller.append(x)\n        elif x == pivot:\n            equal.append(x)\n    if arg2 < len(smaller):\n        return funcImp(smaller, arg2)\n    elif arg2 < len(smaller) + len(equal):\n        return [i for i, x in enumerate(arg1) if x == pivot][:arg2 - len(smaller)]\n    else:\n        return funcImp([x for x in arg1 if x > pivot], arg2 - len(smaller) - len(equal))']",1000,0.003112700069323182,0.00323386101052165,0.003821900114417076,N/A
p3_find_n_smallest_number,prompt_6,15,"['def funcImp(arg1, arg2):\n    pivot = arg1[0]\n    smaller = []\n    equal = []\n    for x in arg1:\n        if x < pivot:\n            smaller.append(x)\n        elif x == pivot:\n            equal.append(x)\n    if arg2 < len(smaller):\n        return funcImp(smaller, arg2)\n    elif arg2 < len(smaller) + len(equal):\n        return [i for i, x in enumerate(arg1) if x == pivot][:arg2 - len(smaller)]\n    else:\n        return funcImp([x for x in arg1 if x > pivot], arg2 - len(smaller) - len(equal))']",10000,0.03846890013664961,0.040059858006425204,0.04952640016563237,N/A
p3_find_n_smallest_number,prompt_6,15,"['def funcImp(arg1, arg2):\n    pivot = arg1[0]\n    smaller = []\n    equal = []\n    for x in arg1:\n        if x < pivot:\n            smaller.append(x)\n        elif x == pivot:\n            equal.append(x)\n    if arg2 < len(smaller):\n        return funcImp(smaller, arg2)\n    elif arg2 < len(smaller) + len(equal):\n        return [i for i, x in enumerate(arg1) if x == pivot][:arg2 - len(smaller)]\n    else:\n        return funcImp([x for x in arg1 if x > pivot], arg2 - len(smaller) - len(equal))']",100000,0.5210070998873562,0.5374531809892505,0.5965728999581188,N/A
p3_find_n_smallest_number,prompt_6,16,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return list(range(n))\n    k_smallest = list(range(k))\n    max_idx = max(k_smallest, key=lambda x: arg1[x])\n    for i in range(k, n):\n        if arg1[i] < arg1[max_idx]:\n            k_smallest[max_idx] = i\n            max_idx = max(k_smallest, key=lambda x: arg1[x])\n    return k_smallest']",1000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_6,16,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return list(range(n))\n    k_smallest = list(range(k))\n    max_idx = max(k_smallest, key=lambda x: arg1[x])\n    for i in range(k, n):\n        if arg1[i] < arg1[max_idx]:\n            k_smallest[max_idx] = i\n            max_idx = max(k_smallest, key=lambda x: arg1[x])\n    return k_smallest']",10000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_6,16,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return list(range(n))\n    k_smallest = list(range(k))\n    max_idx = max(k_smallest, key=lambda x: arg1[x])\n    for i in range(k, n):\n        if arg1[i] < arg1[max_idx]:\n            k_smallest[max_idx] = i\n            max_idx = max(k_smallest, key=lambda x: arg1[x])\n    return k_smallest']",100000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_6,17,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    kth_smallest = select(arg1, 0, len(arg1) - 1, arg2 - 1)\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            result.append(i)\n        if len(result) == arg2:\n            break\n    return result\n\ndef select(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return select(arr, left, pivot_index - 1, k)\n    else:\n        return select(arr, pivot_index + 1, right, k)\n\ndef partition(arr, left, right):\n    pivot = arr[left]\n    i = left + 1\n    j = right\n    while True:\n        while i <= j and arr[i] < pivot:\n            i += 1\n        while i <= j and arr[j] >= pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = (arr[j], arr[i])\n        else:\n            break\n    arr[left], arr[j] = (arr[j], arr[left])\n    return j']",1000,0.010041099973022938,0.010481437013950198,0.012035799911245704,N/A
p3_find_n_smallest_number,prompt_6,17,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    kth_smallest = select(arg1, 0, len(arg1) - 1, arg2 - 1)\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            result.append(i)\n        if len(result) == arg2:\n            break\n    return result\n\ndef select(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return select(arr, left, pivot_index - 1, k)\n    else:\n        return select(arr, pivot_index + 1, right, k)\n\ndef partition(arr, left, right):\n    pivot = arr[left]\n    i = left + 1\n    j = right\n    while True:\n        while i <= j and arr[i] < pivot:\n            i += 1\n        while i <= j and arr[j] >= pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = (arr[j], arr[i])\n        else:\n            break\n    arr[left], arr[j] = (arr[j], arr[left])\n    return j']",10000,0.10750070004723966,0.11112933598691598,0.12404859997332096,N/A
p3_find_n_smallest_number,prompt_6,17,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    kth_smallest = select(arg1, 0, len(arg1) - 1, arg2 - 1)\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            result.append(i)\n        if len(result) == arg2:\n            break\n    return result\n\ndef select(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return select(arr, left, pivot_index - 1, k)\n    else:\n        return select(arr, pivot_index + 1, right, k)\n\ndef partition(arr, left, right):\n    pivot = arr[left]\n    i = left + 1\n    j = right\n    while True:\n        while i <= j and arr[i] < pivot:\n            i += 1\n        while i <= j and arr[j] >= pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = (arr[j], arr[i])\n        else:\n            break\n    arr[left], arr[j] = (arr[j], arr[left])\n    return j']",100000,1.0924706999212503,1.1139396699960344,1.1595817999914289,N/A
p3_find_n_smallest_number,prompt_6,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or len(arg1) < arg2:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        num, i = heapq.heappop(heap)\n        result.append((i, -num))\n    return result[::-1]']",1000,0.012405699817463756,0.01294877500506118,0.013368500163778663,N/A
p3_find_n_smallest_number,prompt_6,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or len(arg1) < arg2:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        num, i = heapq.heappop(heap)\n        result.append((i, -num))\n    return result[::-1]']",10000,0.12530989991500974,0.129481036006473,0.14758759993128479,N/A
p3_find_n_smallest_number,prompt_6,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or len(arg1) < arg2:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        num, i = heapq.heappop(heap)\n        result.append((i, -num))\n    return result[::-1]']",100000,1.26127910008654,1.2851273830188439,1.336535600014031,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    nsmallest = heapq.nsmallest(k, arg1)\n    indexes = []\n    for smallest in nsmallest:\n        indexes.append(arg1.index(smallest))\n    return indexes']",1000,0.0018267999403178692,0.0019426619983278215,0.0023612999357283115,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    nsmallest = heapq.nsmallest(k, arg1)\n    indexes = []\n    for smallest in nsmallest:\n        indexes.append(arg1.index(smallest))\n    return indexes']",10000,0.019903199980035424,0.02085080499993637,0.02900109998881817,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    nsmallest = heapq.nsmallest(k, arg1)\n    indexes = []\n    for smallest in nsmallest:\n        indexes.append(arg1.index(smallest))\n    return indexes']",100000,0.24564639991149306,0.2538856459921226,0.2670194001402706,N/A
p3_find_n_smallest_number,prompt_6,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    if len(arg1) < k:\n        return []\n    k_smallest = arg1[:k]\n    for i in range(k, len(arg1)):\n        max_idx = k_smallest.index(max(k_smallest))\n        if arg1[i] < k_smallest[max_idx]:\n            k_smallest[max_idx] = arg1[i]\n    return [arg1.index(x) for x in k_smallest[::-1]]']",1000,0.011521599953994155,0.011891713996883482,0.012198500102385879,N/A
p3_find_n_smallest_number,prompt_6,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    if len(arg1) < k:\n        return []\n    k_smallest = arg1[:k]\n    for i in range(k, len(arg1)):\n        max_idx = k_smallest.index(max(k_smallest))\n        if arg1[i] < k_smallest[max_idx]:\n            k_smallest[max_idx] = arg1[i]\n    return [arg1.index(x) for x in k_smallest[::-1]]']",10000,0.11935339984484017,0.12242456001462415,0.1349086998961866,N/A
p3_find_n_smallest_number,prompt_6,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    if len(arg1) < k:\n        return []\n    k_smallest = arg1[:k]\n    for i in range(k, len(arg1)):\n        max_idx = k_smallest.index(max(k_smallest))\n        if arg1[i] < k_smallest[max_idx]:\n            k_smallest[max_idx] = arg1[i]\n    return [arg1.index(x) for x in k_smallest[::-1]]']",100000,1.1730416000355035,1.1920843700063415,1.2446043998934329,N/A
p3_find_n_smallest_number,prompt_6,21,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    sorted_arg1 = sorted(arg1)\n    index_dict = {}\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        index_dict[i] = index\n    index_list = [index_dict[i] for i in range(arg2)]\n    return index_list']",1000,0.0033427001908421516,0.0035988259874284267,0.004597799852490425,N/A
p3_find_n_smallest_number,prompt_6,21,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    sorted_arg1 = sorted(arg1)\n    index_dict = {}\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        index_dict[i] = index\n    index_list = [index_dict[i] for i in range(arg2)]\n    return index_list']",10000,0.08459049998782575,0.08737245198804885,0.09474719990976155,N/A
p3_find_n_smallest_number,prompt_6,21,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    sorted_arg1 = sorted(arg1)\n    index_dict = {}\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        index_dict[i] = index\n    index_list = [index_dict[i] for i in range(arg2)]\n    return index_list']",100000,1.1996994998771697,1.2229564240085893,1.2521441001445055,N/A
p3_find_n_smallest_number,prompt_6,22,"['def funcImp(arg1, arg2):\n    smallest_indexes = {}\n    for idx, elem in enumerate(arg1):\n        if len(smallest_indexes) < arg2:\n            smallest_indexes[idx] = elem\n        elif elem < max(smallest_indexes.values()):\n            max_elem_key = max(smallest_indexes, key=smallest_indexes.get)\n            del smallest_indexes[max_elem_key]\n            smallest_indexes[idx] = elem\n    return sorted(smallest_indexes.keys())']",1000,0.01172249997034669,0.012203575016465039,0.01383430021815002,N/A
p3_find_n_smallest_number,prompt_6,22,"['def funcImp(arg1, arg2):\n    smallest_indexes = {}\n    for idx, elem in enumerate(arg1):\n        if len(smallest_indexes) < arg2:\n            smallest_indexes[idx] = elem\n        elif elem < max(smallest_indexes.values()):\n            max_elem_key = max(smallest_indexes, key=smallest_indexes.get)\n            del smallest_indexes[max_elem_key]\n            smallest_indexes[idx] = elem\n    return sorted(smallest_indexes.keys())']",10000,0.11196140013635159,0.11635006998665631,0.1251254000235349,N/A
p3_find_n_smallest_number,prompt_6,22,"['def funcImp(arg1, arg2):\n    smallest_indexes = {}\n    for idx, elem in enumerate(arg1):\n        if len(smallest_indexes) < arg2:\n            smallest_indexes[idx] = elem\n        elif elem < max(smallest_indexes.values()):\n            max_elem_key = max(smallest_indexes, key=smallest_indexes.get)\n            del smallest_indexes[max_elem_key]\n            smallest_indexes[idx] = elem\n    return sorted(smallest_indexes.keys())']",100000,1.107479700120166,1.136659267002251,1.1965133000630885,N/A
p3_find_n_smallest_number,prompt_6,23,"['def funcImp(arg1, arg2):\n    k = arg2\n    if not arg1 or k < 1 or k > len(arg1):\n        return []\n\n    def quickselect(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_index = random.randint(left, right)\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        if k == store_index:\n            return store_index\n        elif k < store_index:\n            return quickselect(arr, left, store_index - 1, k)\n        else:\n            return quickselect(arr, store_index + 1, right, k)\n    index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    result = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return result']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,23,"['def funcImp(arg1, arg2):\n    k = arg2\n    if not arg1 or k < 1 or k > len(arg1):\n        return []\n\n    def quickselect(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_index = random.randint(left, right)\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        if k == store_index:\n            return store_index\n        elif k < store_index:\n            return quickselect(arr, left, store_index - 1, k)\n        else:\n            return quickselect(arr, store_index + 1, right, k)\n    index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    result = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return result']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,23,"['def funcImp(arg1, arg2):\n    k = arg2\n    if not arg1 or k < 1 or k > len(arg1):\n        return []\n\n    def quickselect(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_index = random.randint(left, right)\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        if k == store_index:\n            return store_index\n        elif k < store_index:\n            return quickselect(arr, left, store_index - 1, k)\n        else:\n            return quickselect(arr, store_index + 1, right, k)\n    index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    result = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return result']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,24,"[""import heapq\n\ndef funcImp(arr, k):\n    n = len(arr)\n    if n < k:\n        return 'Error: k is greater than the length of array'\n    elif n == k:\n        return list(range(n))\n    max_heap = []\n    for i in range(k):\n        heapq.heappush(max_heap, (-arr[i], i))\n    for i in range(k, n):\n        if arr[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arr[i], i))\n    indexes = []\n    for i in range(k):\n        indexes.append(heapq.heappop(max_heap)[1])\n    return indexes""]",1000,0.002742200158536434,0.00295207999413833,0.0032723001204431057,N/A
p3_find_n_smallest_number,prompt_6,24,"[""import heapq\n\ndef funcImp(arr, k):\n    n = len(arr)\n    if n < k:\n        return 'Error: k is greater than the length of array'\n    elif n == k:\n        return list(range(n))\n    max_heap = []\n    for i in range(k):\n        heapq.heappush(max_heap, (-arr[i], i))\n    for i in range(k, n):\n        if arr[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arr[i], i))\n    indexes = []\n    for i in range(k):\n        indexes.append(heapq.heappop(max_heap)[1])\n    return indexes""]",10000,0.026065700221806765,0.027220860994420944,0.03251899988390505,N/A
p3_find_n_smallest_number,prompt_6,24,"[""import heapq\n\ndef funcImp(arr, k):\n    n = len(arr)\n    if n < k:\n        return 'Error: k is greater than the length of array'\n    elif n == k:\n        return list(range(n))\n    max_heap = []\n    for i in range(k):\n        heapq.heappush(max_heap, (-arr[i], i))\n    for i in range(k, n):\n        if arr[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arr[i], i))\n    indexes = []\n    for i in range(k):\n        indexes.append(heapq.heappop(max_heap)[1])\n    return indexes""]",100000,0.2614568001590669,0.26741179001284765,0.2955898998770863,N/A
p3_find_n_smallest_number,prompt_6,25,"['def funcImp(arg1, k):\n    sorted_arr = sorted(arg1)\n    indices = []\n    for i in range(k):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",1000,0.0032962998375296593,0.0035640240111388267,0.005210400093346834,N/A
p3_find_n_smallest_number,prompt_6,25,"['def funcImp(arg1, k):\n    sorted_arr = sorted(arg1)\n    indices = []\n    for i in range(k):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",10000,0.08405850012786686,0.08727754100691527,0.09403010015375912,N/A
p3_find_n_smallest_number,prompt_6,25,"['def funcImp(arg1, k):\n    sorted_arr = sorted(arg1)\n    indices = []\n    for i in range(k):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",100000,1.2010729999747127,1.2253264360199683,1.2623900999315083,N/A
p3_find_n_smallest_number,prompt_6,26,"['import heapq\n\ndef funcImp(arr, k):\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if -min_heap[0][0] > arr[i]:\n            heapq.heapreplace(min_heap, (-arr[i], i))\n    return [tup[1] for tup in sorted(min_heap)]']",1000,0.0027572999242693186,0.0029310119827277957,0.003486400004476309,N/A
p3_find_n_smallest_number,prompt_6,26,"['import heapq\n\ndef funcImp(arr, k):\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if -min_heap[0][0] > arr[i]:\n            heapq.heapreplace(min_heap, (-arr[i], i))\n    return [tup[1] for tup in sorted(min_heap)]']",10000,0.026876899879425764,0.027938522011972965,0.03579090000130236,N/A
p3_find_n_smallest_number,prompt_6,26,"['import heapq\n\ndef funcImp(arr, k):\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if -min_heap[0][0] > arr[i]:\n            heapq.heapreplace(min_heap, (-arr[i], i))\n    return [tup[1] for tup in sorted(min_heap)]']",100000,0.2654764000326395,0.2714669799990952,0.29868400003761053,N/A
p3_find_n_smallest_number,prompt_6,27,"['import random\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    kth_smallest = quick_select(arg1, arg2)\n    indices = []\n    for i, x in enumerate(arg1):\n        if x <= kth_smallest:\n            indices.append(i)\n    if len(indices) < arg2:\n        indices += [i for i, x in enumerate(arg1) if x == kth_smallest][:arg2 - len(indices)]\n    return indices\n\ndef partition(A, start, end):\n    pivot_index = random.randint(start, end)\n    pivot = A[pivot_index]\n    A[end], A[pivot_index] = (A[pivot_index], A[end])\n    i = start - 1\n    for j in range(start, end):\n        if A[j] < pivot:\n            i += 1\n            A[i], A[j] = (A[j], A[i])\n    i += 1\n    A[i], A[end] = (A[end], A[i])\n    return i\n\ndef quick_select(A, k):\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        pivot_index = partition(A, left, right)\n        if pivot_index == k - 1:\n            return A[pivot_index]\n        elif pivot_index > k - 1:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n    return A[k - 1]']",1000,0.007485700072720647,0.008314417994115501,0.011651299893856049,N/A
p3_find_n_smallest_number,prompt_6,27,"['import random\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    kth_smallest = quick_select(arg1, arg2)\n    indices = []\n    for i, x in enumerate(arg1):\n        if x <= kth_smallest:\n            indices.append(i)\n    if len(indices) < arg2:\n        indices += [i for i, x in enumerate(arg1) if x == kth_smallest][:arg2 - len(indices)]\n    return indices\n\ndef partition(A, start, end):\n    pivot_index = random.randint(start, end)\n    pivot = A[pivot_index]\n    A[end], A[pivot_index] = (A[pivot_index], A[end])\n    i = start - 1\n    for j in range(start, end):\n        if A[j] < pivot:\n            i += 1\n            A[i], A[j] = (A[j], A[i])\n    i += 1\n    A[i], A[end] = (A[end], A[i])\n    return i\n\ndef quick_select(A, k):\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        pivot_index = partition(A, left, right)\n        if pivot_index == k - 1:\n            return A[pivot_index]\n        elif pivot_index > k - 1:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n    return A[k - 1]']",10000,0.07303119986318052,0.08117901598336175,0.08927559992298484,N/A
p3_find_n_smallest_number,prompt_6,27,"['import random\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    kth_smallest = quick_select(arg1, arg2)\n    indices = []\n    for i, x in enumerate(arg1):\n        if x <= kth_smallest:\n            indices.append(i)\n    if len(indices) < arg2:\n        indices += [i for i, x in enumerate(arg1) if x == kth_smallest][:arg2 - len(indices)]\n    return indices\n\ndef partition(A, start, end):\n    pivot_index = random.randint(start, end)\n    pivot = A[pivot_index]\n    A[end], A[pivot_index] = (A[pivot_index], A[end])\n    i = start - 1\n    for j in range(start, end):\n        if A[j] < pivot:\n            i += 1\n            A[i], A[j] = (A[j], A[i])\n    i += 1\n    A[i], A[end] = (A[end], A[i])\n    return i\n\ndef quick_select(A, k):\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        pivot_index = partition(A, left, right)\n        if pivot_index == k - 1:\n            return A[pivot_index]\n        elif pivot_index > k - 1:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n    return A[k - 1]']",100000,0.912011600099504,1.0081528050010093,1.1329018999822438,N/A
p3_find_n_smallest_number,prompt_6,28,"['{\'code\': None, \'raw\': ""I\'m sorry, I cannot see the prior code as it was not included in the message. Please provide the code so I can assist you in fixing the issue."", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,28,"['{\'code\': None, \'raw\': ""I\'m sorry, I cannot see the prior code as it was not included in the message. Please provide the code so I can assist you in fixing the issue."", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,28,"['{\'code\': None, \'raw\': ""I\'m sorry, I cannot see the prior code as it was not included in the message. Please provide the code so I can assist you in fixing the issue."", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,29,"[""def funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k >= n:\n        return list(range(n))\n    k_smallest = [(0, float('inf'))] * k\n    for i in range(n):\n        if arg1[i] < k_smallest[-1][1]:\n            k_smallest[-1] = (i, arg1[i])\n            k_smallest.sort(key=lambda x: x[1])\n    return [x[0] for x in k_smallest]""]",1000,0.00324749993160367,0.0033925579953938724,0.003714499995112419,N/A
p3_find_n_smallest_number,prompt_6,29,"[""def funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k >= n:\n        return list(range(n))\n    k_smallest = [(0, float('inf'))] * k\n    for i in range(n):\n        if arg1[i] < k_smallest[-1][1]:\n            k_smallest[-1] = (i, arg1[i])\n            k_smallest.sort(key=lambda x: x[1])\n    return [x[0] for x in k_smallest]""]",10000,0.02630160003900528,0.027346013982314617,0.03052260004915297,N/A
p3_find_n_smallest_number,prompt_6,29,"[""def funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k >= n:\n        return list(range(n))\n    k_smallest = [(0, float('inf'))] * k\n    for i in range(n):\n        if arg1[i] < k_smallest[-1][1]:\n            k_smallest[-1] = (i, arg1[i])\n            k_smallest.sort(key=lambda x: x[1])\n    return [x[0] for x in k_smallest]""]",100000,0.2589592000003904,0.2688586220005527,0.28684189985506237,N/A
p3_find_n_smallest_number,prompt_6,30,"['def find_k_smallest_indexes(arr, k):\n    if k <= 0 or k > len(arr):\n        return []\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[-1]\n        smaller = [x for x in arr if x < pivot]\n        larger = [x for x in arr if x > pivot]\n        num_smaller = len(smaller)\n        if k <= num_smaller:\n            return quickselect(smaller, k)\n        elif k == num_smaller + 1:\n            return pivot\n        else:\n            return quickselect(larger, k - (num_smaller + 1))\n    kth_smallest = quickselect(arr, k)\n    k_smallest_indexes = set()\n    for i, num in enumerate(arr):\n        if num <= kth_smallest:\n            k_smallest_indexes.add(i)\n            if len(k_smallest_indexes) == k:\n                break\n    return list(k_smallest_indexes)']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,30,"['def find_k_smallest_indexes(arr, k):\n    if k <= 0 or k > len(arr):\n        return []\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[-1]\n        smaller = [x for x in arr if x < pivot]\n        larger = [x for x in arr if x > pivot]\n        num_smaller = len(smaller)\n        if k <= num_smaller:\n            return quickselect(smaller, k)\n        elif k == num_smaller + 1:\n            return pivot\n        else:\n            return quickselect(larger, k - (num_smaller + 1))\n    kth_smallest = quickselect(arr, k)\n    k_smallest_indexes = set()\n    for i, num in enumerate(arr):\n        if num <= kth_smallest:\n            k_smallest_indexes.add(i)\n            if len(k_smallest_indexes) == k:\n                break\n    return list(k_smallest_indexes)']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,30,"['def find_k_smallest_indexes(arr, k):\n    if k <= 0 or k > len(arr):\n        return []\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[-1]\n        smaller = [x for x in arr if x < pivot]\n        larger = [x for x in arr if x > pivot]\n        num_smaller = len(smaller)\n        if k <= num_smaller:\n            return quickselect(smaller, k)\n        elif k == num_smaller + 1:\n            return pivot\n        else:\n            return quickselect(larger, k - (num_smaller + 1))\n    kth_smallest = quickselect(arr, k)\n    k_smallest_indexes = set()\n    for i, num in enumerate(arr):\n        if num <= kth_smallest:\n            k_smallest_indexes.add(i)\n            if len(k_smallest_indexes) == k:\n                break\n    return list(k_smallest_indexes)']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,31,"['def funcImp(arr, k):\n    min_val = min(arr)\n    max_val = max(arr)\n    counting_arr = [0] * (max_val - min_val + 1)\n    for num in arr:\n        counting_arr[num - min_val] += 1\n    res = []\n    i = 0\n    while len(res) < k:\n        if counting_arr[i] != 0:\n            res.append(arr.index(i + min_val))\n            counting_arr[i] -= 1\n        else:\n            i += 1\n    return res']",1000,0.004476299975067377,0.004754085005261004,0.005974699975922704,N/A
p3_find_n_smallest_number,prompt_6,31,"['def funcImp(arr, k):\n    min_val = min(arr)\n    max_val = max(arr)\n    counting_arr = [0] * (max_val - min_val + 1)\n    for num in arr:\n        counting_arr[num - min_val] += 1\n    res = []\n    i = 0\n    while len(res) < k:\n        if counting_arr[i] != 0:\n            res.append(arr.index(i + min_val))\n            counting_arr[i] -= 1\n        else:\n            i += 1\n    return res']",10000,0.046831199899315834,0.04903718498768285,0.05733969993889332,N/A
p3_find_n_smallest_number,prompt_6,31,"['def funcImp(arr, k):\n    min_val = min(arr)\n    max_val = max(arr)\n    counting_arr = [0] * (max_val - min_val + 1)\n    for num in arr:\n        counting_arr[num - min_val] += 1\n    res = []\n    i = 0\n    while len(res) < k:\n        if counting_arr[i] != 0:\n            res.append(arr.index(i + min_val))\n            counting_arr[i] -= 1\n        else:\n            i += 1\n    return res']",100000,0.5412437999621034,0.5622385099926032,0.6180602998938411,N/A
p3_find_n_smallest_number,prompt_6,32,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        return []\n\n    def quickselect(nums, k):\n        pivot = nums[0]\n        left = []\n        right = []\n        for num in nums[1:]:\n            if num < pivot:\n                left.append(num)\n            else:\n                right.append(num)\n        if len(left) == k - 1:\n            return nums.index(pivot)\n        elif len(left) < k - 1:\n            return len(left) + quickselect(right, k - len(left) - 1)\n        else:\n            return quickselect(left, k)\n    kth = arg1[quickselect(arg1, arg2)]\n    res = []\n    for i in range(n):\n        if arg1[i] <= kth:\n            res.append(i)\n            if len(res) == arg2:\n                break\n    return res']",1000,0.0038046000991016626,0.004003355002496391,0.006440199911594391,N/A
p3_find_n_smallest_number,prompt_6,32,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        return []\n\n    def quickselect(nums, k):\n        pivot = nums[0]\n        left = []\n        right = []\n        for num in nums[1:]:\n            if num < pivot:\n                left.append(num)\n            else:\n                right.append(num)\n        if len(left) == k - 1:\n            return nums.index(pivot)\n        elif len(left) < k - 1:\n            return len(left) + quickselect(right, k - len(left) - 1)\n        else:\n            return quickselect(left, k)\n    kth = arg1[quickselect(arg1, arg2)]\n    res = []\n    for i in range(n):\n        if arg1[i] <= kth:\n            res.append(i)\n            if len(res) == arg2:\n                break\n    return res']",10000,0.04297600011341274,0.044747525991406294,0.04858220019377768,N/A
p3_find_n_smallest_number,prompt_6,32,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        return []\n\n    def quickselect(nums, k):\n        pivot = nums[0]\n        left = []\n        right = []\n        for num in nums[1:]:\n            if num < pivot:\n                left.append(num)\n            else:\n                right.append(num)\n        if len(left) == k - 1:\n            return nums.index(pivot)\n        elif len(left) < k - 1:\n            return len(left) + quickselect(right, k - len(left) - 1)\n        else:\n            return quickselect(left, k)\n    kth = arg1[quickselect(arg1, arg2)]\n    res = []\n    for i in range(n):\n        if arg1[i] <= kth:\n            res.append(i)\n            if len(res) == arg2:\n                break\n    return res']",100000,0.6733872001059353,0.701421643991489,0.7605959998909384,N/A
p3_find_n_smallest_number,prompt_6,33,"[""def funcImp(arg1, k):\n    if len(arg1) <= k:\n        return list(range(len(arg1)))\n    smallest = [(float('inf'), -1)] * k\n    for i, num in enumerate(arg1):\n        if num < smallest[-1][0]:\n            smallest[-1] = (num, i)\n            smallest.sort()\n    return [index for _, index in smallest]""]",1000,0.0031254999339580536,0.003276421995833516,0.005872400011867285,N/A
p3_find_n_smallest_number,prompt_6,33,"[""def funcImp(arg1, k):\n    if len(arg1) <= k:\n        return list(range(len(arg1)))\n    smallest = [(float('inf'), -1)] * k\n    for i, num in enumerate(arg1):\n        if num < smallest[-1][0]:\n            smallest[-1] = (num, i)\n            smallest.sort()\n    return [index for _, index in smallest]""]",10000,0.028476999839767814,0.029799899992067367,0.03470929991453886,N/A
p3_find_n_smallest_number,prompt_6,33,"[""def funcImp(arg1, k):\n    if len(arg1) <= k:\n        return list(range(len(arg1)))\n    smallest = [(float('inf'), -1)] * k\n    for i, num in enumerate(arg1):\n        if num < smallest[-1][0]:\n            smallest[-1] = (num, i)\n            smallest.sort()\n    return [index for _, index in smallest]""]",100000,0.2907241000793874,0.30159831600962206,0.33138960017822683,N/A
p3_find_n_smallest_number,prompt_6,34,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for index, number in enumerate(arg1):\n        if number in sorted_array and number not in result:\n            result.append(index)\n            if len(result) == arg2:\n                break\n    return result']",1000,0.004240300040692091,0.004662196997087449,0.00902569992467761,N/A
p3_find_n_smallest_number,prompt_6,34,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for index, number in enumerate(arg1):\n        if number in sorted_array and number not in result:\n            result.append(index)\n            if len(result) == arg2:\n                break\n    return result']",10000,0.10092539992183447,0.10516693201148883,0.11111800000071526,N/A
p3_find_n_smallest_number,prompt_6,34,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for index, number in enumerate(arg1):\n        if number in sorted_array and number not in result:\n            result.append(index)\n            if len(result) == arg2:\n                break\n    return result']",100000,1.4214409999549389,1.467623051996343,1.5520024998113513,N/A
p3_find_n_smallest_number,prompt_6,35,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    k_smallest = dict(zip(range(arg2), arg1[:arg2]))\n    max_val = max(k_smallest, key=k_smallest.get)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < k_smallest[max_val]:\n            k_smallest[max_val] = arg1[i]\n            max_val = max(k_smallest, key=k_smallest.get)\n    return sorted(k_smallest.values())']",1000,0.0025960998609662056,0.0027081840042956174,0.0028745001181960106,N/A
p3_find_n_smallest_number,prompt_6,35,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    k_smallest = dict(zip(range(arg2), arg1[:arg2]))\n    max_val = max(k_smallest, key=k_smallest.get)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < k_smallest[max_val]:\n            k_smallest[max_val] = arg1[i]\n            max_val = max(k_smallest, key=k_smallest.get)\n    return sorted(k_smallest.values())']",10000,0.021398300072178245,0.022259213011711836,0.024744699941948056,N/A
p3_find_n_smallest_number,prompt_6,35,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    k_smallest = dict(zip(range(arg2), arg1[:arg2]))\n    max_val = max(k_smallest, key=k_smallest.get)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < k_smallest[max_val]:\n            k_smallest[max_val] = arg1[i]\n            max_val = max(k_smallest, key=k_smallest.get)\n    return sorted(k_smallest.values())']",100000,0.2119434999767691,0.22230545800644905,0.24902220000512898,N/A
p3_find_n_smallest_number,prompt_6,36,"['def funcImp(arg1, arg2):\n    import heapq\n    if len(arg1) <= arg2:\n        return list(range(len(arg1)))\n    h = []\n    for i, x in enumerate(arg1):\n        heapq.heappush(h, (-x, i))\n        if len(h) > arg2:\n            heapq.heappop(h)\n    return [x[1] for x in h][::-1]']",1000,0.012143000029027462,0.012793943011201918,0.014148700051009655,N/A
p3_find_n_smallest_number,prompt_6,36,"['def funcImp(arg1, arg2):\n    import heapq\n    if len(arg1) <= arg2:\n        return list(range(len(arg1)))\n    h = []\n    for i, x in enumerate(arg1):\n        heapq.heappush(h, (-x, i))\n        if len(h) > arg2:\n            heapq.heappop(h)\n    return [x[1] for x in h][::-1]']",10000,0.12373020011000335,0.12867798699531705,0.14739830000326037,N/A
p3_find_n_smallest_number,prompt_6,36,"['def funcImp(arg1, arg2):\n    import heapq\n    if len(arg1) <= arg2:\n        return list(range(len(arg1)))\n    h = []\n    for i, x in enumerate(arg1):\n        heapq.heappush(h, (-x, i))\n        if len(h) > arg2:\n            heapq.heappop(h)\n    return [x[1] for x in h][::-1]']",100000,1.2625085001345724,1.2904340320150367,1.3628178001381457,N/A
p3_find_n_smallest_number,prompt_6,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if n < k:\n        return []\n    heap = [(arg1[i], i) for i in range(n)]\n    heapq.heapify(heap)\n    res = []\n    for i in range(k):\n        elem, index = heapq.heappop(heap)\n        res.append(index)\n    return res']",1000,0.004770700121298432,0.005052591003477574,0.006355599965900183,N/A
p3_find_n_smallest_number,prompt_6,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if n < k:\n        return []\n    heap = [(arg1[i], i) for i in range(n)]\n    heapq.heapify(heap)\n    res = []\n    for i in range(k):\n        elem, index = heapq.heappop(heap)\n        res.append(index)\n    return res']",10000,0.0628496001008898,0.0657374730007723,0.07138730003498495,N/A
p3_find_n_smallest_number,prompt_6,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if n < k:\n        return []\n    heap = [(arg1[i], i) for i in range(n)]\n    heapq.heapify(heap)\n    res = []\n    for i in range(k):\n        elem, index = heapq.heappop(heap)\n        res.append(index)\n    return res']",100000,0.7331580999307334,0.7714891809900292,0.8536132997833192,N/A
p3_find_n_smallest_number,prompt_6,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    elif arg2 > len(arg1):\n        return []\n    else:\n        heap = [(-arg1[i], i) for i in range(arg2)]\n        heapq.heapify(heap)\n        for i in range(arg2, len(arg1)):\n            if -heap[0][0] > arg1[i]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-arg1[i], i))\n        return [heapq.heappop(heap)[1] for _ in range(arg2)]']",1000,0.002953300019726157,0.0030712770065292718,0.0037624998949468136,N/A
p3_find_n_smallest_number,prompt_6,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    elif arg2 > len(arg1):\n        return []\n    else:\n        heap = [(-arg1[i], i) for i in range(arg2)]\n        heapq.heapify(heap)\n        for i in range(arg2, len(arg1)):\n            if -heap[0][0] > arg1[i]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-arg1[i], i))\n        return [heapq.heappop(heap)[1] for _ in range(arg2)]']",10000,0.026444299845024943,0.027948976994957776,0.03210490010678768,N/A
p3_find_n_smallest_number,prompt_6,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    elif arg2 > len(arg1):\n        return []\n    else:\n        heap = [(-arg1[i], i) for i in range(arg2)]\n        heapq.heapify(heap)\n        for i in range(arg2, len(arg1)):\n            if -heap[0][0] > arg1[i]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-arg1[i], i))\n        return [heapq.heappop(heap)[1] for _ in range(arg2)]']",100000,0.26450970000587404,0.27595330400159584,0.2990307998843491,N/A
p3_find_n_smallest_number,prompt_6,39,"['def funcImp(arg1, arg2):\n    arr_copy = arg1.copy()\n    arr_copy.sort()\n    indices = []\n    for i in arg1:\n        if len(indices) == arg2:\n            break\n        if i in arr_copy[:arg2]:\n            indices.append(arg1.index(i))\n    return indices']",1000,0.00593540002591908,0.006344815995544195,0.007174600148573518,N/A
p3_find_n_smallest_number,prompt_6,39,"['def funcImp(arg1, arg2):\n    arr_copy = arg1.copy()\n    arr_copy.sort()\n    indices = []\n    for i in arg1:\n        if len(indices) == arg2:\n            break\n        if i in arr_copy[:arg2]:\n            indices.append(arg1.index(i))\n    return indices']",10000,0.1293143001385033,0.13532394299749284,0.15496330009773374,N/A
p3_find_n_smallest_number,prompt_6,39,"['def funcImp(arg1, arg2):\n    arr_copy = arg1.copy()\n    arr_copy.sort()\n    indices = []\n    for i in arg1:\n        if len(indices) == arg2:\n            break\n        if i in arr_copy[:arg2]:\n            indices.append(arg1.index(i))\n    return indices']",100000,1.8630763001274318,1.9081844670069403,2.0119618999306113,N/A
p3_find_n_smallest_number,prompt_6,40,"['def funcImp(arg1, arg2):\n    k = arg2\n    left = 0\n    right = len(arg1) - 1\n    while True:\n        pivotIndex = random.randint(left, right)\n        pivotNewIndex = partition(arg1, left, right, pivotIndex)\n        if pivotNewIndex == k - 1:\n            kthSmallest = arg1[pivotNewIndex]\n            break\n        elif pivotNewIndex > k - 1:\n            right = pivotNewIndex - 1\n        else:\n            left = pivotNewIndex + 1\n    kthSmallestIndices = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            kthSmallestIndices.append(i)\n            if len(kthSmallestIndices) == k:\n                break\n    return kthSmallestIndices\n\ndef partition(arr, left, right, pivotIndex):\n    pivotValue = arr[pivotIndex]\n    arr[pivotIndex], arr[right] = (arr[right], arr[pivotIndex])\n    storeIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            arr[i], arr[storeIndex] = (arr[storeIndex], arr[i])\n            storeIndex += 1\n    arr[right], arr[storeIndex] = (arr[storeIndex], arr[right])\n    return storeIndex']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,40,"['def funcImp(arg1, arg2):\n    k = arg2\n    left = 0\n    right = len(arg1) - 1\n    while True:\n        pivotIndex = random.randint(left, right)\n        pivotNewIndex = partition(arg1, left, right, pivotIndex)\n        if pivotNewIndex == k - 1:\n            kthSmallest = arg1[pivotNewIndex]\n            break\n        elif pivotNewIndex > k - 1:\n            right = pivotNewIndex - 1\n        else:\n            left = pivotNewIndex + 1\n    kthSmallestIndices = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            kthSmallestIndices.append(i)\n            if len(kthSmallestIndices) == k:\n                break\n    return kthSmallestIndices\n\ndef partition(arr, left, right, pivotIndex):\n    pivotValue = arr[pivotIndex]\n    arr[pivotIndex], arr[right] = (arr[right], arr[pivotIndex])\n    storeIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            arr[i], arr[storeIndex] = (arr[storeIndex], arr[i])\n            storeIndex += 1\n    arr[right], arr[storeIndex] = (arr[storeIndex], arr[right])\n    return storeIndex']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,40,"['def funcImp(arg1, arg2):\n    k = arg2\n    left = 0\n    right = len(arg1) - 1\n    while True:\n        pivotIndex = random.randint(left, right)\n        pivotNewIndex = partition(arg1, left, right, pivotIndex)\n        if pivotNewIndex == k - 1:\n            kthSmallest = arg1[pivotNewIndex]\n            break\n        elif pivotNewIndex > k - 1:\n            right = pivotNewIndex - 1\n        else:\n            left = pivotNewIndex + 1\n    kthSmallestIndices = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            kthSmallestIndices.append(i)\n            if len(kthSmallestIndices) == k:\n                break\n    return kthSmallestIndices\n\ndef partition(arr, left, right, pivotIndex):\n    pivotValue = arr[pivotIndex]\n    arr[pivotIndex], arr[right] = (arr[right], arr[pivotIndex])\n    storeIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            arr[i], arr[storeIndex] = (arr[storeIndex], arr[i])\n            storeIndex += 1\n    arr[right], arr[storeIndex] = (arr[storeIndex], arr[right])\n    return storeIndex']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",1000,0.0033267999533563852,0.0034959069965407254,0.007198600098490715,N/A
p3_find_n_smallest_number,prompt_6,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",10000,0.030145199969410896,0.03178270500153303,0.037432200042530894,N/A
p3_find_n_smallest_number,prompt_6,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",100000,0.305505899945274,0.3186433240165934,0.3540274000260979,N/A
p3_find_n_smallest_number,prompt_6,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -min_heap[0][0] > arg1[i]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    return [min_heap[i][1] for i in range(arg2)]']",1000,0.002814800012856722,0.0029435789887793363,0.003768900176510215,N/A
p3_find_n_smallest_number,prompt_6,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -min_heap[0][0] > arg1[i]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    return [min_heap[i][1] for i in range(arg2)]']",10000,0.02562689990736544,0.026783547003287823,0.030505300033837557,N/A
p3_find_n_smallest_number,prompt_6,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -min_heap[0][0] > arg1[i]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    return [min_heap[i][1] for i in range(arg2)]']",100000,0.25727900001220405,0.2650622509769164,0.28067460004240274,N/A
p3_find_n_smallest_number,prompt_6,43,"['def funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    pivot = arg1[0]\n    lower = []\n    equal = []\n    higher = []\n    for num in arg1:\n        if num < pivot:\n            lower.append(num)\n        elif num == pivot:\n            equal.append(num)\n        else:\n            higher.append(num)\n    if arg2 <= len(lower):\n        return funcImp(lower, arg2)\n    elif arg2 > len(lower) + len(equal):\n        return [i + len(lower) + len(equal) for i in funcImp(higher, arg2 - len(lower) - len(equal))]\n    else:\n        return [i + len(lower) for i, num in enumerate(arg1) if num <= pivot]']",1000,0.004121999954804778,0.004321821003686637,0.005314800189808011,N/A
p3_find_n_smallest_number,prompt_6,43,"['def funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    pivot = arg1[0]\n    lower = []\n    equal = []\n    higher = []\n    for num in arg1:\n        if num < pivot:\n            lower.append(num)\n        elif num == pivot:\n            equal.append(num)\n        else:\n            higher.append(num)\n    if arg2 <= len(lower):\n        return funcImp(lower, arg2)\n    elif arg2 > len(lower) + len(equal):\n        return [i + len(lower) + len(equal) for i in funcImp(higher, arg2 - len(lower) - len(equal))]\n    else:\n        return [i + len(lower) for i, num in enumerate(arg1) if num <= pivot]']",10000,0.047823800006881356,0.0495610209996812,0.055263400077819824,N/A
p3_find_n_smallest_number,prompt_6,43,"['def funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    pivot = arg1[0]\n    lower = []\n    equal = []\n    higher = []\n    for num in arg1:\n        if num < pivot:\n            lower.append(num)\n        elif num == pivot:\n            equal.append(num)\n        else:\n            higher.append(num)\n    if arg2 <= len(lower):\n        return funcImp(lower, arg2)\n    elif arg2 > len(lower) + len(equal):\n        return [i + len(lower) + len(equal) for i in funcImp(higher, arg2 - len(lower) - len(equal))]\n    else:\n        return [i + len(lower) for i, num in enumerate(arg1) if num <= pivot]']",100000,0.6449430999346077,0.6653751949942671,0.747999900020659,N/A
p3_find_n_smallest_number,prompt_6,44,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    res = {}\n    for i, num in enumerate(arg1):\n        if len(res) < arg2 or num < max(res.keys()):\n            res[num] = i\n        if len(res) > arg2:\n            del res[max(res.keys())]\n    return list(res.values())']",1000,0.012840799987316132,0.01351278299698606,0.018880499992519617,N/A
p3_find_n_smallest_number,prompt_6,44,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    res = {}\n    for i, num in enumerate(arg1):\n        if len(res) < arg2 or num < max(res.keys()):\n            res[num] = i\n        if len(res) > arg2:\n            del res[max(res.keys())]\n    return list(res.values())']",10000,0.12830910016782582,0.13332998899975793,0.14982590009458363,N/A
p3_find_n_smallest_number,prompt_6,44,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    res = {}\n    for i, num in enumerate(arg1):\n        if len(res) < arg2 or num < max(res.keys()):\n            res[num] = i\n        if len(res) > arg2:\n            del res[max(res.keys())]\n    return list(res.values())']",100000,1.2877146999817342,1.3232444519829005,1.4007091000676155,N/A
p3_find_n_smallest_number,prompt_6,45,"['def funcImp(arg1, k):\n    max_num = max(arg1)\n    count_arr = [0] * (max_num + 1)\n    output_arr = [0] * k\n    curr_count = 0\n    for num in arg1:\n        count_arr[num] += 1\n    prefix_sum = 0\n    for i in range(len(count_arr)):\n        prefix_sum += count_arr[i]\n        count_arr[i] = prefix_sum - count_arr[i]\n    for num in arg1:\n        output_arr[count_arr[num] + curr_count] = arg1.index(num)\n        curr_count += 1\n        count_arr[num] -= 1\n        if curr_count == k:\n            break\n    return output_arr']",1000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_6,45,"['def funcImp(arg1, k):\n    max_num = max(arg1)\n    count_arr = [0] * (max_num + 1)\n    output_arr = [0] * k\n    curr_count = 0\n    for num in arg1:\n        count_arr[num] += 1\n    prefix_sum = 0\n    for i in range(len(count_arr)):\n        prefix_sum += count_arr[i]\n        count_arr[i] = prefix_sum - count_arr[i]\n    for num in arg1:\n        output_arr[count_arr[num] + curr_count] = arg1.index(num)\n        curr_count += 1\n        count_arr[num] -= 1\n        if curr_count == k:\n            break\n    return output_arr']",10000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_6,45,"['def funcImp(arg1, k):\n    max_num = max(arg1)\n    count_arr = [0] * (max_num + 1)\n    output_arr = [0] * k\n    curr_count = 0\n    for num in arg1:\n        count_arr[num] += 1\n    prefix_sum = 0\n    for i in range(len(count_arr)):\n        prefix_sum += count_arr[i]\n        count_arr[i] = prefix_sum - count_arr[i]\n    for num in arg1:\n        output_arr[count_arr[num] + curr_count] = arg1.index(num)\n        curr_count += 1\n        count_arr[num] -= 1\n        if curr_count == k:\n            break\n    return output_arr']",100000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_6,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [x[1] for x in heap]\n    indexes.sort()\n    return indexes']",1000,0.002775699831545353,0.0029394460236653683,0.0035957000218331814,N/A
p3_find_n_smallest_number,prompt_6,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [x[1] for x in heap]\n    indexes.sort()\n    return indexes']",10000,0.02606129995547235,0.0270475149853155,0.03160739992745221,N/A
p3_find_n_smallest_number,prompt_6,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [x[1] for x in heap]\n    indexes.sort()\n    return indexes']",100000,0.25749209988862276,0.2652887549973093,0.28859569993801415,N/A
p3_find_n_smallest_number,prompt_6,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = [None] * (n + 1)\n    for i in range(n):\n        index_list[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    return [index_list[sorted_list[i]] for i in range(arg2)]']",1000,0.00480800005607307,0.005085268986877054,0.005801200168207288,N/A
p3_find_n_smallest_number,prompt_6,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = [None] * (n + 1)\n    for i in range(n):\n        index_list[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    return [index_list[sorted_list[i]] for i in range(arg2)]']",10000,0.09521189983934164,0.09922725899610668,0.10922669991850853,N/A
p3_find_n_smallest_number,prompt_6,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = [None] * (n + 1)\n    for i in range(n):\n        index_list[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    return [index_list[sorted_list[i]] for i in range(arg2)]']",100000,1.4338444999884814,1.484605426993221,1.6711532999761403,N/A
p3_find_n_smallest_number,prompt_6,48,"['def funcImp(arg1, arg2):\n    indices = {}\n    remaining = {}\n    for i, elem in enumerate(arg1):\n        remaining[elem] = i\n    while len(indices) < arg2:\n        min_elem = min(remaining.keys())\n        indices[remaining[min_elem]] = min_elem\n        del remaining[min_elem]\n    return sorted(indices.keys())']",1000,0.005335200112313032,0.005673879007808864,0.007243900094181299,N/A
p3_find_n_smallest_number,prompt_6,48,"['def funcImp(arg1, arg2):\n    indices = {}\n    remaining = {}\n    for i, elem in enumerate(arg1):\n        remaining[elem] = i\n    while len(indices) < arg2:\n        min_elem = min(remaining.keys())\n        indices[remaining[min_elem]] = min_elem\n        del remaining[min_elem]\n    return sorted(indices.keys())']",10000,0.0556685000192374,0.05796545900171623,0.0637111000251025,N/A
p3_find_n_smallest_number,prompt_6,48,"['def funcImp(arg1, arg2):\n    indices = {}\n    remaining = {}\n    for i, elem in enumerate(arg1):\n        remaining[elem] = i\n    while len(indices) < arg2:\n        min_elem = min(remaining.keys())\n        indices[remaining[min_elem]] = min_elem\n        del remaining[min_elem]\n    return sorted(indices.keys())']",100000,0.8568048998713493,0.8993429379886948,0.9828635000158101,N/A
p3_find_n_smallest_number,prompt_6,49,"['import random\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return []\n    indexes = list(range(len(arr)))\n    l, r = (0, len(arr) - 1)\n    while l <= r:\n        pivot_idx = random.randint(l, r)\n        pivot_val = arr[pivot_idx]\n        i, j, p = (l, r, l)\n        while p <= j:\n            if arr[p] < pivot_val:\n                arr[i], arr[p] = (arr[p], arr[i])\n                indexes[i], indexes[p] = (indexes[p], indexes[i])\n                i += 1\n                p += 1\n            elif arr[p] > pivot_val:\n                arr[j], arr[p] = (arr[p], arr[j])\n                indexes[j], indexes[p] = (indexes[p], indexes[j])\n                j -= 1\n            else:\n                p += 1\n        if i <= k - 1 <= j:\n            return indexes[:k]\n        elif j < k - 1:\n            l = j + 1\n        else:\n            r = i - 1\n    return indexes[:k]']",1000,0.014157300116494298,0.016350832001771776,0.022403200156986713,N/A
p3_find_n_smallest_number,prompt_6,49,"['import random\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return []\n    indexes = list(range(len(arr)))\n    l, r = (0, len(arr) - 1)\n    while l <= r:\n        pivot_idx = random.randint(l, r)\n        pivot_val = arr[pivot_idx]\n        i, j, p = (l, r, l)\n        while p <= j:\n            if arr[p] < pivot_val:\n                arr[i], arr[p] = (arr[p], arr[i])\n                indexes[i], indexes[p] = (indexes[p], indexes[i])\n                i += 1\n                p += 1\n            elif arr[p] > pivot_val:\n                arr[j], arr[p] = (arr[p], arr[j])\n                indexes[j], indexes[p] = (indexes[p], indexes[j])\n                j -= 1\n            else:\n                p += 1\n        if i <= k - 1 <= j:\n            return indexes[:k]\n        elif j < k - 1:\n            l = j + 1\n        else:\n            r = i - 1\n    return indexes[:k]']",10000,0.1451163999736309,0.163267016003374,0.18617719993926585,N/A
p3_find_n_smallest_number,prompt_6,49,"['import random\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return []\n    indexes = list(range(len(arr)))\n    l, r = (0, len(arr) - 1)\n    while l <= r:\n        pivot_idx = random.randint(l, r)\n        pivot_val = arr[pivot_idx]\n        i, j, p = (l, r, l)\n        while p <= j:\n            if arr[p] < pivot_val:\n                arr[i], arr[p] = (arr[p], arr[i])\n                indexes[i], indexes[p] = (indexes[p], indexes[i])\n                i += 1\n                p += 1\n            elif arr[p] > pivot_val:\n                arr[j], arr[p] = (arr[p], arr[j])\n                indexes[j], indexes[p] = (indexes[p], indexes[j])\n                j -= 1\n            else:\n                p += 1\n        if i <= k - 1 <= j:\n            return indexes[:k]\n        elif j < k - 1:\n            l = j + 1\n        else:\n            r = i - 1\n    return indexes[:k]']",100000,1.7334181000478566,1.8661359309963883,2.0974682001397014,N/A
p3_find_n_smallest_number,prompt_6,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return sorted([heapq.heappop(heap)[1] for _ in range(arg2)])']",1000,0.012147799832746387,0.012672305998858064,0.0165822000708431,N/A
p3_find_n_smallest_number,prompt_6,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return sorted([heapq.heappop(heap)[1] for _ in range(arg2)])']",10000,0.12315039988607168,0.12587434300687164,0.14471590006724,N/A
p3_find_n_smallest_number,prompt_6,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return sorted([heapq.heappop(heap)[1] for _ in range(arg2)])']",100000,1.2339292999822646,1.2500859039835632,1.3102289999369532,N/A
p3_find_n_smallest_number,prompt_6,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) < arg2 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-num, i))\n    return [index for _, index in min_heap]']",1000,0.003337299916893244,0.0036385240079835055,0.006150800036266446,N/A
p3_find_n_smallest_number,prompt_6,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) < arg2 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-num, i))\n    return [index for _, index in min_heap]']",10000,0.032786100171506405,0.03409444301389158,0.038330000126734376,N/A
p3_find_n_smallest_number,prompt_6,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) < arg2 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-num, i))\n    return [index for _, index in min_heap]']",100000,0.323965199990198,0.33192687801318244,0.35184659995138645,N/A
p3_find_n_smallest_number,prompt_6,52,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any `prior_code` variable in the history of this conversation, so I cannot provide a fixed code. Can you please provide the code or error message again, and I will do my best to assist you?"", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,52,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any `prior_code` variable in the history of this conversation, so I cannot provide a fixed code. Can you please provide the code or error message again, and I will do my best to assist you?"", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,52,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any `prior_code` variable in the history of this conversation, so I cannot provide a fixed code. Can you please provide the code or error message again, and I will do my best to assist you?"", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,53,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or len(arg1) == 0:\n        return []\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",1000,0.007198599865660071,0.0075656600040383635,0.009072600165382028,N/A
p3_find_n_smallest_number,prompt_6,53,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or len(arg1) == 0:\n        return []\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",10000,0.1112790999468416,0.1152414189861156,0.1266928999684751,N/A
p3_find_n_smallest_number,prompt_6,53,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or len(arg1) == 0:\n        return []\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",100000,1.610833799932152,1.6421878799865954,1.7097687998320907,N/A
p3_find_n_smallest_number,prompt_6,54,"[""def funcImp(lst, k):\n    if not lst or k > len(lst):\n        return []\n    res = []\n    for i in range(k):\n        min_num = min(lst)\n        min_idx = lst.index(min_num)\n        res.append(min_idx)\n        lst[min_idx] = float('inf')\n    return res""]",1000,0.0022111001890152693,0.0023521319963037968,0.007669699843972921,N/A
p3_find_n_smallest_number,prompt_6,54,"[""def funcImp(lst, k):\n    if not lst or k > len(lst):\n        return []\n    res = []\n    for i in range(k):\n        min_num = min(lst)\n        min_idx = lst.index(min_num)\n        res.append(min_idx)\n        lst[min_idx] = float('inf')\n    return res""]",10000,0.022078000009059906,0.03310361900599673,0.09044830012135208,N/A
p3_find_n_smallest_number,prompt_6,54,"[""def funcImp(lst, k):\n    if not lst or k > len(lst):\n        return []\n    res = []\n    for i in range(k):\n        min_num = min(lst)\n        min_idx = lst.index(min_num)\n        res.append(min_idx)\n        lst[min_idx] = float('inf')\n    return res""]",100000,0.3289984001312405,0.746193454011809,1.0985187999904156,N/A
p3_find_n_smallest_number,prompt_6,55,"['import heapq\n\ndef funcImp(arr, k):\n    kth_smallest = heapq.nsmallest(k, arr)[-1]\n    kth_index = arr.index(kth_smallest)\n    smallest_indexes = []\n    for i, num in enumerate(arr):\n        if num <= kth_smallest:\n            smallest_indexes.append(i)\n            if len(smallest_indexes) == k:\n                break\n    return smallest_indexes']",1000,0.0021363000851124525,0.002199530000798404,0.002293400000780821,N/A
p3_find_n_smallest_number,prompt_6,55,"['import heapq\n\ndef funcImp(arr, k):\n    kth_smallest = heapq.nsmallest(k, arr)[-1]\n    kth_index = arr.index(kth_smallest)\n    smallest_indexes = []\n    for i, num in enumerate(arr):\n        if num <= kth_smallest:\n            smallest_indexes.append(i)\n            if len(smallest_indexes) == k:\n                break\n    return smallest_indexes']",10000,0.026585299987345934,0.027389250008855014,0.031991299940273166,N/A
p3_find_n_smallest_number,prompt_6,55,"['import heapq\n\ndef funcImp(arr, k):\n    kth_smallest = heapq.nsmallest(k, arr)[-1]\n    kth_index = arr.index(kth_smallest)\n    smallest_indexes = []\n    for i, num in enumerate(arr):\n        if num <= kth_smallest:\n            smallest_indexes.append(i)\n            if len(smallest_indexes) == k:\n                break\n    return smallest_indexes']",100000,0.31535129994153976,0.32018838899210095,0.3294949000701308,N/A
p3_find_n_smallest_number,prompt_6,56,"[""import random\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 < 0:\n        return 'Invalid input'\n    if arg2 == len(arg1):\n        return list(range(len(arg1)))\n\n    def quickSelect(arr, k, start, end):\n        if start == end:\n            return start\n        index = random.randint(start, end)\n        pivot = arr[index]\n        arr[end], arr[index] = (arr[index], arr[end])\n        i = start - 1\n        for j in range(start, end):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        if k == i + 1:\n            return i + 1\n        elif k < i + 1:\n            return quickSelect(arr, k, start, i)\n        else:\n            return quickSelect(arr, k, i + 2, end)\n    kth_smallest = quickSelect(arg1, arg2, 0, len(arg1) - 1)\n    smallest = sorted(arg1)[:arg2]\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            result.append(i)\n    return result""]",1000,0.010331699857488275,0.01142180100083351,0.015462199924513698,N/A
p3_find_n_smallest_number,prompt_6,56,"[""import random\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 < 0:\n        return 'Invalid input'\n    if arg2 == len(arg1):\n        return list(range(len(arg1)))\n\n    def quickSelect(arr, k, start, end):\n        if start == end:\n            return start\n        index = random.randint(start, end)\n        pivot = arr[index]\n        arr[end], arr[index] = (arr[index], arr[end])\n        i = start - 1\n        for j in range(start, end):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        if k == i + 1:\n            return i + 1\n        elif k < i + 1:\n            return quickSelect(arr, k, start, i)\n        else:\n            return quickSelect(arr, k, i + 2, end)\n    kth_smallest = quickSelect(arg1, arg2, 0, len(arg1) - 1)\n    smallest = sorted(arg1)[:arg2]\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            result.append(i)\n    return result""]",10000,0.1234465001616627,0.13176327500026674,0.1496146998833865,N/A
p3_find_n_smallest_number,prompt_6,56,"[""import random\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 < 0:\n        return 'Invalid input'\n    if arg2 == len(arg1):\n        return list(range(len(arg1)))\n\n    def quickSelect(arr, k, start, end):\n        if start == end:\n            return start\n        index = random.randint(start, end)\n        pivot = arr[index]\n        arr[end], arr[index] = (arr[index], arr[end])\n        i = start - 1\n        for j in range(start, end):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        if k == i + 1:\n            return i + 1\n        elif k < i + 1:\n            return quickSelect(arr, k, start, i)\n        else:\n            return quickSelect(arr, k, i + 2, end)\n    kth_smallest = quickSelect(arg1, arg2, 0, len(arg1) - 1)\n    smallest = sorted(arg1)[:arg2]\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            result.append(i)\n    return result""]",100000,1.6465815999545157,1.7623475620057434,1.9518949000630528,N/A
p3_find_n_smallest_number,prompt_6,57,"['def funcImp(arg1, arg2):\n    k_smallest_values = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest_values]\n    return indexes']",1000,0.006036699982360005,0.0064104639925062655,0.008163999998942018,N/A
p3_find_n_smallest_number,prompt_6,57,"['def funcImp(arg1, arg2):\n    k_smallest_values = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest_values]\n    return indexes']",10000,0.10920029995031655,0.11209751598536968,0.12022410007193685,N/A
p3_find_n_smallest_number,prompt_6,57,"['def funcImp(arg1, arg2):\n    k_smallest_values = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest_values]\n    return indexes']",100000,1.4140427000820637,1.4386001300066709,1.4932156999129802,N/A
p3_find_n_smallest_number,prompt_6,58,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any prior code in your previous message for me to fix. Could you please provide me with the code so that I can assist you better?"", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,58,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any prior code in your previous message for me to fix. Could you please provide me with the code so that I can assist you better?"", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,58,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any prior code in your previous message for me to fix. Could you please provide me with the code so that I can assist you better?"", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,59,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    sort_arr = sorted(arg1[:arg2])\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in sort_arr:\n            result.append(i)\n            sort_arr.remove(arg1[i])\n        if len(sort_arr) == 0:\n            break\n    return result']",1000,7.299985736608505e-05,7.630398729816079e-05,8.659996092319489e-05,N/A
p3_find_n_smallest_number,prompt_6,59,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    sort_arr = sorted(arg1[:arg2])\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in sort_arr:\n            result.append(i)\n            sort_arr.remove(arg1[i])\n        if len(sort_arr) == 0:\n            break\n    return result']",10000,6.900005973875523e-05,7.24760047160089e-05,8.459994569420815e-05,N/A
p3_find_n_smallest_number,prompt_6,59,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    sort_arr = sorted(arg1[:arg2])\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in sort_arr:\n            result.append(i)\n            sort_arr.remove(arg1[i])\n        if len(sort_arr) == 0:\n            break\n    return result']",100000,7.280008867383003e-05,7.645400008186698e-05,9.110011160373688e-05,N/A
p3_find_n_smallest_number,prompt_6,60,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i, num in enumerate(arr):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted([heapq.heappop(heap)[1] for _ in range(k)])']",1000,0.012581999879330397,0.013230531981680543,0.017018700018525124,N/A
p3_find_n_smallest_number,prompt_6,60,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i, num in enumerate(arr):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted([heapq.heappop(heap)[1] for _ in range(k)])']",10000,0.12796860001981258,0.1314307989901863,0.16051159985363483,N/A
p3_find_n_smallest_number,prompt_6,60,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i, num in enumerate(arr):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted([heapq.heappop(heap)[1] for _ in range(k)])']",100000,1.2977498997934163,1.3083381250035018,1.341925999848172,N/A
p3_find_n_smallest_number,prompt_6,61,"[""{'code': None, 'raw': 'I apologize, but I am an AI language model and I do not have access to any prior code that you may be referring to. Can you please provide me with the relevant code so that I can assist you with fixing any errors?', 'success': False, 'error': None}""]",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,61,"[""{'code': None, 'raw': 'I apologize, but I am an AI language model and I do not have access to any prior code that you may be referring to. Can you please provide me with the relevant code so that I can assist you with fixing any errors?', 'success': False, 'error': None}""]",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,61,"[""{'code': None, 'raw': 'I apologize, but I am an AI language model and I do not have access to any prior code that you may be referring to. Can you please provide me with the relevant code so that I can assist you with fixing any errors?', 'success': False, 'error': None}""]",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,62,"[""def funcImp(arr, k):\n    if len(arr) < k:\n        return 'Invalid input!'\n    smallest = [float('inf')] * k\n    indexes = [-1] * k\n    for i in range(len(arr)):\n        if arr[i] < smallest[-1] and arr[i] not in smallest:\n            smallest[-1] = arr[i]\n            smallest.sort()\n            indexes[smallest.index(arr[i])] = i\n    return indexes""]",1000,0.0024609998799860477,0.002577130007557571,0.002670199843123555,N/A
p3_find_n_smallest_number,prompt_6,62,"[""def funcImp(arr, k):\n    if len(arr) < k:\n        return 'Invalid input!'\n    smallest = [float('inf')] * k\n    indexes = [-1] * k\n    for i in range(len(arr)):\n        if arr[i] < smallest[-1] and arr[i] not in smallest:\n            smallest[-1] = arr[i]\n            smallest.sort()\n            indexes[smallest.index(arr[i])] = i\n    return indexes""]",10000,0.022495900047942996,0.023244858987163754,0.027719999896362424,N/A
p3_find_n_smallest_number,prompt_6,62,"[""def funcImp(arr, k):\n    if len(arr) < k:\n        return 'Invalid input!'\n    smallest = [float('inf')] * k\n    indexes = [-1] * k\n    for i in range(len(arr)):\n        if arr[i] < smallest[-1] and arr[i] not in smallest:\n            smallest[-1] = arr[i]\n            smallest.sort()\n            indexes[smallest.index(arr[i])] = i\n    return indexes""]",100000,0.2255641999654472,0.23104990800842642,0.2874549999833107,N/A
p3_find_n_smallest_number,prompt_6,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for j in range(arg2):\n        num, index = heapq.heappop(heap)\n        index_dict[index] = j\n    return index_dict']",1000,0.007619700161740184,0.007735024010762572,0.008370599942281842,N/A
p3_find_n_smallest_number,prompt_6,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for j in range(arg2):\n        num, index = heapq.heappop(heap)\n        index_dict[index] = j\n    return index_dict']",10000,0.08667610003612936,0.08849946101661771,0.09328000014647841,N/A
p3_find_n_smallest_number,prompt_6,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for j in range(arg2):\n        num, index = heapq.heappop(heap)\n        index_dict[index] = j\n    return index_dict']",100000,0.9589470999781042,0.9969411990069784,1.061043499968946,N/A
p3_find_n_smallest_number,prompt_6,64,"[""{'code': None, 'raw': 'I apologize, there was no prior code to fix. Please provide me with the code you would like me to review or assist with.', 'success': False, 'error': None}""]",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,64,"[""{'code': None, 'raw': 'I apologize, there was no prior code to fix. Please provide me with the code you would like me to review or assist with.', 'success': False, 'error': None}""]",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,64,"[""{'code': None, 'raw': 'I apologize, there was no prior code to fix. Please provide me with the code you would like me to review or assist with.', 'success': False, 'error': None}""]",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,65,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        pivot = arr[random.randint(low, high)]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n            elif arr[j] == pivot:\n                if random.randint(0, 1) == 0:\n                    arr[i], arr[j] = (arr[j], arr[i])\n                    i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n\n    def kSmallestIndexes(arr, k, low, high):\n        index = partition(arr, low, high)\n        if index == k:\n            return arr[:k].indices(arr[index])\n        elif index < k:\n            return kSmallestIndexes(arr, k, index + 1, high)\n        else:\n            return kSmallestIndexes(arr, k, low, index - 1)\n    n = len(arg1)\n    return kSmallestIndexes(arg1, arg2 - 1, 0, n - 1)']",1000,0,0,0,	 exception: 'list' object has no attribute 'indices'
p3_find_n_smallest_number,prompt_6,65,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        pivot = arr[random.randint(low, high)]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n            elif arr[j] == pivot:\n                if random.randint(0, 1) == 0:\n                    arr[i], arr[j] = (arr[j], arr[i])\n                    i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n\n    def kSmallestIndexes(arr, k, low, high):\n        index = partition(arr, low, high)\n        if index == k:\n            return arr[:k].indices(arr[index])\n        elif index < k:\n            return kSmallestIndexes(arr, k, index + 1, high)\n        else:\n            return kSmallestIndexes(arr, k, low, index - 1)\n    n = len(arg1)\n    return kSmallestIndexes(arg1, arg2 - 1, 0, n - 1)']",10000,0,0,0,	 exception: 'list' object has no attribute 'indices'
p3_find_n_smallest_number,prompt_6,65,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        pivot = arr[random.randint(low, high)]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n            elif arr[j] == pivot:\n                if random.randint(0, 1) == 0:\n                    arr[i], arr[j] = (arr[j], arr[i])\n                    i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n\n    def kSmallestIndexes(arr, k, low, high):\n        index = partition(arr, low, high)\n        if index == k:\n            return arr[:k].indices(arr[index])\n        elif index < k:\n            return kSmallestIndexes(arr, k, index + 1, high)\n        else:\n            return kSmallestIndexes(arr, k, low, index - 1)\n    n = len(arg1)\n    return kSmallestIndexes(arg1, arg2 - 1, 0, n - 1)']",100000,0,0,0,	 exception: 'list' object has no attribute 'indices'
p3_find_n_smallest_number,prompt_6,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return {}\n    if arg2 >= len(arg1):\n        return {x: i for i, x in enumerate(arg1)}\n    heap = []\n    index_dict = {}\n    for i, j in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, j)\n            index_dict[j] = i\n        elif j < heap[-1]:\n            del index_dict[heapq.heappop(heap)]\n            index_dict[j] = i\n            heapq.heappush(heap, j)\n    return index_dict']",1000,0.010885899886488914,0.011368740992620587,0.015182999894022942,N/A
p3_find_n_smallest_number,prompt_6,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return {}\n    if arg2 >= len(arg1):\n        return {x: i for i, x in enumerate(arg1)}\n    heap = []\n    index_dict = {}\n    for i, j in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, j)\n            index_dict[j] = i\n        elif j < heap[-1]:\n            del index_dict[heapq.heappop(heap)]\n            index_dict[j] = i\n            heapq.heappush(heap, j)\n    return index_dict']",10000,0.0858671001624316,0.08795310600660741,0.0931859000120312,N/A
p3_find_n_smallest_number,prompt_6,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return {}\n    if arg2 >= len(arg1):\n        return {x: i for i, x in enumerate(arg1)}\n    heap = []\n    index_dict = {}\n    for i, j in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, j)\n            index_dict[j] = i\n        elif j < heap[-1]:\n            del index_dict[heapq.heappop(heap)]\n            index_dict[j] = i\n            heapq.heappush(heap, j)\n    return index_dict']",100000,1.2863415000028908,1.302440896006301,1.333176099928096,N/A
p3_find_n_smallest_number,prompt_6,67,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return None\n    k = arg2\n    kthSmallest = quickselect(arg1, k)\n    indexes = {}\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes[i] = arg1[i]\n            if len(indexes) == k:\n                break\n    return list(indexes.keys())']",1000,0,0,0,	 exception: name 'quickselect' is not defined
p3_find_n_smallest_number,prompt_6,67,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return None\n    k = arg2\n    kthSmallest = quickselect(arg1, k)\n    indexes = {}\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes[i] = arg1[i]\n            if len(indexes) == k:\n                break\n    return list(indexes.keys())']",10000,0,0,0,	 exception: name 'quickselect' is not defined
p3_find_n_smallest_number,prompt_6,67,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return None\n    k = arg2\n    kthSmallest = quickselect(arg1, k)\n    indexes = {}\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes[i] = arg1[i]\n            if len(indexes) == k:\n                break\n    return list(indexes.keys())']",100000,0,0,0,	 exception: name 'quickselect' is not defined
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    pq = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in pq]']",1000,0.004523199982941151,0.004782735998742282,0.005947100231423974,N/A
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    pq = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in pq]']",10000,0.04218519991263747,0.04406701299129054,0.05182479997165501,N/A
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    pq = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in pq]']",100000,0.4402821999974549,0.44966784802032633,0.47720539988949895,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    return [idx for _, idx in heap]']",1000,0.004101000027731061,0.004294564998708665,0.005789899965748191,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    return [idx for _, idx in heap]']",10000,0.039456200087442994,0.04058845301391557,0.04506460018455982,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    return [idx for _, idx in heap]']",100000,0.39861909998580813,0.40521969301393257,0.42247049999423325,N/A
p3_find_n_smallest_number,prompt_6,70,"['def funcImp(arg1, arg2):\n    k = arg2\n    if len(arg1) <= k:\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(k):\n        min_idx = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[j] < arg1[min_idx]:\n                min_idx = j\n        arg1[i], arg1[min_idx] = (arg1[min_idx], arg1[i])\n        indexes.append(i)\n    return indexes']",1000,0.008996000047773123,0.009340207010973245,0.01079500000923872,N/A
p3_find_n_smallest_number,prompt_6,70,"['def funcImp(arg1, arg2):\n    k = arg2\n    if len(arg1) <= k:\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(k):\n        min_idx = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[j] < arg1[min_idx]:\n                min_idx = j\n        arg1[i], arg1[min_idx] = (arg1[min_idx], arg1[i])\n        indexes.append(i)\n    return indexes']",10000,0.09456770005635917,0.09680865199537948,0.10142479999922216,N/A
p3_find_n_smallest_number,prompt_6,70,"['def funcImp(arg1, arg2):\n    k = arg2\n    if len(arg1) <= k:\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(k):\n        min_idx = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[j] < arg1[min_idx]:\n                min_idx = j\n        arg1[i], arg1[min_idx] = (arg1[min_idx], arg1[i])\n        indexes.append(i)\n    return indexes']",100000,0.963388399919495,0.9755548009974881,0.9944022998679429,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    result = []\n    for num in heap:\n        result.append(arg1.index(num))\n    return result']",1000,0.006989700021222234,0.007409412006381899,0.009748599957674742,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    result = []\n    for num in heap:\n        result.append(arg1.index(num))\n    return result']",10000,0.055221599992364645,0.0574106209911406,0.06526770000346005,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    result = []\n    for num in heap:\n        result.append(arg1.index(num))\n    return result']",100000,0.8203301001340151,0.8363070809980855,0.8596163000911474,N/A
p3_find_n_smallest_number,prompt_6,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    return sorted([val[1] for val in heap])']",1000,0.004004899878054857,0.004244575994089245,0.00601029978133738,N/A
p3_find_n_smallest_number,prompt_6,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    return sorted([val[1] for val in heap])']",10000,0.03860709979198873,0.04025921698659658,0.045549700036644936,N/A
p3_find_n_smallest_number,prompt_6,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    return sorted([val[1] for val in heap])']",100000,0.3937669999431819,0.4018096770043485,0.42877400014549494,N/A
p3_find_n_smallest_number,prompt_6,73,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if n == 0:\n        return []\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    smallest_subset = []\n    for i in range(n):\n        if len(smallest_subset) < arg2:\n            smallest_subset.append(arg1[i])\n        elif max(smallest_subset) > arg1[i]:\n            smallest_subset[smallest_subset.index(max(smallest_subset))] = arg1[i]\n    return sorted([i for i in range(n) if arg1[i] in smallest_subset], key=lambda x: arg1[x])']",1000,0.011663899989798665,0.012264442988671362,0.012963300105184317,N/A
p3_find_n_smallest_number,prompt_6,73,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if n == 0:\n        return []\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    smallest_subset = []\n    for i in range(n):\n        if len(smallest_subset) < arg2:\n            smallest_subset.append(arg1[i])\n        elif max(smallest_subset) > arg1[i]:\n            smallest_subset[smallest_subset.index(max(smallest_subset))] = arg1[i]\n    return sorted([i for i in range(n) if arg1[i] in smallest_subset], key=lambda x: arg1[x])']",10000,0.11737800016999245,0.11974720302037895,0.1252725999802351,N/A
p3_find_n_smallest_number,prompt_6,73,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if n == 0:\n        return []\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    smallest_subset = []\n    for i in range(n):\n        if len(smallest_subset) < arg2:\n            smallest_subset.append(arg1[i])\n        elif max(smallest_subset) > arg1[i]:\n            smallest_subset[smallest_subset.index(max(smallest_subset))] = arg1[i]\n    return sorted([i for i in range(n) if arg1[i] in smallest_subset], key=lambda x: arg1[x])']",100000,1.1849714000709355,1.2030755170108751,1.2290545001160353,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = list(arr[:k])\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    res = []\n    for num in heap:\n        res.append(arr.index(num))\n    return res']",1000,0.007175600156188011,0.007327707002405077,0.009423299925401807,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = list(arr[:k])\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    res = []\n    for num in heap:\n        res.append(arr.index(num))\n    return res']",10000,0.05520469998009503,0.05638768999837339,0.05997129995375872,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = list(arr[:k])\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    res = []\n    for num in heap:\n        res.append(arr.index(num))\n    return res']",100000,0.8129859000910074,0.8284823500039056,0.8594162000808865,N/A
p3_find_n_smallest_number,prompt_6,75,"[""def funcImp(arg1, arg2):\n    k = arg2\n    smallest = [float('inf')] * k\n    indices = [-1] * k\n    for i, num in enumerate(arg1):\n        if num < smallest[-1]:\n            smallest[-1] = num\n            indices[-1] = i\n            j = k - 1\n            while j > 0 and smallest[j] < smallest[j - 1]:\n                smallest[j], smallest[j - 1] = (smallest[j - 1], smallest[j])\n                indices[j], indices[j - 1] = (indices[j - 1], indices[j])\n                j -= 1\n    return indices""]",1000,0.003192000091075897,0.003381049002055079,0.004539800109341741,N/A
p3_find_n_smallest_number,prompt_6,75,"[""def funcImp(arg1, arg2):\n    k = arg2\n    smallest = [float('inf')] * k\n    indices = [-1] * k\n    for i, num in enumerate(arg1):\n        if num < smallest[-1]:\n            smallest[-1] = num\n            indices[-1] = i\n            j = k - 1\n            while j > 0 and smallest[j] < smallest[j - 1]:\n                smallest[j], smallest[j - 1] = (smallest[j - 1], smallest[j])\n                indices[j], indices[j - 1] = (indices[j - 1], indices[j])\n                j -= 1\n    return indices""]",10000,0.025712399976328015,0.026870367999654265,0.030555899953469634,N/A
p3_find_n_smallest_number,prompt_6,75,"[""def funcImp(arg1, arg2):\n    k = arg2\n    smallest = [float('inf')] * k\n    indices = [-1] * k\n    for i, num in enumerate(arg1):\n        if num < smallest[-1]:\n            smallest[-1] = num\n            indices[-1] = i\n            j = k - 1\n            while j > 0 and smallest[j] < smallest[j - 1]:\n                smallest[j], smallest[j - 1] = (smallest[j - 1], smallest[j])\n                indices[j], indices[j - 1] = (indices[j - 1], indices[j])\n                j -= 1\n    return indices""]",100000,0.25660620001144707,0.26082276601810006,0.2764022999908775,N/A
p3_find_n_smallest_number,prompt_6,76,"[""{'code': None, 'raw': 'I apologize, but I cannot see any prior code in this conversation. Please provide the code that needs to be fixed.', 'success': False, 'error': None}""]",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,76,"[""{'code': None, 'raw': 'I apologize, but I cannot see any prior code in this conversation. Please provide the code that needs to be fixed.', 'success': False, 'error': None}""]",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,76,"[""{'code': None, 'raw': 'I apologize, but I cannot see any prior code in this conversation. Please provide the code that needs to be fixed.', 'success': False, 'error': None}""]",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,77,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code present in the conversation. Could you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,77,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code present in the conversation. Could you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,77,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code present in the conversation. Could you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(heap)\n        result.append(i)\n    return result']",1000,0.005837699864059687,0.00614365799119696,0.007515500066801906,N/A
p3_find_n_smallest_number,prompt_6,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(heap)\n        result.append(i)\n    return result']",10000,0.07346439990215003,0.07556945100659504,0.08209199993871152,N/A
p3_find_n_smallest_number,prompt_6,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(heap)\n        result.append(i)\n    return result']",100000,0.9449599999934435,0.9917431739857421,1.069890599930659,N/A
p3_find_n_smallest_number,prompt_6,79,"['def funcImp(arg1, arg2):\n    pivot = arg1[arg2 - 1]\n    k_smallest = [i for i in range(len(arg1)) if arg1[i] <= pivot]\n    if len(k_smallest) < arg2:\n        return [i for i in range(len(arg1))]\n    else:\n        return k_smallest']",1000,0.001778900157660246,0.0018661790038459003,0.002505799988284707,N/A
p3_find_n_smallest_number,prompt_6,79,"['def funcImp(arg1, arg2):\n    pivot = arg1[arg2 - 1]\n    k_smallest = [i for i in range(len(arg1)) if arg1[i] <= pivot]\n    if len(k_smallest) < arg2:\n        return [i for i in range(len(arg1))]\n    else:\n        return k_smallest']",10000,0.01987880002707243,0.020732305012643337,0.02443289989605546,N/A
p3_find_n_smallest_number,prompt_6,79,"['def funcImp(arg1, arg2):\n    pivot = arg1[arg2 - 1]\n    k_smallest = [i for i in range(len(arg1)) if arg1[i] <= pivot]\n    if len(k_smallest) < arg2:\n        return [i for i in range(len(arg1))]\n    else:\n        return k_smallest']",100000,0.19094509980641305,0.19767328600864859,0.21980089996941388,N/A
p3_find_n_smallest_number,prompt_6,80,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 == 0:\n        return []\n\n    def partition(lst, low, high):\n        pivot = lst[high]\n        i = low\n        for j in range(low, high):\n            if lst[j] < pivot:\n                lst[i], lst[j] = (lst[j], lst[i])\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n                i += 1\n        lst[i], lst[high] = (lst[high], lst[i])\n        indexes[i], indexes[high] = (indexes[high], indexes[i])\n        return i\n\n    def selection(lst, k):\n        low, high = (0, len(lst) - 1)\n        while low <= high:\n            pivot_index = partition(lst, low, high)\n            if pivot_index == k:\n                return lst[pivot_index]\n            elif pivot_index > k:\n                high = pivot_index - 1\n            else:\n                low = pivot_index + 1\n    indexes = list(range(len(arg1)))\n    kth_smallest = selection(arg1, arg2 - 1)\n    before_m = []\n    after_m = []\n    for i in range(len(arg1)):\n        if arg1[i] < kth_smallest:\n            before_m.append(i)\n        elif arg1[i] >= kth_smallest:\n            after_m.append(i)\n    if len(before_m) < arg2:\n        return before_m + funcImp(arg1=[arg1[i] for i in after_m], arg2=arg2 - len(before_m))\n    else:\n        return funcImp(arg1=[arg1[i] for i in before_m], arg2=arg2)']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,80,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 == 0:\n        return []\n\n    def partition(lst, low, high):\n        pivot = lst[high]\n        i = low\n        for j in range(low, high):\n            if lst[j] < pivot:\n                lst[i], lst[j] = (lst[j], lst[i])\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n                i += 1\n        lst[i], lst[high] = (lst[high], lst[i])\n        indexes[i], indexes[high] = (indexes[high], indexes[i])\n        return i\n\n    def selection(lst, k):\n        low, high = (0, len(lst) - 1)\n        while low <= high:\n            pivot_index = partition(lst, low, high)\n            if pivot_index == k:\n                return lst[pivot_index]\n            elif pivot_index > k:\n                high = pivot_index - 1\n            else:\n                low = pivot_index + 1\n    indexes = list(range(len(arg1)))\n    kth_smallest = selection(arg1, arg2 - 1)\n    before_m = []\n    after_m = []\n    for i in range(len(arg1)):\n        if arg1[i] < kth_smallest:\n            before_m.append(i)\n        elif arg1[i] >= kth_smallest:\n            after_m.append(i)\n    if len(before_m) < arg2:\n        return before_m + funcImp(arg1=[arg1[i] for i in after_m], arg2=arg2 - len(before_m))\n    else:\n        return funcImp(arg1=[arg1[i] for i in before_m], arg2=arg2)']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,80,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 == 0:\n        return []\n\n    def partition(lst, low, high):\n        pivot = lst[high]\n        i = low\n        for j in range(low, high):\n            if lst[j] < pivot:\n                lst[i], lst[j] = (lst[j], lst[i])\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n                i += 1\n        lst[i], lst[high] = (lst[high], lst[i])\n        indexes[i], indexes[high] = (indexes[high], indexes[i])\n        return i\n\n    def selection(lst, k):\n        low, high = (0, len(lst) - 1)\n        while low <= high:\n            pivot_index = partition(lst, low, high)\n            if pivot_index == k:\n                return lst[pivot_index]\n            elif pivot_index > k:\n                high = pivot_index - 1\n            else:\n                low = pivot_index + 1\n    indexes = list(range(len(arg1)))\n    kth_smallest = selection(arg1, arg2 - 1)\n    before_m = []\n    after_m = []\n    for i in range(len(arg1)):\n        if arg1[i] < kth_smallest:\n            before_m.append(i)\n        elif arg1[i] >= kth_smallest:\n            after_m.append(i)\n    if len(before_m) < arg2:\n        return before_m + funcImp(arg1=[arg1[i] for i in after_m], arg2=arg2 - len(before_m))\n    else:\n        return funcImp(arg1=[arg1[i] for i in before_m], arg2=arg2)']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,81,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return None\n    sorted_lst = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return list(sorted_lst[:arg2])']",1000,0.007026700070127845,0.007463782003615051,0.009660599986091256,N/A
p3_find_n_smallest_number,prompt_6,81,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return None\n    sorted_lst = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return list(sorted_lst[:arg2])']",10000,0.11111189983785152,0.11418697499902919,0.12746459990739822,N/A
p3_find_n_smallest_number,prompt_6,81,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 > len(arg1):\n        return None\n    sorted_lst = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return list(sorted_lst[:arg2])']",100000,1.604142599971965,1.6434481970011257,1.6904446999542415,N/A
p3_find_n_smallest_number,prompt_6,82,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    if len(arg1) == arg2:\n        return list(range(arg2))\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        right = [x for x in arr if x > pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k >= len(arr) - len(right):\n            return quickselect(right, k - (len(arr) - len(right)))\n        else:\n            return pivot\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    return sorted([i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2])']",1000,0.0069640998262912035,0.007739081000909209,0.010881500085815787,N/A
p3_find_n_smallest_number,prompt_6,82,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    if len(arg1) == arg2:\n        return list(range(arg2))\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        right = [x for x in arr if x > pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k >= len(arr) - len(right):\n            return quickselect(right, k - (len(arr) - len(right)))\n        else:\n            return pivot\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    return sorted([i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2])']",10000,0.10928229987621307,0.11109191199298948,0.1172688000369817,N/A
p3_find_n_smallest_number,prompt_6,82,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    if len(arg1) == arg2:\n        return list(range(arg2))\n\n    def quickselect(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        right = [x for x in arr if x > pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k >= len(arr) - len(right):\n            return quickselect(right, k - (len(arr) - len(right)))\n        else:\n            return pivot\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    return sorted([i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2])']",100000,0.8277276998851448,0.8395050489809364,0.8675128999166191,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted list \'arr\'.\n    """"""\n    heapq.heapify(arr)\n    k_smallest = heapq.nsmallest(k, arr)\n    index_dict = {}\n    for i, num in enumerate(arr):\n        if num in k_smallest:\n            index_dict[num] = i\n            k_smallest.remove(num)\n            if not k_smallest:\n                break\n    res = [index_dict[k] for k in sorted(index_dict)]\n    return res']",1000,0.002304699970409274,0.0024179439968429507,0.003069800091907382,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted list \'arr\'.\n    """"""\n    heapq.heapify(arr)\n    k_smallest = heapq.nsmallest(k, arr)\n    index_dict = {}\n    for i, num in enumerate(arr):\n        if num in k_smallest:\n            index_dict[num] = i\n            k_smallest.remove(num)\n            if not k_smallest:\n                break\n    res = [index_dict[k] for k in sorted(index_dict)]\n    return res']",10000,0.02418829989619553,0.025341436995659022,0.028392700012773275,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted list \'arr\'.\n    """"""\n    heapq.heapify(arr)\n    k_smallest = heapq.nsmallest(k, arr)\n    index_dict = {}\n    for i, num in enumerate(arr):\n        if num in k_smallest:\n            index_dict[num] = i\n            k_smallest.remove(num)\n            if not k_smallest:\n                break\n    res = [index_dict[k] for k in sorted(index_dict)]\n    return res']",100000,0.26585640013217926,0.27182503801304847,0.28641699999570847,N/A
p3_find_n_smallest_number,prompt_6,84,"['def funcImp(arg1, arg2):\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        result.append(index)\n    return result']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_6,84,"['def funcImp(arg1, arg2):\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        result.append(index)\n    return result']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_6,84,"['def funcImp(arg1, arg2):\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        result.append(index)\n    return result']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_6,85,"['import heapq\n\ndef funcImp(arr, k):\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",1000,0.0027022999711334705,0.002872405988164246,0.0035794000141322613,N/A
p3_find_n_smallest_number,prompt_6,85,"['import heapq\n\ndef funcImp(arr, k):\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",10000,0.02553240000270307,0.026801353986375034,0.029556899797171354,N/A
p3_find_n_smallest_number,prompt_6,85,"['import heapq\n\ndef funcImp(arr, k):\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",100000,0.25742030004039407,0.2632850560033694,0.276373399887234,N/A
p3_find_n_smallest_number,prompt_6,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for num in arg1:\n        heapq.heappush(heap, num)\n    indexes = []\n    for i in range(arg2):\n        smallest = heapq.heappop(heap)\n        index = arg1.index(smallest)\n        indexes.append(index)\n    return indexes']",1000,0.0046184000093489885,0.0048673839936964215,0.005422799848020077,N/A
p3_find_n_smallest_number,prompt_6,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for num in arg1:\n        heapq.heappush(heap, num)\n    indexes = []\n    for i in range(arg2):\n        smallest = heapq.heappop(heap)\n        index = arg1.index(smallest)\n        indexes.append(index)\n    return indexes']",10000,0.05131709994748235,0.05260762301040813,0.054086399963125587,N/A
p3_find_n_smallest_number,prompt_6,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for num in arg1:\n        heapq.heappush(heap, num)\n    indexes = []\n    for i in range(arg2):\n        smallest = heapq.heappop(heap)\n        index = arg1.index(smallest)\n        indexes.append(index)\n    return indexes']",100000,0.581620000069961,0.5926499100052751,0.606536699924618,N/A
p3_find_n_smallest_number,prompt_6,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict[i] = val\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(list(index_dict.keys())[list(index_dict.values()).index(sorted_array[i])])\n    return k_smallest_indexes']",1000,0.008860500063747168,0.009398808002006263,0.010077100014314055,N/A
p3_find_n_smallest_number,prompt_6,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict[i] = val\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(list(index_dict.keys())[list(index_dict.values()).index(sorted_array[i])])\n    return k_smallest_indexes']",10000,0.1433013000059873,0.14650821700692176,0.1540304000955075,N/A
p3_find_n_smallest_number,prompt_6,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict[i] = val\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(list(index_dict.keys())[list(index_dict.values()).index(sorted_array[i])])\n    return k_smallest_indexes']",100000,2.3501631000544876,2.4021769649907947,2.4762968998402357,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return sorted(heap, key=lambda x: x[1])[:arg2]']",1000,0.002864199923351407,0.003000627001747489,0.004821799928322434,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return sorted(heap, key=lambda x: x[1])[:arg2]']",10000,0.026793100172653794,0.027746973992325365,0.036110399989411235,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return sorted(heap, key=lambda x: x[1])[:arg2]']",100000,0.2667294000275433,0.2736715670046397,0.2924277000129223,N/A
p3_find_n_smallest_number,prompt_6,89,"['from heapq import heappushpop, heappush\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    elif arg2 <= 0:\n        return []\n    else:\n        min_heap = []\n        for i in range(arg2):\n            heappush(min_heap, (-arg1[i], i))\n        for i in range(arg2, n):\n            if -arg1[i] > min_heap[0][0]:\n                heappushpop(min_heap, (-arg1[i], i))\n        return [x[1] for x in min_heap]']",1000,0.0029192999936640263,0.003170691996347159,0.0034380999859422445,N/A
p3_find_n_smallest_number,prompt_6,89,"['from heapq import heappushpop, heappush\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    elif arg2 <= 0:\n        return []\n    else:\n        min_heap = []\n        for i in range(arg2):\n            heappush(min_heap, (-arg1[i], i))\n        for i in range(arg2, n):\n            if -arg1[i] > min_heap[0][0]:\n                heappushpop(min_heap, (-arg1[i], i))\n        return [x[1] for x in min_heap]']",10000,0.02929549990221858,0.030814129998907445,0.038697300013154745,N/A
p3_find_n_smallest_number,prompt_6,89,"['from heapq import heappushpop, heappush\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    elif arg2 <= 0:\n        return []\n    else:\n        min_heap = []\n        for i in range(arg2):\n            heappush(min_heap, (-arg1[i], i))\n        for i in range(arg2, n):\n            if -arg1[i] > min_heap[0][0]:\n                heappushpop(min_heap, (-arg1[i], i))\n        return [x[1] for x in min_heap]']",100000,0.297555300174281,0.30458632699912414,0.3267824000213295,N/A
p3_find_n_smallest_number,prompt_6,90,"['def funcImp(arr, k):\n    if not arr or k > len(arr):\n        return []\n    sorted_arr = sorted(enumerate(arr), key=lambda x: x[1])\n    res = [idx for idx, _ in sorted_arr[:k]]\n    return res']",1000,0.008250700077041984,0.008851453003007919,0.010429099900647998,N/A
p3_find_n_smallest_number,prompt_6,90,"['def funcImp(arr, k):\n    if not arr or k > len(arr):\n        return []\n    sorted_arr = sorted(enumerate(arr), key=lambda x: x[1])\n    res = [idx for idx, _ in sorted_arr[:k]]\n    return res']",10000,0.13982079993002117,0.14567327498225496,0.16607410018332303,N/A
p3_find_n_smallest_number,prompt_6,90,"['def funcImp(arr, k):\n    if not arr or k > len(arr):\n        return []\n    sorted_arr = sorted(enumerate(arr), key=lambda x: x[1])\n    res = [idx for idx, _ in sorted_arr[:k]]\n    return res']",100000,2.1097174000460654,2.1608697000006214,2.233039200073108,N/A
p3_find_n_smallest_number,prompt_6,91,"['def funcImp(arr, k):\n\n    def partition(arr, left, right, pivot_idx):\n        pivot_value = arr[pivot_idx]\n        arr[right], arr[pivot_idx] = (arr[pivot_idx], arr[right])\n        store_idx = left\n        for i in range(left, right):\n            if arr[i] <= pivot_value:\n                arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n                store_idx += 1\n        arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n        return store_idx\n    left, right = (0, len(arr) - 1)\n    while True:\n        if left == right:\n            return [(i, arr[i]) for i in range(k)]\n        pivot_idx = random.randint(left, right)\n        pivot_idx = partition(arr, left, right, pivot_idx)\n        if k == pivot_idx:\n            return [(i, arr[i]) for i in range(pivot_idx)]\n        elif k < pivot_idx:\n            right = pivot_idx - 1\n        else:\n            k -= pivot_idx + 1\n            left = pivot_idx + 1']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,91,"['def funcImp(arr, k):\n\n    def partition(arr, left, right, pivot_idx):\n        pivot_value = arr[pivot_idx]\n        arr[right], arr[pivot_idx] = (arr[pivot_idx], arr[right])\n        store_idx = left\n        for i in range(left, right):\n            if arr[i] <= pivot_value:\n                arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n                store_idx += 1\n        arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n        return store_idx\n    left, right = (0, len(arr) - 1)\n    while True:\n        if left == right:\n            return [(i, arr[i]) for i in range(k)]\n        pivot_idx = random.randint(left, right)\n        pivot_idx = partition(arr, left, right, pivot_idx)\n        if k == pivot_idx:\n            return [(i, arr[i]) for i in range(pivot_idx)]\n        elif k < pivot_idx:\n            right = pivot_idx - 1\n        else:\n            k -= pivot_idx + 1\n            left = pivot_idx + 1']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,91,"['def funcImp(arr, k):\n\n    def partition(arr, left, right, pivot_idx):\n        pivot_value = arr[pivot_idx]\n        arr[right], arr[pivot_idx] = (arr[pivot_idx], arr[right])\n        store_idx = left\n        for i in range(left, right):\n            if arr[i] <= pivot_value:\n                arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n                store_idx += 1\n        arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n        return store_idx\n    left, right = (0, len(arr) - 1)\n    while True:\n        if left == right:\n            return [(i, arr[i]) for i in range(k)]\n        pivot_idx = random.randint(left, right)\n        pivot_idx = partition(arr, left, right, pivot_idx)\n        if k == pivot_idx:\n            return [(i, arr[i]) for i in range(pivot_idx)]\n        elif k < pivot_idx:\n            right = pivot_idx - 1\n        else:\n            k -= pivot_idx + 1\n            left = pivot_idx + 1']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,92,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code provided in this conversation for me to fix. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,92,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code provided in this conversation for me to fix. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,92,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code provided in this conversation for me to fix. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,93,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no code provided for me to fix. Could you share the relevant code with me so I can assist you better?"", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,93,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no code provided for me to fix. Could you share the relevant code with me so I can assist you better?"", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,93,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no code provided for me to fix. Could you share the relevant code with me so I can assist you better?"", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_6 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_6,94,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest_indices = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arr[i])\n        k_smallest_indices.append(index)\n    return k_smallest_indices\narr = [5, 2, 3, 1, 4]\nk = 2\npass']",1000,0.003306299913674593,0.003603763978462666,0.005387400044128299,N/A
p3_find_n_smallest_number,prompt_6,94,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest_indices = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arr[i])\n        k_smallest_indices.append(index)\n    return k_smallest_indices\narr = [5, 2, 3, 1, 4]\nk = 2\npass']",10000,0.08477509999647737,0.08694261798169464,0.09447050001472235,N/A
p3_find_n_smallest_number,prompt_6,94,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest_indices = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arr[i])\n        k_smallest_indices.append(index)\n    return k_smallest_indices\narr = [5, 2, 3, 1, 4]\nk = 2\npass']",100000,1.2100807998795062,1.252778630007524,1.313186899991706,N/A
p3_find_n_smallest_number,prompt_6,95,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = random.choice(lst)\n        lows = [elem for elem in lst if elem < pivot]\n        highs = [elem for elem in lst if elem > pivot]\n        pivots = [elem for elem in lst if elem == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k = arg2\n    smallest = []\n    for i in range(k):\n        smallest.append(quickselect(arg1, i))\n    indexes = [arg1.index(s) for s in smallest]\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,95,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = random.choice(lst)\n        lows = [elem for elem in lst if elem < pivot]\n        highs = [elem for elem in lst if elem > pivot]\n        pivots = [elem for elem in lst if elem == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k = arg2\n    smallest = []\n    for i in range(k):\n        smallest.append(quickselect(arg1, i))\n    indexes = [arg1.index(s) for s in smallest]\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,95,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = random.choice(lst)\n        lows = [elem for elem in lst if elem < pivot]\n        highs = [elem for elem in lst if elem > pivot]\n        pivots = [elem for elem in lst if elem == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k = arg2\n    smallest = []\n    for i in range(k):\n        smallest.append(quickselect(arg1, i))\n    indexes = [arg1.index(s) for s in smallest]\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_6,96,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i, num in enumerate(arg1):\n        if num not in index_map:\n            index_map[num] = []\n        index_map[num].append(i)\n    k_smallest = sorted(arg1)[:arg2]\n    for num in k_smallest:\n        while len(index_map[num]) > 0 and index_map[num][0] <= arg1.index(k_smallest[-1]):\n            index_map[num].pop(0)\n        if len(index_map[num]) > 0 and index_map[num][0] > arg1.index(k_smallest[-1]):\n            k_smallest[k_smallest.index(max(k_smallest))] = index_map[num].pop(0)\n    return k_smallest']",1000,0.011056799907237291,0.011947838999330997,0.01619250001385808,N/A
p3_find_n_smallest_number,prompt_6,96,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i, num in enumerate(arg1):\n        if num not in index_map:\n            index_map[num] = []\n        index_map[num].append(i)\n    k_smallest = sorted(arg1)[:arg2]\n    for num in k_smallest:\n        while len(index_map[num]) > 0 and index_map[num][0] <= arg1.index(k_smallest[-1]):\n            index_map[num].pop(0)\n        if len(index_map[num]) > 0 and index_map[num][0] > arg1.index(k_smallest[-1]):\n            k_smallest[k_smallest.index(max(k_smallest))] = index_map[num].pop(0)\n    return k_smallest']",10000,0.16818060004152358,0.1718201370164752,0.17699520010501146,N/A
p3_find_n_smallest_number,prompt_6,96,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i, num in enumerate(arg1):\n        if num not in index_map:\n            index_map[num] = []\n        index_map[num].append(i)\n    k_smallest = sorted(arg1)[:arg2]\n    for num in k_smallest:\n        while len(index_map[num]) > 0 and index_map[num][0] <= arg1.index(k_smallest[-1]):\n            index_map[num].pop(0)\n        if len(index_map[num]) > 0 and index_map[num][0] > arg1.index(k_smallest[-1]):\n            k_smallest[k_smallest.index(max(k_smallest))] = index_map[num].pop(0)\n    return k_smallest']",100000,2.648282099980861,2.6992677240027114,2.79023230005987,N/A
p3_find_n_smallest_number,prompt_6,97,"['def funcImp(arg1, arg2):\n    min_indices = []\n    for k in range(arg2):\n        current_min = arg1[0]\n        current_min_index = 0\n        for i, num in enumerate(arg1):\n            if num < current_min:\n                current_min = num\n                current_min_index = i\n        min_indices.append(current_min_index)\n        arg1.pop(current_min_index)\n    return min_indices']",1000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_6,97,"['def funcImp(arg1, arg2):\n    min_indices = []\n    for k in range(arg2):\n        current_min = arg1[0]\n        current_min_index = 0\n        for i, num in enumerate(arg1):\n            if num < current_min:\n                current_min = num\n                current_min_index = i\n        min_indices.append(current_min_index)\n        arg1.pop(current_min_index)\n    return min_indices']",10000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_6,97,"['def funcImp(arg1, arg2):\n    min_indices = []\n    for k in range(arg2):\n        current_min = arg1[0]\n        current_min_index = 0\n        for i, num in enumerate(arg1):\n            if num < current_min:\n                current_min = num\n                current_min_index = i\n        min_indices.append(current_min_index)\n        arg1.pop(current_min_index)\n    return min_indices']",100000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_6,98,"['def funcImp(arr, k):\n    indexes = []\n    for i in range(k):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = (arr[min_idx], arr[i])\n        indexes.append(min_idx)\n    return indexes']",1000,0.008854800136759877,0.0095631300075911,0.016918000066652894,N/A
p3_find_n_smallest_number,prompt_6,98,"['def funcImp(arr, k):\n    indexes = []\n    for i in range(k):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = (arr[min_idx], arr[i])\n        indexes.append(min_idx)\n    return indexes']",10000,0.09487679996527731,0.09678224900504574,0.10340650007128716,N/A
p3_find_n_smallest_number,prompt_6,98,"['def funcImp(arr, k):\n    indexes = []\n    for i in range(k):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = (arr[min_idx], arr[i])\n        indexes.append(min_idx)\n    return indexes']",100000,0.9695917000062764,0.9887557830056175,1.0236970998812467,N/A
p3_find_n_smallest_number,prompt_6,99,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)\n    k_smallest = sorted_nums[:arg2]\n    result = []\n    for num in k_smallest:\n        result += indices[num]\n    return sorted(result)']",1000,0.008446400053799152,0.008884681989438831,0.012711700052022934,N/A
p3_find_n_smallest_number,prompt_6,99,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)\n    k_smallest = sorted_nums[:arg2]\n    result = []\n    for num in k_smallest:\n        result += indices[num]\n    return sorted(result)']",10000,0.13759890012443066,0.14052128099370748,0.1486041999887675,N/A
p3_find_n_smallest_number,prompt_6,99,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)\n    k_smallest = sorted_nums[:arg2]\n    result = []\n    for num in k_smallest:\n        result += indices[num]\n    return sorted(result)']",100000,2.206930899992585,2.2499643789976833,2.328159299911931,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for index, element in enumerate(arr):\n        if index < k:\n            heapq.heappush(heap, (-element, index))\n        elif -element > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-element, index))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",1000,0.00371590000577271,0.003971565023530275,0.004812699975445867,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for index, element in enumerate(arr):\n        if index < k:\n            heapq.heappush(heap, (-element, index))\n        elif -element > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-element, index))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",10000,0.03644330007955432,0.03797597398981452,0.04332489985972643,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for index, element in enumerate(arr):\n        if index < k:\n            heapq.heappush(heap, (-element, index))\n        elif -element > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-element, index))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",100000,0.3609947001095861,0.3720678799948655,0.39411820005625486,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [n for n in nums if n < pivot]\n        mid = [n for n in nums if n == pivot]\n        right = [n for n in nums if n > pivot]\n        if k <= len(left):\n            return quickselect(left, k)\n        elif k <= len(left) + len(mid):\n            return [nums.index(pivot)] * k\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    indexes = quickselect(arg1, arg2)\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [n for n in nums if n < pivot]\n        mid = [n for n in nums if n == pivot]\n        right = [n for n in nums if n > pivot]\n        if k <= len(left):\n            return quickselect(left, k)\n        elif k <= len(left) + len(mid):\n            return [nums.index(pivot)] * k\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    indexes = quickselect(arg1, arg2)\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [n for n in nums if n < pivot]\n        mid = [n for n in nums if n == pivot]\n        right = [n for n in nums if n > pivot]\n        if k <= len(left):\n            return quickselect(left, k)\n        elif k <= len(left) + len(mid):\n            return [nums.index(pivot)] * k\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    indexes = quickselect(arg1, arg2)\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    val_index = {}\n    for i, val in enumerate(arg1):\n        val_index[val] = i\n    arg1.sort()\n    k_smallest_indexes = []\n    for i in range(arg2):\n        index = val_index[arg1[i]]\n        k_smallest_indexes.append(index)\n    return k_smallest_indexes']",1000,0.0030074999667704105,0.0031727580027654766,0.004175700014457107,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    val_index = {}\n    for i, val in enumerate(arg1):\n        val_index[val] = i\n    arg1.sort()\n    k_smallest_indexes = []\n    for i in range(arg2):\n        index = val_index[arg1[i]]\n        k_smallest_indexes.append(index)\n    return k_smallest_indexes']",10000,0.02986159990541637,0.0316581829986535,0.048249300103634596,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    val_index = {}\n    for i, val in enumerate(arg1):\n        val_index[val] = i\n    arg1.sort()\n    k_smallest_indexes = []\n    for i in range(arg2):\n        index = val_index[arg1[i]]\n        k_smallest_indexes.append(index)\n    return k_smallest_indexes']",100000,0.6853247999679297,0.733869779012166,0.7760169000830501,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[num] = i\n    sorted_dict = sorted(d.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_dict[i][1])\n    return result']",1000,0.012639299966394901,0.013418593006208538,0.017940000165253878,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[num] = i\n    sorted_dict = sorted(d.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_dict[i][1])\n    return result']",10000,0.19376099994406104,0.20482501399237663,0.22368039982393384,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[num] = i\n    sorted_dict = sorted(d.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_dict[i][1])\n    return result']",100000,3.3379909000359476,3.42819905099459,3.5899443000089377,N/A
p3_find_n_smallest_number,prompt_7,4,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        arg2 = n\n    indexes = list(range(n))\n    indexes.sort(key=lambda i: arg1[i])\n    return indexes[:arg2]']",1000,0.007256100187078118,0.007647491008974612,0.008646400179713964,N/A
p3_find_n_smallest_number,prompt_7,4,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        arg2 = n\n    indexes = list(range(n))\n    indexes.sort(key=lambda i: arg1[i])\n    return indexes[:arg2]']",10000,0.1145993999671191,0.11866888298653067,0.13554969988763332,N/A
p3_find_n_smallest_number,prompt_7,4,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        arg2 = n\n    indexes = list(range(n))\n    indexes.sort(key=lambda i: arg1[i])\n    return indexes[:arg2]']",100000,1.6252082998398691,1.667861062004231,1.713430600007996,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n\n    def quickselect(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[0]\n        lows = [x for x in l if x < pivot]\n        highs = [x for x in l if x > pivot]\n        pivots = [x for x in l if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    kth_smallest_index = arg1.index(kth_smallest)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",1000,0.007638100069016218,0.008345935000106693,0.010942100081592798,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n\n    def quickselect(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[0]\n        lows = [x for x in l if x < pivot]\n        highs = [x for x in l if x > pivot]\n        pivots = [x for x in l if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    kth_smallest_index = arg1.index(kth_smallest)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",10000,0.09514439990743995,0.09924200598150491,0.12143400008790195,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n\n    def quickselect(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[0]\n        lows = [x for x in l if x < pivot]\n        highs = [x for x in l if x > pivot]\n        pivots = [x for x in l if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    kth_smallest_index = arg1.index(kth_smallest)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",100000,1.124973800033331,1.1504802310233935,1.2085984000004828,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return None\n    if arg2 == n:\n        return list(range(n))\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot = partition(arr, l, r)\n        if k == pivot:\n            return k\n        elif k < pivot:\n            return quickselect(arr, l, pivot - 1, k)\n        else:\n            return quickselect(arr, pivot + 1, r, k)\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    kth_smallest_index = quickselect(arg1, 0, n - 1, arg1.index(kth_smallest))\n    indices = []\n    i = 0\n    while len(indices) < arg2:\n        if arg1[i] <= kth_smallest:\n            indices.append(i)\n        i += 1\n    return indices']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return None\n    if arg2 == n:\n        return list(range(n))\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot = partition(arr, l, r)\n        if k == pivot:\n            return k\n        elif k < pivot:\n            return quickselect(arr, l, pivot - 1, k)\n        else:\n            return quickselect(arr, pivot + 1, r, k)\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    kth_smallest_index = quickselect(arg1, 0, n - 1, arg1.index(kth_smallest))\n    indices = []\n    i = 0\n    while len(indices) < arg2:\n        if arg1[i] <= kth_smallest:\n            indices.append(i)\n        i += 1\n    return indices']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return None\n    if arg2 == n:\n        return list(range(n))\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot = partition(arr, l, r)\n        if k == pivot:\n            return k\n        elif k < pivot:\n            return quickselect(arr, l, pivot - 1, k)\n        else:\n            return quickselect(arr, pivot + 1, r, k)\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    kth_smallest_index = quickselect(arg1, 0, n - 1, arg1.index(kth_smallest))\n    indices = []\n    i = 0\n    while len(indices) < arg2:\n        if arg1[i] <= kth_smallest:\n            indices.append(i)\n        i += 1\n    return indices']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, ((v, i) for i, v in enumerate(arg1)))\n    return [i for v, i in smallest]']",1000,0.005889700027182698,0.006145671003032475,0.010626200120896101,N/A
p3_find_n_smallest_number,prompt_7,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, ((v, i) for i, v in enumerate(arg1)))\n    return [i for v, i in smallest]']",10000,0.05503160017542541,0.05666559000965208,0.06324020004831254,N/A
p3_find_n_smallest_number,prompt_7,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, ((v, i) for i, v in enumerate(arg1)))\n    return [i for v, i in smallest]']",100000,0.5549302999861538,0.5671797439851798,0.5921651001553982,N/A
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 == 0:\n        return []\n    heap = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(heap)\n    res = []\n    for i in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return res']",1000,0.004021199885755777,0.004276731002610177,0.005082099931314588,N/A
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 == 0:\n        return []\n    heap = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(heap)\n    res = []\n    for i in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return res']",10000,0.05477629997767508,0.05733381299767643,0.06881289999000728,N/A
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 == 0:\n        return []\n    heap = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(heap)\n    res = []\n    for i in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return res']",100000,0.645093500148505,0.6837359590083361,0.7319458001293242,N/A
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",1000,0.004404200008139014,0.00471117899287492,0.005840300116688013,N/A
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",10000,0.09423960000276566,0.09683845700230449,0.10516800009645522,N/A
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",100000,1.2445004000328481,1.278183591007255,1.3097316999919713,N/A
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq._heapify_max(heap)\n    for num in arg1[arg2:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq._heapify_max(heap)\n    for num in arg1[arg2:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq._heapify_max(heap)\n    for num in arg1[arg2:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,11,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[store_idx], arr[i] = (arr[i], arr[store_idx])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [left]\n    pivot_idx = left + (right - left) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return [pivot_idx]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        index = quickselect(arg1, 0, len(arg1) - 1, i)\n        indexes.append(index)\n    return indexes']",1000,0.029174699913710356,0.03054449798539281,0.036667299922555685,N/A
p3_find_n_smallest_number,prompt_7,11,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[store_idx], arr[i] = (arr[i], arr[store_idx])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [left]\n    pivot_idx = left + (right - left) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return [pivot_idx]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        index = quickselect(arg1, 0, len(arg1) - 1, i)\n        indexes.append(index)\n    return indexes']",10000,0.3026856000069529,0.31485484100412575,0.3372982000000775,N/A
p3_find_n_smallest_number,prompt_7,11,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[store_idx], arr[i] = (arr[i], arr[store_idx])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [left]\n    pivot_idx = left + (right - left) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return [pivot_idx]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        index = quickselect(arg1, 0, len(arg1) - 1, i)\n        indexes.append(index)\n    return indexes']",100000,3.5655046000611037,3.672476968001574,3.784349299967289,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n    arg2_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return arg2_indexes']",1000,0.007170700002461672,0.007867416010703891,0.013488500146195292,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n    arg2_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return arg2_indexes']",10000,0.11475949990563095,0.11928408801089972,0.12846900010481477,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n    arg2_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return arg2_indexes']",100000,1.6064528999850154,1.6555406059836968,1.7217474998906255,N/A
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    result = {}\n    for i in range(len(arg1)):\n        if arg1[i] in arr[:arg2]:\n            result[i] = arg1[i]\n            if len(result) == arg2:\n                break\n    return result']",1000,0.005190999945625663,0.005591745998244733,0.012129100039601326,N/A
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    result = {}\n    for i in range(len(arg1)):\n        if arg1[i] in arr[:arg2]:\n            result[i] = arg1[i]\n            if len(result) == arg2:\n                break\n    return result']",10000,0.11780830007046461,0.12084067999385298,0.13484029984101653,N/A
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    result = {}\n    for i in range(len(arg1)):\n        if arg1[i] in arr[:arg2]:\n            result[i] = arg1[i]\n            if len(result) == arg2:\n                break\n    return result']",100000,1.6609072999563068,1.68953055099817,1.7282667001709342,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.007291800109669566,0.007587031002622098,0.008933600038290024,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.1110290999058634,0.11592141900444403,0.1383092999458313,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.6288119999226183,1.6727433739881963,1.728748899884522,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n    sorted_pairs = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [pair[0] for pair in sorted_pairs[:arg2]]']",1000,0.008341699838638306,0.00884149900637567,0.01302350009791553,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n    sorted_pairs = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [pair[0] for pair in sorted_pairs[:arg2]]']",10000,0.1344647000078112,0.14377246299525723,0.163795999949798,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n    sorted_pairs = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [pair[0] for pair in sorted_pairs[:arg2]]']",100000,2.1231889000628144,2.1855515739973637,2.26224929979071,N/A
p3_find_n_smallest_number,prompt_7,16,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    n = len(arr)\n    if k > n:\n        return 'k is larger than the length of the array'\n    heap = arr[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, n):\n        if arr[i] < heap[0]:\n            heap[0] = arr[i]\n            heapify(heap, k, 0)\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices\n\ndef heapify(arr, n, i):\n    smallest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)""]",1000,0.002171900123357773,0.0023589090094901623,0.00390870007686317,N/A
p3_find_n_smallest_number,prompt_7,16,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    n = len(arr)\n    if k > n:\n        return 'k is larger than the length of the array'\n    heap = arr[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, n):\n        if arr[i] < heap[0]:\n            heap[0] = arr[i]\n            heapify(heap, k, 0)\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices\n\ndef heapify(arr, n, i):\n    smallest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)""]",10000,0.02250560000538826,0.023517190993297844,0.028520100051537156,N/A
p3_find_n_smallest_number,prompt_7,16,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    n = len(arr)\n    if k > n:\n        return 'k is larger than the length of the array'\n    heap = arr[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, n):\n        if arr[i] < heap[0]:\n            heap[0] = arr[i]\n            heapify(heap, k, 0)\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices\n\ndef heapify(arr, n, i):\n    smallest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)""]",100000,0.22928930004127324,0.24698188501410187,0.30580290011130273,N/A
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",1000,0.007055200170725584,0.007599557000212372,0.009244099957868457,N/A
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",10000,0.1117923001293093,0.11503335899906234,0.1305323000997305,N/A
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",100000,1.61340789985843,1.6453234079875982,1.7158979000523686,N/A
p3_find_n_smallest_number,prompt_7,18,"[""def funcImp(arg1, k):\n    arr = arg1.copy()\n    indices = []\n    if not arr or k > len(arr):\n        return indices\n    arr.sort()\n    for i in range(k):\n        indx = arg1.index(arr[i])\n        indices.append(indx)\n        arg1[indx] = float('inf')\n    return indices""]",1000,0.0003339000977575779,0.000509863996412605,0.01000710017979145,N/A
p3_find_n_smallest_number,prompt_7,18,"[""def funcImp(arg1, k):\n    arr = arg1.copy()\n    indices = []\n    if not arr or k > len(arr):\n        return indices\n    arr.sort()\n    for i in range(k):\n        indx = arg1.index(arr[i])\n        indices.append(indx)\n        arg1[indx] = float('inf')\n    return indices""]",10000,0.003119200002402067,0.02490446497919038,0.1484805999789387,N/A
p3_find_n_smallest_number,prompt_7,18,"[""def funcImp(arg1, k):\n    arr = arg1.copy()\n    indices = []\n    if not arr or k > len(arr):\n        return indices\n    arr.sort()\n    for i in range(k):\n        indx = arg1.index(arr[i])\n        indices.append(indx)\n        arg1[indx] = float('inf')\n    return indices""]",100000,1.620654399972409,1.7712741280090996,1.8533095999155194,N/A
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    k_smallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max(k_smallest):\n            k_smallest[k_smallest.index(max(k_smallest))] = arg1[i]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",1000,0.007844199892133474,0.008352161005605012,0.010895600076764822,N/A
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    k_smallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max(k_smallest):\n            k_smallest[k_smallest.index(max(k_smallest))] = arg1[i]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",10000,0.08172309980727732,0.08499166000867263,0.09384260000661016,N/A
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    k_smallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max(k_smallest):\n            k_smallest[k_smallest.index(max(k_smallest))] = arg1[i]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",100000,0.8800609998870641,0.9019575909851119,0.9497539000585675,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    nums = [(num, index) for index, num in enumerate(arg1)]\n    sorted_nums = sorted(nums)\n    smallest_indexes = [sorted_nums[i][1] for i in range(arg2)]\n    return smallest_indexes']",1000,0.011992000043392181,0.012543826992623509,0.013865299988538027,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    nums = [(num, index) for index, num in enumerate(arg1)]\n    sorted_nums = sorted(nums)\n    smallest_indexes = [sorted_nums[i][1] for i in range(arg2)]\n    return smallest_indexes']",10000,0.18348759994842112,0.19174622198799626,0.21228269999846816,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    nums = [(num, index) for index, num in enumerate(arg1)]\n    sorted_nums = sorted(nums)\n    smallest_indexes = [sorted_nums[i][1] for i in range(arg2)]\n    return smallest_indexes']",100000,2.943255699938163,3.009406622010283,3.1076766999904066,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n    lst = [(num, idx) for idx, num in enumerate(arg1)]\n    lst.sort(key=lambda x: x[0])\n    result = [tup[1] for tup in lst[:arg2]]\n    return result']",1000,0.009665200021117926,0.010066938006784766,0.012703800108283758,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n    lst = [(num, idx) for idx, num in enumerate(arg1)]\n    lst.sort(key=lambda x: x[0])\n    result = [tup[1] for tup in lst[:arg2]]\n    return result']",10000,0.1536570000462234,0.15960504698334263,0.16460419981740415,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n    lst = [(num, idx) for idx, num in enumerate(arg1)]\n    lst.sort(key=lambda x: x[0])\n    result = [tup[1] for tup in lst[:arg2]]\n    return result']",100000,2.2562583000399172,2.315744272000156,2.416214199969545,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    k_indices = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            k_indices.append(i)\n    return k_indices']",1000,0.00445860018953681,0.00479639399331063,0.006019100081175566,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    k_indices = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            k_indices.append(i)\n    return k_indices']",10000,0.0930218999274075,0.09683748698793351,0.11102709989063442,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[:arg2][-1]\n    k_indices = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            k_indices.append(i)\n    return k_indices']",100000,1.26193209993653,1.2869986820057966,1.3678717999719083,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arr, k):\n    arr = [(val, idx) for idx, val in enumerate(arr)]\n    arr.sort()\n    return [x[1] for x in arr[:k]]']",1000,0.011523100081831217,0.012316946981009096,0.016899599926546216,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arr, k):\n    arr = [(val, idx) for idx, val in enumerate(arr)]\n    arr.sort()\n    return [x[1] for x in arr[:k]]']",10000,0.18170810001902282,0.19002961499849336,0.2162208000663668,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arr, k):\n    arr = [(val, idx) for idx, val in enumerate(arr)]\n    arr.sort()\n    return [x[1] for x in arr[:k]]']",100000,2.8605336998589337,2.9303656049794515,3.0836855999659747,N/A
p3_find_n_smallest_number,prompt_7,4,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return sorted(indexes)""]",1000,0.002196399960666895,0.0024058109940961,0.007854199968278408,N/A
p3_find_n_smallest_number,prompt_7,4,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return sorted(indexes)""]",10000,0.023917099926620722,0.034753156004007905,0.08889380004256964,N/A
p3_find_n_smallest_number,prompt_7,4,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return sorted(indexes)""]",100000,0.3395824001636356,0.7493060279986821,1.0922650001011789,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    return [(index_dict[val], val) for val in sorted_list[:arg2]]']",1000,0.005727899959310889,0.0061326339980587365,0.0072663999162614346,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    return [(index_dict[val], val) for val in sorted_list[:arg2]]']",10000,0.10762679995968938,0.11078726199222728,0.11811299994587898,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    return [(index_dict[val], val) for val in sorted_list[:arg2]]']",100000,1.688819299917668,1.720126091982238,1.7886288000736386,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    arr = list(arg1)\n    k = arg2\n    index_dict = {}\n    n = len(arr)\n    if k == 0 or k > n:\n        return []\n    if k == n:\n        return [i for i in range(n)]\n\n    def partition(start, end):\n        pivot = arr[start]\n        left = start + 1\n        right = end\n        while True:\n            while left <= right and arr[left] <= pivot:\n                left += 1\n            while left <= right and arr[right] >= pivot:\n                right -= 1\n            if left <= right:\n                arr[left], arr[right] = (arr[right], arr[left])\n            else:\n                break\n        arr[start], arr[right] = (arr[right], arr[start])\n        index_dict[right] = arr[right]\n        return right\n\n    def quick_select(start, end, k_smallest):\n        if start == end:\n            return arr[start]\n        pivot_index = partition(start, end)\n        if k_smallest == pivot_index:\n            return arr[k_smallest]\n        elif k_smallest < pivot_index:\n            return quick_select(start, pivot_index - 1, k_smallest)\n        else:\n            return quick_select(pivot_index + 1, end, k_smallest)\n    quick_select(0, n - 1, k - 1)\n    return [i for i in index_dict.keys()]']",1000,0.00502249994315207,0.005335905991960317,0.006453400012105703,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    arr = list(arg1)\n    k = arg2\n    index_dict = {}\n    n = len(arr)\n    if k == 0 or k > n:\n        return []\n    if k == n:\n        return [i for i in range(n)]\n\n    def partition(start, end):\n        pivot = arr[start]\n        left = start + 1\n        right = end\n        while True:\n            while left <= right and arr[left] <= pivot:\n                left += 1\n            while left <= right and arr[right] >= pivot:\n                right -= 1\n            if left <= right:\n                arr[left], arr[right] = (arr[right], arr[left])\n            else:\n                break\n        arr[start], arr[right] = (arr[right], arr[start])\n        index_dict[right] = arr[right]\n        return right\n\n    def quick_select(start, end, k_smallest):\n        if start == end:\n            return arr[start]\n        pivot_index = partition(start, end)\n        if k_smallest == pivot_index:\n            return arr[k_smallest]\n        elif k_smallest < pivot_index:\n            return quick_select(start, pivot_index - 1, k_smallest)\n        else:\n            return quick_select(pivot_index + 1, end, k_smallest)\n    quick_select(0, n - 1, k - 1)\n    return [i for i in index_dict.keys()]']",10000,0.057028100127354264,0.05956154199782759,0.06497099995613098,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    arr = list(arg1)\n    k = arg2\n    index_dict = {}\n    n = len(arr)\n    if k == 0 or k > n:\n        return []\n    if k == n:\n        return [i for i in range(n)]\n\n    def partition(start, end):\n        pivot = arr[start]\n        left = start + 1\n        right = end\n        while True:\n            while left <= right and arr[left] <= pivot:\n                left += 1\n            while left <= right and arr[right] >= pivot:\n                right -= 1\n            if left <= right:\n                arr[left], arr[right] = (arr[right], arr[left])\n            else:\n                break\n        arr[start], arr[right] = (arr[right], arr[start])\n        index_dict[right] = arr[right]\n        return right\n\n    def quick_select(start, end, k_smallest):\n        if start == end:\n            return arr[start]\n        pivot_index = partition(start, end)\n        if k_smallest == pivot_index:\n            return arr[k_smallest]\n        elif k_smallest < pivot_index:\n            return quick_select(start, pivot_index - 1, k_smallest)\n        else:\n            return quick_select(pivot_index + 1, end, k_smallest)\n    quick_select(0, n - 1, k - 1)\n    return [i for i in index_dict.keys()]']",100000,0.5781445000320673,0.5949722830043175,0.6289774000179023,N/A
p3_find_n_smallest_number,prompt_7,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",1000,0.00324780005030334,0.003395618011709303,0.003608100116252899,N/A
p3_find_n_smallest_number,prompt_7,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",10000,0.029880299931392074,0.031249796987976877,0.03702280018478632,N/A
p3_find_n_smallest_number,prompt_7,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",100000,0.30259959981776774,0.31097748401574793,0.32331769983284175,N/A
p3_find_n_smallest_number,prompt_7,8,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted list.\n\n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer represents the count of k smallest numbers\n    \n    Returns:\n    A list of indexes for the k smallest numbers in the list\n    """"""\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:arg2]']",1000,0.007011899957433343,0.007497063996270299,0.0103815000038594,N/A
p3_find_n_smallest_number,prompt_7,8,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted list.\n\n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer represents the count of k smallest numbers\n    \n    Returns:\n    A list of indexes for the k smallest numbers in the list\n    """"""\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:arg2]']",10000,0.11103149992413819,0.11438939398620278,0.12589879985898733,N/A
p3_find_n_smallest_number,prompt_7,8,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted list.\n\n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer represents the count of k smallest numbers\n    \n    Returns:\n    A list of indexes for the k smallest numbers in the list\n    """"""\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:arg2]']",100000,1.6282804000657052,1.6685070730024016,1.744137000059709,N/A
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = sorted([arg1.index(num) for num in heap])\n    return indexes']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = sorted([arg1.index(num) for num in heap])\n    return indexes']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = sorted([arg1.index(num) for num in heap])\n    return indexes']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[arg1[i]] = i\n    sorted_arr = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(dict1[sorted_arr[i]])\n    return result']",1000,0.005760000087320805,0.00619730499573052,0.010923999827355146,N/A
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[arg1[i]] = i\n    sorted_arr = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(dict1[sorted_arr[i]])\n    return result']",10000,0.10601360001601279,0.11093936600256711,0.13989920006133616,N/A
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[arg1[i]] = i\n    sorted_arr = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(dict1[sorted_arr[i]])\n    return result']",100000,1.6443896999116987,1.683405234005768,1.7383792998734862,N/A
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    index_list = list(enumerate(arg1))\n    sorted_index_list = sorted(index_list, key=lambda x: x[1])\n    k_indices = [sorted_index_list[i][0] for i in range(arg2)]\n    return k_indices']",1000,0.008305700030177832,0.009027677006088197,0.01392010017298162,N/A
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    index_list = list(enumerate(arg1))\n    sorted_index_list = sorted(index_list, key=lambda x: x[1])\n    k_indices = [sorted_index_list[i][0] for i in range(arg2)]\n    return k_indices']",10000,0.13811399997211993,0.14695892100222407,0.1584677998907864,N/A
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    index_list = list(enumerate(arg1))\n    sorted_index_list = sorted(index_list, key=lambda x: x[1])\n    k_indices = [sorted_index_list[i][0] for i in range(arg2)]\n    return k_indices']",100000,2.2000064998865128,2.2545229339948856,2.307494099950418,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in range(arg2):\n        result[heapq.heappop(heap)] = i\n    return result']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in range(arg2):\n        result[heapq.heappop(heap)] = i\n    return result']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in range(arg2):\n        result[heapq.heappop(heap)] = i\n    return result']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    k_smallest_vals = sorted(dict1.items(), key=lambda x: x[1])[:arg2]\n    k_smallest_vals_sorted = sorted(k_smallest_vals, key=lambda x: x[0])\n    k_smallest_indexes = [tup[0] for tup in k_smallest_vals_sorted]\n    return k_smallest_indexes']",1000,0.010043499991297722,0.010870091998949647,0.01452259998768568,N/A
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    k_smallest_vals = sorted(dict1.items(), key=lambda x: x[1])[:arg2]\n    k_smallest_vals_sorted = sorted(k_smallest_vals, key=lambda x: x[0])\n    k_smallest_indexes = [tup[0] for tup in k_smallest_vals_sorted]\n    return k_smallest_indexes']",10000,0.15184960002079606,0.16588793199509383,0.1768101998604834,N/A
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    k_smallest_vals = sorted(dict1.items(), key=lambda x: x[1])[:arg2]\n    k_smallest_vals_sorted = sorted(k_smallest_vals, key=lambda x: x[0])\n    k_smallest_indexes = [tup[0] for tup in k_smallest_vals_sorted]\n    return k_smallest_indexes']",100000,2.5370495000388473,2.6038424459914675,2.7001686000730842,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    index_value_pairs = [(i, value) for i, value in enumerate(arg1)]\n    smallest_value_pairs = sorted(index_value_pairs, key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in smallest_value_pairs])']",1000,0.009111199993640184,0.009768591979518532,0.013795000035315752,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    index_value_pairs = [(i, value) for i, value in enumerate(arg1)]\n    smallest_value_pairs = sorted(index_value_pairs, key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in smallest_value_pairs])']",10000,0.1401946002151817,0.14697194999549537,0.15671440004371107,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    index_value_pairs = [(i, value) for i, value in enumerate(arg1)]\n    smallest_value_pairs = sorted(index_value_pairs, key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in smallest_value_pairs])']",100000,1.9894610000774264,2.046767747013364,2.1174169001169503,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",1000,0.007065400015562773,0.00754369999980554,0.009235500125214458,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",10000,0.11361170001327991,0.11730854400899261,0.1260440000332892,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",100000,1.6123617000412196,1.6545306580048054,1.7153463999275118,N/A
p3_find_n_smallest_number,prompt_7,16,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",1000,0.007089299848303199,0.007686172006651759,0.009439999936148524,N/A
p3_find_n_smallest_number,prompt_7,16,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",10000,0.11173060000874102,0.11560475799255072,0.12567880004644394,N/A
p3_find_n_smallest_number,prompt_7,16,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",100000,1.625385700026527,1.6665683859866112,1.7062024001497775,N/A
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[sorted_list[i]])\n    return result']",1000,0.005742100067436695,0.006142632982227951,0.0067971998360008,N/A
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[sorted_list[i]])\n    return result']",10000,0.10662609990686178,0.11018286099424586,0.12059259996749461,N/A
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[sorted_list[i]])\n    return result']",100000,1.6437653000466526,1.678923898988869,1.7355673999991268,N/A
p3_find_n_smallest_number,prompt_7,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    return [heapq.heappop(heap)[1] for i in range(arg2)]']",1000,0.005931899882853031,0.006248485997784883,0.007839899975806475,N/A
p3_find_n_smallest_number,prompt_7,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    return [heapq.heappop(heap)[1] for i in range(arg2)]']",10000,0.06185440020635724,0.06436774099711329,0.07399339997209609,N/A
p3_find_n_smallest_number,prompt_7,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    return [heapq.heappop(heap)[1] for i in range(arg2)]']",100000,0.6015356997959316,0.6179936829814687,0.6511903998907655,N/A
p3_find_n_smallest_number,prompt_7,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k_heap = [(val, index) for index, val in enumerate(arg1[:arg2])]\n    heapq.heapify(smallest_k_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < smallest_k_heap[-1][0]:\n            heapq.heappushpop(smallest_k_heap, (arg1[i], i))\n    result = [index for val, index in sorted(smallest_k_heap, key=lambda x: x[1])]\n    return result']",1000,0.005785500165075064,0.006092113994527608,0.0073667000979185104,N/A
p3_find_n_smallest_number,prompt_7,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k_heap = [(val, index) for index, val in enumerate(arg1[:arg2])]\n    heapq.heapify(smallest_k_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < smallest_k_heap[-1][0]:\n            heapq.heappushpop(smallest_k_heap, (arg1[i], i))\n    result = [index for val, index in sorted(smallest_k_heap, key=lambda x: x[1])]\n    return result']",10000,0.059585100039839745,0.06247369300574064,0.08152889995835721,N/A
p3_find_n_smallest_number,prompt_7,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k_heap = [(val, index) for index, val in enumerate(arg1[:arg2])]\n    heapq.heapify(smallest_k_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < smallest_k_heap[-1][0]:\n            heapq.heappushpop(smallest_k_heap, (arg1[i], i))\n    result = [index for val, index in sorted(smallest_k_heap, key=lambda x: x[1])]\n    return result']",100000,0.5819488000124693,0.5956521890009754,0.6197023000568151,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict[i] = val\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest = [sorted_dict[i][1] for i in range(arg2)]\n    index_list = [sorted_dict[i][0] for i in range(arg2)]\n    return index_list']",1000,0.010269599966704845,0.010942073019687087,0.012942600063979626,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict[i] = val\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest = [sorted_dict[i][1] for i in range(arg2)]\n    index_list = [sorted_dict[i][0] for i in range(arg2)]\n    return index_list']",10000,0.16058359993621707,0.1733216820214875,0.18332770001143217,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict[i] = val\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest = [sorted_dict[i][1] for i in range(arg2)]\n    index_list = [sorted_dict[i][0] for i in range(arg2)]\n    return index_list']",100000,2.664714200189337,2.729160622996278,2.8272249998990446,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, left, right, k):\n        if left == right:\n            return arr[left]\n        pivot_index = partition(arr, left, right)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return -1\n    kth_smallest = quickselect(arg1, 0, n - 1, k - 1)\n    indexes = []\n    for i in range(n):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, left, right, k):\n        if left == right:\n            return arr[left]\n        pivot_index = partition(arr, left, right)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return -1\n    kth_smallest = quickselect(arg1, 0, n - 1, k - 1)\n    indexes = []\n    for i in range(n):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, left, right, k):\n        if left == right:\n            return arr[left]\n        pivot_index = partition(arr, left, right)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return -1\n    kth_smallest = quickselect(arg1, 0, n - 1, k - 1)\n    indexes = []\n    for i in range(n):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:arg2]']",1000,0.007132800063118339,0.007635682986583561,0.00871510012075305,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:arg2]']",10000,0.11162200011312962,0.11536077400203794,0.12428679992444813,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:arg2]']",100000,1.6272120999637991,1.668036262993701,1.7153008000459522,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    element_dict = {i: v for i, v in enumerate(arg1)}\n    k_smallest_elements = sorted(element_dict, key=element_dict.get)[:arg2]\n    return k_smallest_elements']",1000,0.0076865998562425375,0.008025248998310417,0.00872240005992353,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    element_dict = {i: v for i, v in enumerate(arg1)}\n    k_smallest_elements = sorted(element_dict, key=element_dict.get)[:arg2]\n    return k_smallest_elements']",10000,0.11791129992343485,0.1216946129919961,0.1337453001178801,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    element_dict = {i: v for i, v in enumerate(arg1)}\n    k_smallest_elements = sorted(element_dict, key=element_dict.get)[:arg2]\n    return k_smallest_elements']",100000,1.8729805001057684,1.918997042006813,2.0046089000534266,N/A
p3_find_n_smallest_number,prompt_7,4,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    return sorted([x[1] for x in heap[:arg2]])']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,4,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    return sorted([x[1] for x in heap[:arg2]])']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,4,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    return sorted([x[1] for x in heap[:arg2]])']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,5,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Invalid input'\n    index_list = list(range(n))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:k]""]",1000,0.007127100136131048,0.007595235002227128,0.010699700098484755,N/A
p3_find_n_smallest_number,prompt_7,5,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Invalid input'\n    index_list = list(range(n))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:k]""]",10000,0.11122790002264082,0.11360933500807732,0.120157599914819,N/A
p3_find_n_smallest_number,prompt_7,5,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Invalid input'\n    index_list = list(range(n))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:k]""]",100000,1.5984262998681515,1.6394878909853288,1.7148603999521583,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    values = [(num, index) for index, num in enumerate(arg1)]\n    values.sort()\n    indices = [index for _, index in values[:arg2]]\n    return indices']",1000,0.011486100032925606,0.012101880996488035,0.015078000025823712,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    values = [(num, index) for index, num in enumerate(arg1)]\n    values.sort()\n    indices = [index for _, index in values[:arg2]]\n    return indices']",10000,0.17264749994501472,0.17915814001346006,0.1908987001515925,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n    values = [(num, index) for index, num in enumerate(arg1)]\n    values.sort()\n    indices = [index for _, index in values[:arg2]]\n    return indices']",100000,2.8308294001035392,2.9114269310003147,3.002151299966499,N/A
p3_find_n_smallest_number,prompt_7,7,"['def partition(nums, left, right, pivot_index):\n    pivot_value = nums[pivot_index]\n    nums[pivot_index], nums[right] = (nums[right], nums[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if nums[i] < pivot_value:\n            nums[i], nums[store_index] = (nums[store_index], nums[i])\n            store_index += 1\n    nums[right], nums[store_index] = (nums[store_index], nums[right])\n    return store_index\n\ndef quickselect(nums, left, right, k):\n    if left == right:\n        return nums[left]\n    pivot_index = (left + right) // 2\n    pivot_index = partition(nums, left, right, pivot_index)\n    if k == pivot_index:\n        return nums[k]\n    elif k < pivot_index:\n        return quickselect(nums, left, pivot_index - 1, k)\n    else:\n        return quickselect(nums, pivot_index + 1, right, k)\n\ndef funcImp(nums, k):\n    kth_smallest = quickselect(nums, 0, len(nums) - 1, k - 1)\n    indexes = [i for i, num in enumerate(nums) if num <= kth_smallest][:k]\n    return indexes']",1000,0.007554200012236834,0.007945464993827044,0.00934310001321137,N/A
p3_find_n_smallest_number,prompt_7,7,"['def partition(nums, left, right, pivot_index):\n    pivot_value = nums[pivot_index]\n    nums[pivot_index], nums[right] = (nums[right], nums[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if nums[i] < pivot_value:\n            nums[i], nums[store_index] = (nums[store_index], nums[i])\n            store_index += 1\n    nums[right], nums[store_index] = (nums[store_index], nums[right])\n    return store_index\n\ndef quickselect(nums, left, right, k):\n    if left == right:\n        return nums[left]\n    pivot_index = (left + right) // 2\n    pivot_index = partition(nums, left, right, pivot_index)\n    if k == pivot_index:\n        return nums[k]\n    elif k < pivot_index:\n        return quickselect(nums, left, pivot_index - 1, k)\n    else:\n        return quickselect(nums, pivot_index + 1, right, k)\n\ndef funcImp(nums, k):\n    kth_smallest = quickselect(nums, 0, len(nums) - 1, k - 1)\n    indexes = [i for i, num in enumerate(nums) if num <= kth_smallest][:k]\n    return indexes']",10000,0.07940419996157289,0.08163240099791437,0.08858119999058545,N/A
p3_find_n_smallest_number,prompt_7,7,"['def partition(nums, left, right, pivot_index):\n    pivot_value = nums[pivot_index]\n    nums[pivot_index], nums[right] = (nums[right], nums[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if nums[i] < pivot_value:\n            nums[i], nums[store_index] = (nums[store_index], nums[i])\n            store_index += 1\n    nums[right], nums[store_index] = (nums[store_index], nums[right])\n    return store_index\n\ndef quickselect(nums, left, right, k):\n    if left == right:\n        return nums[left]\n    pivot_index = (left + right) // 2\n    pivot_index = partition(nums, left, right, pivot_index)\n    if k == pivot_index:\n        return nums[k]\n    elif k < pivot_index:\n        return quickselect(nums, left, pivot_index - 1, k)\n    else:\n        return quickselect(nums, pivot_index + 1, right, k)\n\ndef funcImp(nums, k):\n    kth_smallest = quickselect(nums, 0, len(nums) - 1, k - 1)\n    indexes = [i for i, num in enumerate(nums) if num <= kth_smallest][:k]\n    return indexes']",100000,0.8691038000397384,0.9510173619911074,0.9716040000785142,N/A
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (x, i))\n        elif x < heap[0][0]:\n            heapq.heappushpop(heap, (x, i))\n    return [x[1] for x in heap]']",1000,0.003923000069335103,0.004070325992070138,0.0047373000998049974,N/A
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (x, i))\n        elif x < heap[0][0]:\n            heapq.heappushpop(heap, (x, i))\n    return [x[1] for x in heap]']",10000,0.04177499981597066,0.043008148996159436,0.049574899952858686,N/A
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (x, i))\n        elif x < heap[0][0]:\n            heapq.heappushpop(heap, (x, i))\n    return [x[1] for x in heap]']",100000,0.3075185001362115,0.31575319399358703,0.3484308999031782,N/A
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    dict_indices = {}\n    for i in range(len(arg1)):\n        dict_indices[i] = arg1[i]\n    sorted_indices = sorted(dict_indices.items(), key=lambda x: x[1])\n    k_smallest = sorted_indices[:arg2]\n    return [index for index, value in k_smallest]']",1000,0.010295600164681673,0.010948957996442915,0.015604799846187234,N/A
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    dict_indices = {}\n    for i in range(len(arg1)):\n        dict_indices[i] = arg1[i]\n    sorted_indices = sorted(dict_indices.items(), key=lambda x: x[1])\n    k_smallest = sorted_indices[:arg2]\n    return [index for index, value in k_smallest]']",10000,0.15956579986959696,0.16878546701278538,0.17705830000340939,N/A
p3_find_n_smallest_number,prompt_7,9,"['def funcImp(arg1, arg2):\n    dict_indices = {}\n    for i in range(len(arg1)):\n        dict_indices[i] = arg1[i]\n    sorted_indices = sorted(dict_indices.items(), key=lambda x: x[1])\n    k_smallest = sorted_indices[:arg2]\n    return [index for index, value in k_smallest]']",100000,2.6314741999376565,2.700593609986827,2.817000300157815,N/A
p3_find_n_smallest_number,prompt_7,10,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        current_index = arg1.index(min(arg1))\n        indexes.append(current_index)\n        arg1[current_index] = float('inf')\n    return indexes""]",1000,0.0021710998844355345,0.002367945001460612,0.007832700153812766,N/A
p3_find_n_smallest_number,prompt_7,10,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        current_index = arg1.index(min(arg1))\n        indexes.append(current_index)\n        arg1[current_index] = float('inf')\n    return indexes""]",10000,0.022268899949267507,0.03332748800283298,0.09035610011778772,N/A
p3_find_n_smallest_number,prompt_7,10,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        current_index = arg1.index(min(arg1))\n        indexes.append(current_index)\n        arg1[current_index] = float('inf')\n    return indexes""]",100000,0.3383251999039203,0.7494961569970474,1.1114932999480516,N/A
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:arg2]']",1000,0.00715490011498332,0.007582769002765417,0.011503600049763918,N/A
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:arg2]']",10000,0.11124760005623102,0.11465613899519667,0.12473669997416437,N/A
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:arg2]']",100000,1.6196583998389542,1.6485997659969143,1.6953312000259757,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: List of integers\n    :param k: Number of smallest indexes to find\n    :return: List of indexes of k smallest numbers\n    """"""\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(num_dict.items(), key=lambda item: item[1])}\n    return list(sorted_dict.keys())[:k]']",1000,0.01289419992826879,0.013514403009321541,0.016253500012680888,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: List of integers\n    :param k: Number of smallest indexes to find\n    :return: List of indexes of k smallest numbers\n    """"""\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(num_dict.items(), key=lambda item: item[1])}\n    return list(sorted_dict.keys())[:k]']",10000,0.1941396000329405,0.2076544150034897,0.2184764000121504,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: List of integers\n    :param k: Number of smallest indexes to find\n    :return: List of indexes of k smallest numbers\n    """"""\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(num_dict.items(), key=lambda item: item[1])}\n    return list(sorted_dict.keys())[:k]']",100000,3.8302994000259787,3.9399694089754487,4.073738799896091,N/A
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",1000,0.0029280998278409243,0.0031594930053688588,0.004038700135424733,N/A
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",10000,0.03024079999886453,0.030974679992068557,0.03379260003566742,N/A
p3_find_n_smallest_number,prompt_7,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",100000,0.6898054999765009,0.72319448398659,0.7655285999644548,N/A
p3_find_n_smallest_number,prompt_7,14,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    return sorted(heap)']",1000,0.004020999884232879,0.004192351996898651,0.004526300122961402,N/A
p3_find_n_smallest_number,prompt_7,14,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    return sorted(heap)']",10000,0.04102949984371662,0.042468764004297554,0.046829700004309416,N/A
p3_find_n_smallest_number,prompt_7,14,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    return sorted(heap)']",100000,0.41139720007777214,0.4187402620119974,0.43938999995589256,N/A
p3_find_n_smallest_number,prompt_7,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return [(i, x) for i, x in enumerate(arg1)]\n    heap = [(-x, i) for i, x in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i, x in enumerate(arg1[arg2:]):\n        if x < -heap[0][0]:\n            heapq.heapreplace(heap, (-x, i + arg2))\n    result = sorted(([-x, i] for x, i in heap))\n    return result']",1000,0.003026499878615141,0.003235424985177815,0.003784499829635024,N/A
p3_find_n_smallest_number,prompt_7,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return [(i, x) for i, x in enumerate(arg1)]\n    heap = [(-x, i) for i, x in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i, x in enumerate(arg1[arg2:]):\n        if x < -heap[0][0]:\n            heapq.heapreplace(heap, (-x, i + arg2))\n    result = sorted(([-x, i] for x, i in heap))\n    return result']",10000,0.02974159992299974,0.031057712000329047,0.03517049993388355,N/A
p3_find_n_smallest_number,prompt_7,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return [(i, x) for i, x in enumerate(arg1)]\n    heap = [(-x, i) for i, x in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i, x in enumerate(arg1[arg2:]):\n        if x < -heap[0][0]:\n            heapq.heapreplace(heap, (-x, i + arg2))\n    result = sorted(([-x, i] for x, i in heap))\n    return result']",100000,0.3135164000559598,0.32523149099200965,0.3483302998356521,N/A
p3_find_n_smallest_number,prompt_7,16,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indices = []\n    for elt in heap:\n        indices.append(arg1.index(elt))\n    return indices']",1000,0.00596199999563396,0.006341305999085307,0.010970400180667639,N/A
p3_find_n_smallest_number,prompt_7,16,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indices = []\n    for elt in heap:\n        indices.append(arg1.index(elt))\n    return indices']",10000,0.06650379998609424,0.06810972298262641,0.074123399797827,N/A
p3_find_n_smallest_number,prompt_7,16,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indices = []\n    for elt in heap:\n        indices.append(arg1.index(elt))\n    return indices']",100000,0.6419202000834048,0.6507524420064874,0.6670516000594944,N/A
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    """"""\n    Find and return the indexes of the k smallest numbers in an unsorted array\n        \n    Parameters:\n    arg1 (list): Unsorted array of integers\n    arg2 (int): The number of smallest integers to retrieve\n    \n    Returns:\n    list: A list of the indexes of the k smallest numbers in the input array\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = None\n    return indexes']",1000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    """"""\n    Find and return the indexes of the k smallest numbers in an unsorted array\n        \n    Parameters:\n    arg1 (list): Unsorted array of integers\n    arg2 (int): The number of smallest integers to retrieve\n    \n    Returns:\n    list: A list of the indexes of the k smallest numbers in the input array\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = None\n    return indexes']",10000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_7,17,"['def funcImp(arg1, arg2):\n    """"""\n    Find and return the indexes of the k smallest numbers in an unsorted array\n        \n    Parameters:\n    arg1 (list): Unsorted array of integers\n    arg2 (int): The number of smallest integers to retrieve\n    \n    Returns:\n    list: A list of the indexes of the k smallest numbers in the input array\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = None\n    return indexes']",100000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[num] = i\n    arg1.sort()\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_indices.append(num_dict[arg1[i]])\n    return k_smallest_indices']",1000,0.0030479999259114265,0.0031175420014187692,0.003268799977377057,N/A
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[num] = i\n    arg1.sort()\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_indices.append(num_dict[arg1[i]])\n    return k_smallest_indices']",10000,0.03019939991645515,0.03117014399264008,0.03613030002452433,N/A
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[num] = i\n    arg1.sort()\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_indices.append(num_dict[arg1[i]])\n    return k_smallest_indices']",100000,0.6849736000876874,0.7216775690042414,0.7896875999867916,N/A
p3_find_n_smallest_number,prompt_7,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    res = []\n    while min_heap:\n        res.append(heapq.heappop(min_heap)[1])\n    res.sort()\n    return res']",1000,0.0022528001572936773,0.0023734170012176038,0.0025937999598681927,N/A
p3_find_n_smallest_number,prompt_7,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    res = []\n    while min_heap:\n        res.append(heapq.heappop(min_heap)[1])\n    res.sort()\n    return res']",10000,0.022532999981194735,0.023498080992139875,0.025673700030893087,N/A
p3_find_n_smallest_number,prompt_7,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    res = []\n    while min_heap:\n        res.append(heapq.heappop(min_heap)[1])\n    res.sort()\n    return res']",100000,0.22645010007545352,0.23051059897523374,0.2417384998407215,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    a = arg1[:]\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return arr[l]\n        index = partition(arr, l, r)\n        if k == index:\n            return arr[k]\n        elif k < index:\n            return quickselect(arr, l, index - 1, k)\n        else:\n            return quickselect(arr, index + 1, r, k)\n    kth_smallest = quickselect(a, 0, len(a) - 1, k - 1)\n    indexes = sorted([i for i, x in enumerate(a) if x <= kth_smallest][:k])\n    return indexes']",1000,0.012669499963521957,0.013224184999708087,0.01578009990043938,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    a = arg1[:]\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return arr[l]\n        index = partition(arr, l, r)\n        if k == index:\n            return arr[k]\n        elif k < index:\n            return quickselect(arr, l, index - 1, k)\n        else:\n            return quickselect(arr, index + 1, r, k)\n    kth_smallest = quickselect(a, 0, len(a) - 1, k - 1)\n    indexes = sorted([i for i, x in enumerate(a) if x <= kth_smallest][:k])\n    return indexes']",10000,0.04191490006633103,0.04365314400289208,0.0634182000067085,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    a = arg1[:]\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return arr[l]\n        index = partition(arr, l, r)\n        if k == index:\n            return arr[k]\n        elif k < index:\n            return quickselect(arr, l, index - 1, k)\n        else:\n            return quickselect(arr, index + 1, r, k)\n    kth_smallest = quickselect(a, 0, len(a) - 1, k - 1)\n    indexes = sorted([i for i, x in enumerate(a) if x <= kth_smallest][:k])\n    return indexes']",100000,1.0111042999196798,1.0270012799999677,1.0508091999217868,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    index_arr = []\n    for num in k_smallest:\n        index_arr.append(arg1.index(num))\n    return index_arr']",1000,0.003361299866810441,0.0035110519896261396,0.003970400197431445,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    index_arr = []\n    for num in k_smallest:\n        index_arr.append(arg1.index(num))\n    return index_arr']",10000,0.0852870000526309,0.08764788901200518,0.09689350007101893,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    index_arr = []\n    for num in k_smallest:\n        index_arr.append(arg1.index(num))\n    return index_arr']",100000,1.2110230999533087,1.2307297259988264,1.259984100004658,N/A
p3_find_n_smallest_number,prompt_7,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = [i for i in range(len(arg1)) if arg1[i] in heap]\n    return sorted(indexes)']",1000,0.009847800014540553,0.010290384986437856,0.015233299927785993,N/A
p3_find_n_smallest_number,prompt_7,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = [i for i in range(len(arg1)) if arg1[i] in heap]\n    return sorted(indexes)']",10000,0.08406929997727275,0.08639481500722468,0.1052562000695616,N/A
p3_find_n_smallest_number,prompt_7,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = [i for i in range(len(arg1)) if arg1[i] in heap]\n    return sorted(indexes)']",100000,1.1040491999592632,1.1228810379910283,1.1764324000105262,N/A
p3_find_n_smallest_number,prompt_7,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int) or arg2 <= 0 or (arg2 > len(arg1)):\n        return None\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            min_heap[0] = (arg1[i], i)\n            heapq.heapify(min_heap)\n    indices = []\n    for i in range(arg2):\n        indices.append(heapq.heappop(min_heap)[1])\n    return indices']",1000,0.002301800064742565,0.0024007200100459158,0.002598399994894862,N/A
p3_find_n_smallest_number,prompt_7,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int) or arg2 <= 0 or (arg2 > len(arg1)):\n        return None\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            min_heap[0] = (arg1[i], i)\n            heapq.heapify(min_heap)\n    indices = []\n    for i in range(arg2):\n        indices.append(heapq.heappop(min_heap)[1])\n    return indices']",10000,0.02237379993312061,0.023322082001250237,0.02909129997715354,N/A
p3_find_n_smallest_number,prompt_7,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int) or arg2 <= 0 or (arg2 > len(arg1)):\n        return None\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            min_heap[0] = (arg1[i], i)\n            heapq.heapify(min_heap)\n    indices = []\n    for i in range(arg2):\n        indices.append(heapq.heappop(min_heap)[1])\n    return indices']",100000,0.22704049991443753,0.23101966300513596,0.24262930010445416,N/A
p3_find_n_smallest_number,prompt_7,4,"['import random\n\ndef partition(arr, low, high):\n    pivot_idx = random.randint(low, high)\n    pivot = arr[pivot_idx]\n    i = low - 1\n    j = high + 1\n    while True:\n        i += 1\n        while arr[i] < pivot:\n            i += 1\n        j -= 1\n        while arr[j] > pivot:\n            j -= 1\n        if i >= j:\n            return j\n        arr[i], arr[j] = (arr[j], arr[i])\n\ndef quicksort(arr, low, high, k):\n    if len(arr) <= 1:\n        return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    pivot = partition(arr, low, high)\n    if k == pivot:\n        return sorted(range(pivot + 1), key=lambda i: arr[i])[:k]\n    elif k < pivot:\n        return quicksort(arr, low, pivot - 1, k)\n    else:\n        return quicksort(arr, pivot + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",1000,0.00328439986333251,0.003907143003307283,0.005201800027862191,N/A
p3_find_n_smallest_number,prompt_7,4,"['import random\n\ndef partition(arr, low, high):\n    pivot_idx = random.randint(low, high)\n    pivot = arr[pivot_idx]\n    i = low - 1\n    j = high + 1\n    while True:\n        i += 1\n        while arr[i] < pivot:\n            i += 1\n        j -= 1\n        while arr[j] > pivot:\n            j -= 1\n        if i >= j:\n            return j\n        arr[i], arr[j] = (arr[j], arr[i])\n\ndef quicksort(arr, low, high, k):\n    if len(arr) <= 1:\n        return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    pivot = partition(arr, low, high)\n    if k == pivot:\n        return sorted(range(pivot + 1), key=lambda i: arr[i])[:k]\n    elif k < pivot:\n        return quicksort(arr, low, pivot - 1, k)\n    else:\n        return quicksort(arr, pivot + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",10000,0.03261759993620217,0.03584014099556953,0.0415774998255074,N/A
p3_find_n_smallest_number,prompt_7,4,"['import random\n\ndef partition(arr, low, high):\n    pivot_idx = random.randint(low, high)\n    pivot = arr[pivot_idx]\n    i = low - 1\n    j = high + 1\n    while True:\n        i += 1\n        while arr[i] < pivot:\n            i += 1\n        j -= 1\n        while arr[j] > pivot:\n            j -= 1\n        if i >= j:\n            return j\n        arr[i], arr[j] = (arr[j], arr[i])\n\ndef quicksort(arr, low, high, k):\n    if len(arr) <= 1:\n        return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    pivot = partition(arr, low, high)\n    if k == pivot:\n        return sorted(range(pivot + 1), key=lambda i: arr[i])[:k]\n    elif k < pivot:\n        return quicksort(arr, low, pivot - 1, k)\n    else:\n        return quicksort(arr, pivot + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",100000,0.39339350000955164,0.46273350798757745,0.5137097998522222,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = [arg1.index(x) for x in k_smallest]\n    return indexes']",1000,0.003292999928817153,0.003555044000968337,0.004563800059258938,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = [arg1.index(x) for x in k_smallest]\n    return indexes']",10000,0.08483979990705848,0.0873450689855963,0.09325959999114275,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = [arg1.index(x) for x in k_smallest]\n    return indexes']",100000,1.2108724999707192,1.2307547279912978,1.2539633000269532,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n\n    def quicksort(lst):\n        if len(lst) <= 1:\n            return lst\n        pivot = lst[len(lst) // 2]\n        left = [x for x in lst if x < pivot]\n        middle = [x for x in lst if x == pivot]\n        right = [x for x in lst if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n    sorted_list = quicksort(arg1)\n    smallest_values = sorted_list[:arg2]\n    smallest_indexes = []\n    for value in smallest_values:\n        index = arg1.index(value)\n        smallest_indexes.append(index)\n    return smallest_indexes']",1000,0.08941649994812906,0.09134451098274439,0.10119409998878837,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n\n    def quicksort(lst):\n        if len(lst) <= 1:\n            return lst\n        pivot = lst[len(lst) // 2]\n        left = [x for x in lst if x < pivot]\n        middle = [x for x in lst if x == pivot]\n        right = [x for x in lst if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n    sorted_list = quicksort(arg1)\n    smallest_values = sorted_list[:arg2]\n    smallest_indexes = []\n    for value in smallest_values:\n        index = arg1.index(value)\n        smallest_indexes.append(index)\n    return smallest_indexes']",10000,1.1712078000418842,1.1915039020124822,1.217890900094062,N/A
p3_find_n_smallest_number,prompt_7,6,"['def funcImp(arg1, arg2):\n\n    def quicksort(lst):\n        if len(lst) <= 1:\n            return lst\n        pivot = lst[len(lst) // 2]\n        left = [x for x in lst if x < pivot]\n        middle = [x for x in lst if x == pivot]\n        right = [x for x in lst if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n    sorted_list = quicksort(arg1)\n    smallest_values = sorted_list[:arg2]\n    smallest_indexes = []\n    for value in smallest_values:\n        index = arg1.index(value)\n        smallest_indexes.append(index)\n    return smallest_indexes']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_7,7,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef kth_smallest(arr, k, low, high):\n    pivot_idx = partition(arr, low, high)\n    if pivot_idx == k - 1:\n        return arr[pivot_idx]\n    elif pivot_idx > k - 1:\n        return kth_smallest(arr, k, low, pivot_idx - 1)\n    else:\n        return kth_smallest(arr, k, pivot_idx + 1, high)\n\ndef funcImp(arg1, arg2):\n    kth_smallest_element = kth_smallest(arg1, arg2, 0, len(arg1) - 1)\n    result_list = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest_element:\n            result_list.append(i)\n    return result_list']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,7,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef kth_smallest(arr, k, low, high):\n    pivot_idx = partition(arr, low, high)\n    if pivot_idx == k - 1:\n        return arr[pivot_idx]\n    elif pivot_idx > k - 1:\n        return kth_smallest(arr, k, low, pivot_idx - 1)\n    else:\n        return kth_smallest(arr, k, pivot_idx + 1, high)\n\ndef funcImp(arg1, arg2):\n    kth_smallest_element = kth_smallest(arg1, arg2, 0, len(arg1) - 1)\n    result_list = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest_element:\n            result_list.append(i)\n    return result_list']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,7,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef kth_smallest(arr, k, low, high):\n    pivot_idx = partition(arr, low, high)\n    if pivot_idx == k - 1:\n        return arr[pivot_idx]\n    elif pivot_idx > k - 1:\n        return kth_smallest(arr, k, low, pivot_idx - 1)\n    else:\n        return kth_smallest(arr, k, pivot_idx + 1, high)\n\ndef funcImp(arg1, arg2):\n    kth_smallest_element = kth_smallest(arg1, arg2, 0, len(arg1) - 1)\n    result_list = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest_element:\n            result_list.append(i)\n    return result_list']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,8,"['def Quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low:high + 1]\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    pivot_index = i + 1\n    if pivot_index == k - 1:\n        return arr[low:pivot_index + 1]\n    elif pivot_index < k - 1:\n        return Quickselect(arr, pivot_index + 1, high, k)\n    else:\n        return Quickselect(arr, low, pivot_index - 1, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    k_smallest = Quickselect(arg1, 0, len(arg1) - 1, arg2)\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,8,"['def Quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low:high + 1]\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    pivot_index = i + 1\n    if pivot_index == k - 1:\n        return arr[low:pivot_index + 1]\n    elif pivot_index < k - 1:\n        return Quickselect(arr, pivot_index + 1, high, k)\n    else:\n        return Quickselect(arr, low, pivot_index - 1, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    k_smallest = Quickselect(arg1, 0, len(arg1) - 1, arg2)\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,8,"['def Quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low:high + 1]\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    pivot_index = i + 1\n    if pivot_index == k - 1:\n        return arr[low:pivot_index + 1]\n    elif pivot_index < k - 1:\n        return Quickselect(arr, pivot_index + 1, high, k)\n    else:\n        return Quickselect(arr, low, pivot_index - 1, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    k_smallest = Quickselect(arg1, 0, len(arg1) - 1, arg2)\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_7,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, -arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0]:\n            heapq.heappushpop(heap, -arg1[i])\n    indexes = [arg1.index(-i) for i in heap]\n    return indexes']",1000,0.0027644000947475433,0.00288839298998937,0.0065997999627143145,N/A
p3_find_n_smallest_number,prompt_7,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, -arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0]:\n            heapq.heappushpop(heap, -arg1[i])\n    indexes = [arg1.index(-i) for i in heap]\n    return indexes']",10000,0.030405700206756592,0.031262167012318966,0.03440860006958246,N/A
p3_find_n_smallest_number,prompt_7,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, -arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0]:\n            heapq.heappushpop(heap, -arg1[i])\n    indexes = [arg1.index(-i) for i in heap]\n    return indexes']",100000,0.3535249000415206,0.3600646409811452,0.38150679995305836,N/A
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arr, k):\n\n    def quickselect(start, end, k):\n        if start == end:\n            return start\n        pivot = arr[end]\n        left = start\n        right = end - 1\n        while left <= right:\n            while arr[left] < pivot and left <= right:\n                left += 1\n            while arr[right] >= pivot and left <= right:\n                right -= 1\n            if left <= right:\n                arr[left], arr[right] = (arr[right], arr[left])\n                left += 1\n                right -= 1\n        arr[left], arr[end] = (arr[end], arr[left])\n        if left == k:\n            return left\n        elif left < k:\n            return quickselect(left + 1, end, k)\n        else:\n            return quickselect(start, left - 1, k)\n    kth_pos = quickselect(0, len(arr) - 1, k - 1)\n    indexes = [i for i, x in enumerate(arr) if x <= arr[kth_pos]]\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arr, k):\n\n    def quickselect(start, end, k):\n        if start == end:\n            return start\n        pivot = arr[end]\n        left = start\n        right = end - 1\n        while left <= right:\n            while arr[left] < pivot and left <= right:\n                left += 1\n            while arr[right] >= pivot and left <= right:\n                right -= 1\n            if left <= right:\n                arr[left], arr[right] = (arr[right], arr[left])\n                left += 1\n                right -= 1\n        arr[left], arr[end] = (arr[end], arr[left])\n        if left == k:\n            return left\n        elif left < k:\n            return quickselect(left + 1, end, k)\n        else:\n            return quickselect(start, left - 1, k)\n    kth_pos = quickselect(0, len(arr) - 1, k - 1)\n    indexes = [i for i, x in enumerate(arr) if x <= arr[kth_pos]]\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arr, k):\n\n    def quickselect(start, end, k):\n        if start == end:\n            return start\n        pivot = arr[end]\n        left = start\n        right = end - 1\n        while left <= right:\n            while arr[left] < pivot and left <= right:\n                left += 1\n            while arr[right] >= pivot and left <= right:\n                right -= 1\n            if left <= right:\n                arr[left], arr[right] = (arr[right], arr[left])\n                left += 1\n                right -= 1\n        arr[left], arr[end] = (arr[end], arr[left])\n        if left == k:\n            return left\n        elif left < k:\n            return quickselect(left + 1, end, k)\n        else:\n            return quickselect(start, left - 1, k)\n    kth_pos = quickselect(0, len(arr) - 1, k - 1)\n    indexes = [i for i, x in enumerate(arr) if x <= arr[kth_pos]]\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_items = sorted_list[:arg2]\n    indices = [arg1.index(item) for item in k_items]\n    return indices']",1000,0.0032828999683260918,0.0035177850001491605,0.004024999914690852,N/A
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_items = sorted_list[:arg2]\n    indices = [arg1.index(item) for item in k_items]\n    return indices']",10000,0.08528190013021231,0.08681893099565059,0.09331850009039044,N/A
p3_find_n_smallest_number,prompt_7,11,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_items = sorted_list[:arg2]\n    indices = [arg1.index(item) for item in k_items]\n    return indices']",100000,1.2021562000736594,1.2298299990035593,1.2702492999378592,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n    n = len(arg1)\n    k = arg2\n    start = 0\n    end = n - 1\n    while start <= end:\n        pivot_index = partition(arg1, start, end)\n        if pivot_index == k - 1:\n            return [(arg1[i], i) for i in range(k)]\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1']",1000,2.029581699986011,2.15752327501541,2.212424200028181,N/A
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n    n = len(arg1)\n    k = arg2\n    start = 0\n    end = n - 1\n    while start <= end:\n        pivot_index = partition(arg1, start, end)\n        if pivot_index == k - 1:\n            return [(arg1[i], i) for i in range(k)]\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_7,12,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n    n = len(arg1)\n    k = arg2\n    start = 0\n    end = n - 1\n    while start <= end:\n        pivot_index = partition(arg1, start, end)\n        if pivot_index == k - 1:\n            return [(arg1[i], i) for i in range(k)]\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_7,13,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid Input'\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_values = sorted(dict_nums.values())[:arg2]\n    result_indexes = []\n    for index, num in dict_nums.items():\n        if num in sorted_values:\n            result_indexes.append(index)\n    return result_indexes""]",1000,0.008582900045439601,0.00943471698788926,0.013390100095421076,N/A
p3_find_n_smallest_number,prompt_7,13,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid Input'\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_values = sorted(dict_nums.values())[:arg2]\n    result_indexes = []\n    for index, num in dict_nums.items():\n        if num in sorted_values:\n            result_indexes.append(index)\n    return result_indexes""]",10000,0.136328199878335,0.1402448309957981,0.15024669980630279,N/A
p3_find_n_smallest_number,prompt_7,13,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid Input'\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_values = sorted(dict_nums.values())[:arg2]\n    result_indexes = []\n    for index, num in dict_nums.items():\n        if num in sorted_values:\n            result_indexes.append(index)\n    return result_indexes""]",100000,1.9251602001022547,1.9790731299761684,2.0896902999375015,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, k):\n    arr_with_indices = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_arr = sorted(arr_with_indices, key=lambda x: x[0])\n    return [sorted_arr[i][1] for i in range(k)]']",1000,0.009391600033268332,0.009981958998832852,0.01187080005183816,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, k):\n    arr_with_indices = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_arr = sorted(arr_with_indices, key=lambda x: x[0])\n    return [sorted_arr[i][1] for i in range(k)]']",10000,0.15089679998345673,0.15935373799409716,0.17545900004915893,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, k):\n    arr_with_indices = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_arr = sorted(arr_with_indices, key=lambda x: x[0])\n    return [sorted_arr[i][1] for i in range(k)]']",100000,2.2781083998270333,2.345847798015457,2.4156108999159187,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivotIndex):\n        pivotValue = arr[pivotIndex]\n        arr[pivotIndex], arr[right] = (arr[right], arr[pivotIndex])\n        storeIndex = left\n        for i in range(left, right):\n            if arr[i] <= pivotValue:\n                arr[i], arr[storeIndex] = (arr[storeIndex], arr[i])\n                storeIndex += 1\n        arr[storeIndex], arr[right] = (arr[right], arr[storeIndex])\n        return storeIndex\n    left, right = (0, len(arg1) - 1)\n    while left <= right:\n        pivotIndex = partition(arg1, left, right, left)\n        if pivotIndex == arg2:\n            return sorted(range(arg2), key=lambda i: arg1[i])\n        elif pivotIndex < arg2:\n            left = pivotIndex + 1\n        else:\n            right = pivotIndex - 1\n    return sorted(range(arg2), key=lambda i: arg1[i])']",1000,0.009350700071081519,0.009852575999684633,0.011379099916666746,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivotIndex):\n        pivotValue = arr[pivotIndex]\n        arr[pivotIndex], arr[right] = (arr[right], arr[pivotIndex])\n        storeIndex = left\n        for i in range(left, right):\n            if arr[i] <= pivotValue:\n                arr[i], arr[storeIndex] = (arr[storeIndex], arr[i])\n                storeIndex += 1\n        arr[storeIndex], arr[right] = (arr[right], arr[storeIndex])\n        return storeIndex\n    left, right = (0, len(arg1) - 1)\n    while left <= right:\n        pivotIndex = partition(arg1, left, right, left)\n        if pivotIndex == arg2:\n            return sorted(range(arg2), key=lambda i: arg1[i])\n        elif pivotIndex < arg2:\n            left = pivotIndex + 1\n        else:\n            right = pivotIndex - 1\n    return sorted(range(arg2), key=lambda i: arg1[i])']",10000,0.09807649999856949,0.10128812099341303,0.12121369992382824,N/A
p3_find_n_smallest_number,prompt_7,15,"['def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivotIndex):\n        pivotValue = arr[pivotIndex]\n        arr[pivotIndex], arr[right] = (arr[right], arr[pivotIndex])\n        storeIndex = left\n        for i in range(left, right):\n            if arr[i] <= pivotValue:\n                arr[i], arr[storeIndex] = (arr[storeIndex], arr[i])\n                storeIndex += 1\n        arr[storeIndex], arr[right] = (arr[right], arr[storeIndex])\n        return storeIndex\n    left, right = (0, len(arg1) - 1)\n    while left <= right:\n        pivotIndex = partition(arg1, left, right, left)\n        if pivotIndex == arg2:\n            return sorted(range(arg2), key=lambda i: arg1[i])\n        elif pivotIndex < arg2:\n            left = pivotIndex + 1\n        else:\n            right = pivotIndex - 1\n    return sorted(range(arg2), key=lambda i: arg1[i])']",100000,1.0148369001690298,1.0338662340096199,1.0662529999390244,N/A
p3_find_n_smallest_number,prompt_7,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    heap = []\n    k = arg2\n    for i in range(k):\n        heapq.heappush(heap, (arg1[i], i))\n    for j in range(k, len(arg1)):\n        if arg1[j] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[j], j))\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",1000,0.002234000014141202,0.0023753260145895185,0.002534500090405345,N/A
p3_find_n_smallest_number,prompt_7,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    heap = []\n    k = arg2\n    for i in range(k):\n        heapq.heappush(heap, (arg1[i], i))\n    for j in range(k, len(arg1)):\n        if arg1[j] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[j], j))\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",10000,0.023087899899110198,0.02383258398389444,0.0272601000033319,N/A
p3_find_n_smallest_number,prompt_7,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    result = []\n    heap = []\n    k = arg2\n    for i in range(k):\n        heapq.heappush(heap, (arg1[i], i))\n    for j in range(k, len(arg1)):\n        if arg1[j] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[j], j))\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",100000,0.22823190013878047,0.235127721009776,0.2460549999959767,N/A
p3_find_n_smallest_number,prompt_7,17,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise TypeError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 < 1 or arg2 > len(arg1):\n        raise ValueError('arg2 must be a positive integer less than or equal to the length of arg1.')\n\n    def partition(lst, start, end):\n        pivot = lst[start]\n        left = start + 1\n        right = end\n        while left <= right:\n            if lst[left] < pivot and lst[right] > pivot:\n                lst[left], lst[right] = (lst[right], lst[left])\n            if lst[left] >= pivot:\n                left += 1\n            if lst[right] <= pivot:\n                right -= 1\n        lst[start], lst[right] = (lst[right], lst[start])\n        return right\n\n    def find_k_smallest(lst, k, start=0, end=None):\n        if end is None:\n            end = len(lst) - 1\n        if start == end:\n            return [start]\n        pivot_index = partition(lst, start, end)\n        num_smaller = pivot_index - start + 1\n        if k <= num_smaller:\n            return find_k_smallest(lst, k, start, pivot_index)\n        else:\n            return [pivot_index] + find_k_smallest(lst, k - num_smaller, pivot_index + 1, end)\n    indexes = find_k_smallest(arg1, arg2)\n    return indexes""]",1000,0.024676400003954768,0.02589202899252996,0.031939700013026595,N/A
p3_find_n_smallest_number,prompt_7,17,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise TypeError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 < 1 or arg2 > len(arg1):\n        raise ValueError('arg2 must be a positive integer less than or equal to the length of arg1.')\n\n    def partition(lst, start, end):\n        pivot = lst[start]\n        left = start + 1\n        right = end\n        while left <= right:\n            if lst[left] < pivot and lst[right] > pivot:\n                lst[left], lst[right] = (lst[right], lst[left])\n            if lst[left] >= pivot:\n                left += 1\n            if lst[right] <= pivot:\n                right -= 1\n        lst[start], lst[right] = (lst[right], lst[start])\n        return right\n\n    def find_k_smallest(lst, k, start=0, end=None):\n        if end is None:\n            end = len(lst) - 1\n        if start == end:\n            return [start]\n        pivot_index = partition(lst, start, end)\n        num_smaller = pivot_index - start + 1\n        if k <= num_smaller:\n            return find_k_smallest(lst, k, start, pivot_index)\n        else:\n            return [pivot_index] + find_k_smallest(lst, k - num_smaller, pivot_index + 1, end)\n    indexes = find_k_smallest(arg1, arg2)\n    return indexes""]",10000,0.25702370004728436,0.2644277299917303,0.27756069996394217,N/A
p3_find_n_smallest_number,prompt_7,17,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise TypeError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 < 1 or arg2 > len(arg1):\n        raise ValueError('arg2 must be a positive integer less than or equal to the length of arg1.')\n\n    def partition(lst, start, end):\n        pivot = lst[start]\n        left = start + 1\n        right = end\n        while left <= right:\n            if lst[left] < pivot and lst[right] > pivot:\n                lst[left], lst[right] = (lst[right], lst[left])\n            if lst[left] >= pivot:\n                left += 1\n            if lst[right] <= pivot:\n                right -= 1\n        lst[start], lst[right] = (lst[right], lst[start])\n        return right\n\n    def find_k_smallest(lst, k, start=0, end=None):\n        if end is None:\n            end = len(lst) - 1\n        if start == end:\n            return [start]\n        pivot_index = partition(lst, start, end)\n        num_smaller = pivot_index - start + 1\n        if k <= num_smaller:\n            return find_k_smallest(lst, k, start, pivot_index)\n        else:\n            return [pivot_index] + find_k_smallest(lst, k - num_smaller, pivot_index + 1, end)\n    indexes = find_k_smallest(arg1, arg2)\n    return indexes""]",100000,2.682934300042689,2.7330234089889562,2.795706700067967,N/A
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_nums = sorted_list[:arg2]\n    index_list = []\n    for i, num in enumerate(arg1):\n        if num in smallest_nums:\n            index_list.append(i)\n    return index_list']",1000,0.006194500019773841,0.006482822999823838,0.007743899943307042,N/A
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_nums = sorted_list[:arg2]\n    index_list = []\n    for i, num in enumerate(arg1):\n        if num in smallest_nums:\n            index_list.append(i)\n    return index_list']",10000,0.11043299990706146,0.11272428900934756,0.11847859993577003,N/A
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_nums = sorted_list[:arg2]\n    index_list = []\n    for i, num in enumerate(arg1):\n        if num in smallest_nums:\n            index_list.append(i)\n    return index_list']",100000,1.4146018999163061,1.4441145029990003,1.4737361001316458,N/A
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indices = []\n    for i, num in enumerate(sorted_list[:arg2]):\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",1000,0.0032803998328745365,0.003646141006611288,0.0055864001624286175,N/A
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indices = []\n    for i, num in enumerate(sorted_list[:arg2]):\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",10000,0.08530050003901124,0.08857358800247311,0.1063577001914382,N/A
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indices = []\n    for i, num in enumerate(sorted_list[:arg2]):\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",100000,1.2117985000368208,1.2437106990139,1.2756165000610054,N/A
p3_find_n_smallest_number,prompt_7,20,"['from random import randint\n\ndef k_smallest_indices(arr, k):\n\n    def partition(arr, left, right, k_smallest):\n        if left == right:\n            return [i for i in range(left, left + k_smallest)]\n        pivot_index = randint(left, right)\n        pivot = arr[pivot_index]\n        arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n        low = left\n        for i in range(left, right):\n            if arr[i] < pivot:\n                arr[i], arr[low] = (arr[low], arr[i])\n                low += 1\n        arr[right], arr[low] = (arr[low], arr[right])\n        if k_smallest <= low - left:\n            return partition(arr, left, low - 1, k_smallest)\n        else:\n            return partition(arr, low, right, k_smallest - (low - left))\n    indices = partition(arr, 0, len(arr) - 1, k)\n    return indices']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_7,20,"['from random import randint\n\ndef k_smallest_indices(arr, k):\n\n    def partition(arr, left, right, k_smallest):\n        if left == right:\n            return [i for i in range(left, left + k_smallest)]\n        pivot_index = randint(left, right)\n        pivot = arr[pivot_index]\n        arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n        low = left\n        for i in range(left, right):\n            if arr[i] < pivot:\n                arr[i], arr[low] = (arr[low], arr[i])\n                low += 1\n        arr[right], arr[low] = (arr[low], arr[right])\n        if k_smallest <= low - left:\n            return partition(arr, left, low - 1, k_smallest)\n        else:\n            return partition(arr, low, right, k_smallest - (low - left))\n    indices = partition(arr, 0, len(arr) - 1, k)\n    return indices']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_7,20,"['from random import randint\n\ndef k_smallest_indices(arr, k):\n\n    def partition(arr, left, right, k_smallest):\n        if left == right:\n            return [i for i in range(left, left + k_smallest)]\n        pivot_index = randint(left, right)\n        pivot = arr[pivot_index]\n        arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n        low = left\n        for i in range(left, right):\n            if arr[i] < pivot:\n                arr[i], arr[low] = (arr[low], arr[i])\n                low += 1\n        arr[right], arr[low] = (arr[low], arr[right])\n        if k_smallest <= low - left:\n            return partition(arr, left, low - 1, k_smallest)\n        else:\n            return partition(arr, low, right, k_smallest - (low - left))\n    indices = partition(arr, 0, len(arr) - 1, k)\n    return indices']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arr, k):\n    if k > len(arr) or not arr:\n        return []\n    kth_smallest = sorted(arr)[k - 1]\n    smallest_indexes = []\n    for i in range(len(arr)):\n        if arr[i] <= kth_smallest:\n            smallest_indexes.append(i)\n        if len(smallest_indexes) == k:\n            break\n    return smallest_indexes']",1000,0.0038984999991953373,0.004137732980307191,0.004949799971655011,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arr, k):\n    if k > len(arr) or not arr:\n        return []\n    kth_smallest = sorted(arr)[k - 1]\n    smallest_indexes = []\n    for i in range(len(arr)):\n        if arr[i] <= kth_smallest:\n            smallest_indexes.append(i)\n        if len(smallest_indexes) == k:\n            break\n    return smallest_indexes']",10000,0.0949088002089411,0.0984029250103049,0.10662150010466576,N/A
p3_find_n_smallest_number,prompt_7,1,"['def funcImp(arr, k):\n    if k > len(arr) or not arr:\n        return []\n    kth_smallest = sorted(arr)[k - 1]\n    smallest_indexes = []\n    for i in range(len(arr)):\n        if arr[i] <= kth_smallest:\n            smallest_indexes.append(i)\n        if len(smallest_indexes) == k:\n            break\n    return smallest_indexes']",100000,1.3473330999258906,1.3762297699972987,1.4271220001392066,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    smallest_indices = []\n    for i in range(arg2):\n        min_value = min(arg1)\n        min_index = arg1.index(min_value)\n        smallest_indices.append(min_index)\n        arg1.remove(min_value)\n    return smallest_indices']",1000,8.399831131100655e-06,5.421800538897514e-05,0.003347499994561076,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    smallest_indices = []\n    for i in range(arg2):\n        min_value = min(arg1)\n        min_index = arg1.index(min_value)\n        smallest_indices.append(min_index)\n        arg1.remove(min_value)\n    return smallest_indices']",10000,7.799826562404633e-06,0.004785809018649161,0.04479469987563789,N/A
p3_find_n_smallest_number,prompt_7,2,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    smallest_indices = []\n    for i in range(arg2):\n        min_value = min(arg1)\n        min_index = arg1.index(min_value)\n        smallest_indices.append(min_index)\n        arg1.remove(min_value)\n    return smallest_indices']",100000,0.2690286000724882,0.3864101959997788,0.5064207001123577,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1) or len(arg1) == 0:\n        return []\n\n    def quickselect(array, k):\n        if len(array) == 1:\n            return array[0]\n        pivot = array[0]\n        lows = [x for x in array if x < pivot]\n        highs = [x for x in array if x > pivot]\n        pivots = [x for x in array if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",1000,0.0074112999718636274,0.007930532994214446,0.011602399870753288,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1) or len(arg1) == 0:\n        return []\n\n    def quickselect(array, k):\n        if len(array) == 1:\n            return array[0]\n        pivot = array[0]\n        lows = [x for x in array if x < pivot]\n        highs = [x for x in array if x > pivot]\n        pivots = [x for x in array if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",10000,0.09446440008468926,0.09720051099313423,0.10262809996493161,N/A
p3_find_n_smallest_number,prompt_7,3,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1) or len(arg1) == 0:\n        return []\n\n    def quickselect(array, k):\n        if len(array) == 1:\n            return array[0]\n        pivot = array[0]\n        lows = [x for x in array if x < pivot]\n        highs = [x for x in array if x > pivot]\n        pivots = [x for x in array if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",100000,1.1097648001741618,1.1330714410101064,1.1962860999628901,N/A
p3_find_n_smallest_number,prompt_7,4,"['def KSmallestIndexes(arr, k):\n    index_dict = {}\n    value_dict = {}\n    for i, val in enumerate(arr):\n        index_dict[val] = i\n        value_dict[i] = val\n    left = 0\n    right = len(arr) - 1\n    while True:\n        pivot_idx = _partition(value_dict, left, right)\n        if pivot_idx == k:\n            return list(index_dict.keys())[:k]\n        elif pivot_idx < k:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n\ndef _partition(value_dict, left, right):\n    pivot_idx = (left + right) // 2\n    pivot_elem = value_dict[pivot_idx]\n    value_dict[pivot_idx], value_dict[right] = (value_dict[right], value_dict[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if value_dict[i] <= pivot_elem:\n            value_dict[i], value_dict[store_idx] = (value_dict[store_idx], value_dict[i])\n            store_idx += 1\n    value_dict[right], value_dict[store_idx] = (value_dict[store_idx], value_dict[right])\n    return store_idx']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_7,4,"['def KSmallestIndexes(arr, k):\n    index_dict = {}\n    value_dict = {}\n    for i, val in enumerate(arr):\n        index_dict[val] = i\n        value_dict[i] = val\n    left = 0\n    right = len(arr) - 1\n    while True:\n        pivot_idx = _partition(value_dict, left, right)\n        if pivot_idx == k:\n            return list(index_dict.keys())[:k]\n        elif pivot_idx < k:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n\ndef _partition(value_dict, left, right):\n    pivot_idx = (left + right) // 2\n    pivot_elem = value_dict[pivot_idx]\n    value_dict[pivot_idx], value_dict[right] = (value_dict[right], value_dict[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if value_dict[i] <= pivot_elem:\n            value_dict[i], value_dict[store_idx] = (value_dict[store_idx], value_dict[i])\n            store_idx += 1\n    value_dict[right], value_dict[store_idx] = (value_dict[store_idx], value_dict[right])\n    return store_idx']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_7,4,"['def KSmallestIndexes(arr, k):\n    index_dict = {}\n    value_dict = {}\n    for i, val in enumerate(arr):\n        index_dict[val] = i\n        value_dict[i] = val\n    left = 0\n    right = len(arr) - 1\n    while True:\n        pivot_idx = _partition(value_dict, left, right)\n        if pivot_idx == k:\n            return list(index_dict.keys())[:k]\n        elif pivot_idx < k:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n\ndef _partition(value_dict, left, right):\n    pivot_idx = (left + right) // 2\n    pivot_elem = value_dict[pivot_idx]\n    value_dict[pivot_idx], value_dict[right] = (value_dict[right], value_dict[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if value_dict[i] <= pivot_elem:\n            value_dict[i], value_dict[store_idx] = (value_dict[store_idx], value_dict[i])\n            store_idx += 1\n    value_dict[right], value_dict[store_idx] = (value_dict[store_idx], value_dict[right])\n    return store_idx']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    smallest_set = set(arg1[:arg2])\n    for i in arg1[arg2:]:\n        if i < max(smallest_set):\n            smallest_set.remove(max(smallest_set))\n            smallest_set.add(i)\n    result_list = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_set:\n            result_list.append(i)\n    return result_list']",1000,0.010862000053748488,0.011308987003285437,0.014019900001585484,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    smallest_set = set(arg1[:arg2])\n    for i in arg1[arg2:]:\n        if i < max(smallest_set):\n            smallest_set.remove(max(smallest_set))\n            smallest_set.add(i)\n    result_list = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_set:\n            result_list.append(i)\n    return result_list']",10000,0.11268200003542006,0.11595937199424952,0.12044179998338223,N/A
p3_find_n_smallest_number,prompt_7,5,"['def funcImp(arg1, arg2):\n    smallest_set = set(arg1[:arg2])\n    for i in arg1[arg2:]:\n        if i < max(smallest_set):\n            smallest_set.remove(max(smallest_set))\n            smallest_set.add(i)\n    result_list = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_set:\n            result_list.append(i)\n    return result_list']",100000,1.1103627998381853,1.125460467005614,1.1842261999845505,N/A
p3_find_n_smallest_number,prompt_7,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-num, i))\n    return [index for _, index in min_heap]']",1000,0.003324399935081601,0.0035344960005022586,0.00419330014847219,N/A
p3_find_n_smallest_number,prompt_7,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-num, i))\n    return [index for _, index in min_heap]']",10000,0.032541200052946806,0.03369330199435353,0.04355189995840192,N/A
p3_find_n_smallest_number,prompt_7,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-num, i))\n    return [index for _, index in min_heap]']",100000,0.3292771999258548,0.3372593189938925,0.3535070000216365,N/A
p3_find_n_smallest_number,prompt_7,7,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    elif arg2 <= 0:\n        return []\n    else:\n        min_heap = []\n        for i in range(arg2):\n            heapq.heappush(min_heap, (-arg1[i], i))\n        for i in range(arg2, len(arg1)):\n            if -min_heap[0][0] > arg1[i]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (-arg1[i], i))\n        return [i[1] for i in min_heap]']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,7,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    elif arg2 <= 0:\n        return []\n    else:\n        min_heap = []\n        for i in range(arg2):\n            heapq.heappush(min_heap, (-arg1[i], i))\n        for i in range(arg2, len(arg1)):\n            if -min_heap[0][0] > arg1[i]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (-arg1[i], i))\n        return [i[1] for i in min_heap]']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,7,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    elif arg2 <= 0:\n        return []\n    else:\n        min_heap = []\n        for i in range(arg2):\n            heapq.heappush(min_heap, (-arg1[i], i))\n        for i in range(arg2, len(arg1)):\n            if -min_heap[0][0] > arg1[i]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (-arg1[i], i))\n        return [i[1] for i in min_heap]']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arr, k):\n    index_dict = {}\n    heap = []\n    for i, val in enumerate(arr):\n        if len(heap) < k:\n            heapq.heappush(heap, val)\n            index_dict[val] = i\n        elif val < heap[-1]:\n            key = heap[-1]\n            heapq.heapreplace(heap, val)\n            del index_dict[key]\n            index_dict[val] = i\n    res = [index_dict[val] for val in heap]\n    return res']",1000,0,0,0,	 exception: 624
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arr, k):\n    index_dict = {}\n    heap = []\n    for i, val in enumerate(arr):\n        if len(heap) < k:\n            heapq.heappush(heap, val)\n            index_dict[val] = i\n        elif val < heap[-1]:\n            key = heap[-1]\n            heapq.heapreplace(heap, val)\n            del index_dict[key]\n            index_dict[val] = i\n    res = [index_dict[val] for val in heap]\n    return res']",10000,0,0,0,	 exception: 624
p3_find_n_smallest_number,prompt_7,8,"['import heapq\n\ndef funcImp(arr, k):\n    index_dict = {}\n    heap = []\n    for i, val in enumerate(arr):\n        if len(heap) < k:\n            heapq.heappush(heap, val)\n            index_dict[val] = i\n        elif val < heap[-1]:\n            key = heap[-1]\n            heapq.heapreplace(heap, val)\n            del index_dict[key]\n            index_dict[val] = i\n    res = [index_dict[val] for val in heap]\n    return res']",100000,0,0,0,	 exception: 624
p3_find_n_smallest_number,prompt_7,9,"['import heapq\n\ndef funcImp(arr, k):\n    if k == 0:\n        return []\n    heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arr[i], i))\n    result = sorted([(idx, -val) for val, idx in heap])\n    return result']",1000,0.0031655000057071447,0.003290842017158866,0.00359890004619956,N/A
p3_find_n_smallest_number,prompt_7,9,"['import heapq\n\ndef funcImp(arr, k):\n    if k == 0:\n        return []\n    heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arr[i], i))\n    result = sorted([(idx, -val) for val, idx in heap])\n    return result']",10000,0.02846910012885928,0.03004000100772828,0.03581500006839633,N/A
p3_find_n_smallest_number,prompt_7,9,"['import heapq\n\ndef funcImp(arr, k):\n    if k == 0:\n        return []\n    heap = [(-arr[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arr[i], i))\n    result = sorted([(idx, -val) for val, idx in heap])\n    return result']",100000,0.2882130001671612,0.298037331008818,0.309122399892658,N/A
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    smallest_dict = {}\n    for i in range(arg2):\n        smallest_dict[i] = arg1[i]\n    smallest_dict = {k: v for k, v in sorted(smallest_dict.items(), key=lambda item: item[1])}\n    for i in range(arg2, len(arg1)):\n        small_ind = list(smallest_dict.keys())[0]\n        if arg1[i] < smallest_dict[small_ind]:\n            del smallest_dict[small_ind]\n            smallest_dict[i] = arg1[i]\n            smallest_dict = {k: v for k, v in sorted(smallest_dict.items(), key=lambda item: item[1])}\n        else:\n            continue\n    return list(smallest_dict.keys())']",1000,0.008887900039553642,0.009321704008616507,0.01034589996561408,N/A
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    smallest_dict = {}\n    for i in range(arg2):\n        smallest_dict[i] = arg1[i]\n    smallest_dict = {k: v for k, v in sorted(smallest_dict.items(), key=lambda item: item[1])}\n    for i in range(arg2, len(arg1)):\n        small_ind = list(smallest_dict.keys())[0]\n        if arg1[i] < smallest_dict[small_ind]:\n            del smallest_dict[small_ind]\n            smallest_dict[i] = arg1[i]\n            smallest_dict = {k: v for k, v in sorted(smallest_dict.items(), key=lambda item: item[1])}\n        else:\n            continue\n    return list(smallest_dict.keys())']",10000,0.08670230000279844,0.09074074399191887,0.1016202000901103,N/A
p3_find_n_smallest_number,prompt_7,10,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    smallest_dict = {}\n    for i in range(arg2):\n        smallest_dict[i] = arg1[i]\n    smallest_dict = {k: v for k, v in sorted(smallest_dict.items(), key=lambda item: item[1])}\n    for i in range(arg2, len(arg1)):\n        small_ind = list(smallest_dict.keys())[0]\n        if arg1[i] < smallest_dict[small_ind]:\n            del smallest_dict[small_ind]\n            smallest_dict[i] = arg1[i]\n            smallest_dict = {k: v for k, v in sorted(smallest_dict.items(), key=lambda item: item[1])}\n        else:\n            continue\n    return list(smallest_dict.keys())']",100000,0.8909333001356572,0.9182305929763243,0.9612320999149233,N/A
p3_find_n_smallest_number,prompt_7,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any code in your previous message. Can you please provide the code you\'re referring to?"", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_7 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_7,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any code in your previous message. Can you please provide the code you\'re referring to?"", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_7 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_7,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot see any code in your previous message. Can you please provide the code you\'re referring to?"", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_7 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_7,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    smallest = [float('inf')] * k\n    idx_smallest = [-1] * k\n    for idx, num in enumerate(arg1):\n        if num < max(smallest):\n            max_idx = idx_smallest[smallest.index(max(smallest))]\n            smallest[smallest.index(max(smallest))] = num\n            idx_smallest[smallest.index(max(smallest))] = idx\n    return idx_smallest""]",1000,0.008723200066015124,0.009086792995221913,0.00994889996945858,N/A
p3_find_n_smallest_number,prompt_7,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    smallest = [float('inf')] * k\n    idx_smallest = [-1] * k\n    for idx, num in enumerate(arg1):\n        if num < max(smallest):\n            max_idx = idx_smallest[smallest.index(max(smallest))]\n            smallest[smallest.index(max(smallest))] = num\n            idx_smallest[smallest.index(max(smallest))] = idx\n    return idx_smallest""]",10000,0.08116599987260997,0.0840932520153001,0.09382589999586344,N/A
p3_find_n_smallest_number,prompt_7,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    smallest = [float('inf')] * k\n    idx_smallest = [-1] * k\n    for idx, num in enumerate(arg1):\n        if num < max(smallest):\n            max_idx = idx_smallest[smallest.index(max(smallest))]\n            smallest[smallest.index(max(smallest))] = num\n            idx_smallest[smallest.index(max(smallest))] = idx\n    return idx_smallest""]",100000,0.8059825000818819,0.8210305350203998,0.8427643000613898,N/A
p3_find_n_smallest_number,prompt_7,13,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = []\n    for i in range(len(arr)):\n        heapq.heappush(heap, (-arr[i], i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    indexes = [heapq.heappop(heap)[1] for i in range(k)]\n    return indexes']",1000,0.012072699842974544,0.012660847993101925,0.017147500067949295,N/A
p3_find_n_smallest_number,prompt_7,13,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = []\n    for i in range(len(arr)):\n        heapq.heappush(heap, (-arr[i], i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    indexes = [heapq.heappop(heap)[1] for i in range(k)]\n    return indexes']",10000,0.12017109990119934,0.1243837019870989,0.13732720003463328,N/A
p3_find_n_smallest_number,prompt_7,13,"['import heapq\n\ndef funcImp(arr, k):\n    if len(arr) < k:\n        return []\n    heap = []\n    for i in range(len(arr)):\n        heapq.heappush(heap, (-arr[i], i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    indexes = [heapq.heappop(heap)[1] for i in range(k)]\n    return indexes']",100000,1.2431149000767618,1.2611488479981199,1.3004864999093115,N/A
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, v in enumerate(arg1):\n        index_dict[v] = i\n    k_smallest = list(heapq.nsmallest(arg2, arg1))\n    result = []\n    for v in k_smallest:\n        result.append(index_dict[v])\n    return result']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, v in enumerate(arg1):\n        index_dict[v] = i\n    k_smallest = list(heapq.nsmallest(arg2, arg1))\n    result = []\n    for v in k_smallest:\n        result.append(index_dict[v])\n    return result']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,14,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, v in enumerate(arg1):\n        index_dict[v] = i\n    k_smallest = list(heapq.nsmallest(arg2, arg1))\n    result = []\n    for v in k_smallest:\n        result.append(index_dict[v])\n    return result']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_7,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [index for _, index in heap]']",1000,0.01161859999410808,0.012148582986555993,0.014831699896603823,N/A
p3_find_n_smallest_number,prompt_7,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [index for _, index in heap]']",10000,0.116541099967435,0.12096716800006106,0.15471799997612834,N/A
p3_find_n_smallest_number,prompt_7,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [index for _, index in heap]']",100000,1.1899315000046045,1.211922935997136,1.2469758000224829,N/A
p3_find_n_smallest_number,prompt_7,16,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the array size'\n    heap = []\n    for i, val in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-val, i))\n        elif val < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-val, i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]""]",1000,0.003548499895259738,0.003742359010502696,0.003925900207832456,N/A
p3_find_n_smallest_number,prompt_7,16,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the array size'\n    heap = []\n    for i, val in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-val, i))\n        elif val < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-val, i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]""]",10000,0.03368710004724562,0.0354741929913871,0.04374500014819205,N/A
p3_find_n_smallest_number,prompt_7,16,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the array size'\n    heap = []\n    for i, val in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-val, i))\n        elif val < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-val, i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]""]",100000,0.34584340010769665,0.3521551250084303,0.3669746001251042,N/A
p3_find_n_smallest_number,prompt_7,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    hash_table = {}\n    heap = []\n    for i, num in enumerate(arg1):\n        if num in hash_table:\n            hash_table[num].append(i)\n        else:\n            hash_table[num] = [i]\n        if len(heap) < arg2:\n            heapq.heappush(heap, -num)\n        elif num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    result = []\n    for num in heapq.nlargest(arg2, heap):\n        indexes = hash_table[-num]\n        result += indexes\n    return result[:arg2]']",1000,0.007763800211250782,0.008169303995091469,0.00869849999435246,N/A
p3_find_n_smallest_number,prompt_7,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    hash_table = {}\n    heap = []\n    for i, num in enumerate(arg1):\n        if num in hash_table:\n            hash_table[num].append(i)\n        else:\n            hash_table[num] = [i]\n        if len(heap) < arg2:\n            heapq.heappush(heap, -num)\n        elif num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    result = []\n    for num in heapq.nlargest(arg2, heap):\n        indexes = hash_table[-num]\n        result += indexes\n    return result[:arg2]']",10000,0.08323119999840856,0.08602813001023606,0.09260899992659688,N/A
p3_find_n_smallest_number,prompt_7,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    hash_table = {}\n    heap = []\n    for i, num in enumerate(arg1):\n        if num in hash_table:\n            hash_table[num].append(i)\n        else:\n            hash_table[num] = [i]\n        if len(heap) < arg2:\n            heapq.heappush(heap, -num)\n        elif num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    result = []\n    for num in heapq.nlargest(arg2, heap):\n        indexes = hash_table[-num]\n        result += indexes\n    return result[:arg2]']",100000,1.315989499911666,1.353174316000659,1.407581300009042,N/A
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    kth_smallest = select_kth_smallest(arg1, arg2)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indices.append(i)\n    return indices']",1000,0,0,0,	 exception: name 'select_kth_smallest' is not defined
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    kth_smallest = select_kth_smallest(arg1, arg2)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indices.append(i)\n    return indices']",10000,0,0,0,	 exception: name 'select_kth_smallest' is not defined
p3_find_n_smallest_number,prompt_7,18,"['def funcImp(arg1, arg2):\n    kth_smallest = select_kth_smallest(arg1, arg2)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indices.append(i)\n    return indices']",100000,0,0,0,	 exception: name 'select_kth_smallest' is not defined
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    if not arg1 or len(arg1) < arg2:\n        return []\n    heap = []\n    for i in range(arg2):\n        heap.append((arg1[i], i))\n    import heapq\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    return [i for _, i in heap]']",1000,0.0022089998237788677,0.00236731699667871,0.0029133998323231936,N/A
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    if not arg1 or len(arg1) < arg2:\n        return []\n    heap = []\n    for i in range(arg2):\n        heap.append((arg1[i], i))\n    import heapq\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    return [i for _, i in heap]']",10000,0.02221069997176528,0.023383336998522283,0.03013999992981553,N/A
p3_find_n_smallest_number,prompt_7,19,"['def funcImp(arg1, arg2):\n    if not arg1 or len(arg1) < arg2:\n        return []\n    heap = []\n    for i in range(arg2):\n        heap.append((arg1[i], i))\n    import heapq\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    return [i for _, i in heap]']",100000,0.22826569993048906,0.23357099500019105,0.2455533999018371,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if k >= n:\n        return sorted(range(n))\n    smallest = {}\n    for i, num in enumerate(arg1):\n        if i < k:\n            smallest[i] = num\n        else:\n            largest = max(smallest, key=smallest.get)\n            if num < smallest[largest]:\n                del smallest[largest]\n                smallest[i] = num\n    return sorted(smallest.keys())']",1000,0.020763699896633625,0.02151076200651005,0.02606020006351173,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if k >= n:\n        return sorted(range(n))\n    smallest = {}\n    for i, num in enumerate(arg1):\n        if i < k:\n            smallest[i] = num\n        else:\n            largest = max(smallest, key=smallest.get)\n            if num < smallest[largest]:\n                del smallest[largest]\n                smallest[i] = num\n    return sorted(smallest.keys())']",10000,0.21180530008859932,0.21567401400068775,0.22804900002665818,N/A
p3_find_n_smallest_number,prompt_7,20,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if k >= n:\n        return sorted(range(n))\n    smallest = {}\n    for i, num in enumerate(arg1):\n        if i < k:\n            smallest[i] = num\n        else:\n            largest = max(smallest, key=smallest.get)\n            if num < smallest[largest]:\n                del smallest[largest]\n                smallest[i] = num\n    return sorted(smallest.keys())']",100000,2.113320400007069,2.1457076550042258,2.199320700019598,N/A
