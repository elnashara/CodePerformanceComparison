problem,prompt_name,code_index,code_segment,Size,Min,Average,Max,Exception
p3_find_n_smallest_number,prompt_1,1,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indexes""]",1000,0.0022235000506043434,0.0023621879960410296,0.007792300079017878,N/A
p3_find_n_smallest_number,prompt_1,1,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indexes""]",10000,0.022397799883037806,0.03282280600629747,0.08871400007046759,N/A
p3_find_n_smallest_number,prompt_1,1,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indexes.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indexes""]",100000,0.3390476999338716,0.7424728560145013,1.1068915999494493,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_values = sorted_array[:arg2]\n    result = []\n    for value in smallest_values:\n        indices = [i for i, x in enumerate(arg1) if x == value]\n        result.extend(indices)\n    return sorted(result)']",1000,0.011158399982377887,0.01163996699033305,0.01219499995931983,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_values = sorted_array[:arg2]\n    result = []\n    for value in smallest_values:\n        indices = [i for i, x in enumerate(arg1) if x == value]\n        result.extend(indices)\n    return sorted(result)']",10000,0.1652636998333037,0.16780345799401403,0.1731908000074327,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_values = sorted_array[:arg2]\n    result = []\n    for value in smallest_values:\n        indices = [i for i, x in enumerate(arg1) if x == value]\n        result.extend(indices)\n    return sorted(result)']",100000,1.9611684000119567,1.9891454360005445,2.0200567001011223,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",1000,0.0031578000634908676,0.0033170490246266127,0.0036092998925596476,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",10000,0.030037200078368187,0.0311630720179528,0.031816900009289384,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result']",100000,0.3024478000588715,0.30785881898598744,0.3163638999685645,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.005967899924144149,0.006130463003646582,0.00674129999242723,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.10782369994558394,0.10959252700675279,0.11277920007705688,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,1.389747800072655,1.4135643120063468,1.4541895999573171,N/A
p3_find_n_smallest_number,prompt_1,5,"['def funcImp(arg1, arg2):\n    indices = []\n    for i in range(arg2):\n        smallest = arg1[0]\n        index = 0\n        for j in range(len(arg1)):\n            if arg1[j] < smallest:\n                smallest = arg1[j]\n                index = j\n        indices.append(index)\n        arg1.pop(index)\n    return indices']",1000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_1,5,"['def funcImp(arg1, arg2):\n    indices = []\n    for i in range(arg2):\n        smallest = arg1[0]\n        index = 0\n        for j in range(len(arg1)):\n            if arg1[j] < smallest:\n                smallest = arg1[j]\n                index = j\n        indices.append(index)\n        arg1.pop(index)\n    return indices']",10000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_1,5,"['def funcImp(arg1, arg2):\n    indices = []\n    for i in range(arg2):\n        smallest = arg1[0]\n        index = 0\n        for j in range(len(arg1)):\n            if arg1[j] < smallest:\n                smallest = arg1[j]\n                index = j\n        indices.append(index)\n        arg1.pop(index)\n    return indices']",100000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.006021799985319376,0.006256924993358552,0.008705300046131015,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.1079106000252068,0.10971954700769856,0.11267039994709194,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,1.391158499987796,1.4091650739894248,1.4471353001426905,N/A
p3_find_n_smallest_number,prompt_1,7,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        indexes.append(index)\n    return indexes']",1000,0.0032069000881165266,0.003497339989989996,0.004226100165396929,N/A
p3_find_n_smallest_number,prompt_1,7,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        indexes.append(index)\n    return indexes']",10000,0.08436090010218322,0.0863765519973822,0.09159980015829206,N/A
p3_find_n_smallest_number,prompt_1,7,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        indexes.append(index)\n    return indexes']",100000,1.2088883998803794,1.2466584750078618,1.2870294000022113,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, val) for i, val in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indexes = [sorted_list[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.009471999946981668,0.010130060992669315,0.012076799990609288,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, val) for i, val in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indexes = [sorted_list[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.15266250004060566,0.15710744100855664,0.17024930007755756,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, val) for i, val in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indexes = [sorted_list[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.2737815999425948,2.3092840540152975,2.5265274001285434,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arr, k):\n    sorted_arr = sorted(arr)\n    indexes = {}\n    for i in range(k):\n        index = arr.index(sorted_arr[i])\n        indexes[index] = sorted_arr[i]\n    return indexes']",1000,0.0032580001279711723,0.0034669500030577185,0.003796700155362487,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arr, k):\n    sorted_arr = sorted(arr)\n    indexes = {}\n    for i in range(k):\n        index = arr.index(sorted_arr[i])\n        indexes[index] = sorted_arr[i]\n    return indexes']",10000,0.08442030008882284,0.08643018000293523,0.08963599987328053,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arr, k):\n    sorted_arr = sorted(arr)\n    indexes = {}\n    for i in range(k):\n        index = arr.index(sorted_arr[i])\n        indexes[index] = sorted_arr[i]\n    return indexes']",100000,1.2049726000986993,1.2236320310132578,1.2765719001181424,N/A
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",1000,0.007302399957552552,0.00771071899915114,0.012858999893069267,N/A
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",10000,0.0861665999982506,0.08809021000051871,0.0995913001243025,N/A
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    for _ in range(arg2):\n        num, index = heapq.heappop(heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",100000,0.9473001000005752,0.9780332599952817,1.0259382999502122,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arr (list): A list of integers.\n    k (int): The number of smallest numbers to find.\n\n    Returns:\n    list: A list of the indices of the k smallest numbers in arr.\n    """"""\n    dict_indices = {num: i for i, num in enumerate(arr)}\n    arr.sort()\n    k_smallest_nums = arr[:k]\n    k_smallest_indices = [dict_indices[num] for num in k_smallest_nums]\n    return sorted(k_smallest_indices)']",1000,0.0029078000225126743,0.002970756010618061,0.0030927001498639584,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arr (list): A list of integers.\n    k (int): The number of smallest numbers to find.\n\n    Returns:\n    list: A list of the indices of the k smallest numbers in arr.\n    """"""\n    dict_indices = {num: i for i, num in enumerate(arr)}\n    arr.sort()\n    k_smallest_nums = arr[:k]\n    k_smallest_indices = [dict_indices[num] for num in k_smallest_nums]\n    return sorted(k_smallest_indices)']",10000,0.028285600012168288,0.028815429005771876,0.030857800040394068,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arr, k):\n    """"""\n    Returns the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arr (list): A list of integers.\n    k (int): The number of smallest numbers to find.\n\n    Returns:\n    list: A list of the indices of the k smallest numbers in arr.\n    """"""\n    dict_indices = {num: i for i, num in enumerate(arr)}\n    arr.sort()\n    k_smallest_nums = arr[:k]\n    k_smallest_indices = [dict_indices[num] for num in k_smallest_nums]\n    return sorted(k_smallest_indices)']",100000,0.6468493998982012,0.6762515349895694,0.7208847000729293,N/A
p3_find_n_smallest_number,prompt_1,12,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for element in k_smallest:\n        index = arg1.index(element)\n        indexes.append(index)\n    return indexes']",1000,0.00333360000513494,0.0034767410159111025,0.003947800025343895,N/A
p3_find_n_smallest_number,prompt_1,12,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for element in k_smallest:\n        index = arg1.index(element)\n        indexes.append(index)\n    return indexes']",10000,0.08428950002416968,0.08685516699915752,0.10565589996986091,N/A
p3_find_n_smallest_number,prompt_1,12,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for element in k_smallest:\n        index = arg1.index(element)\n        indexes.append(index)\n    return indexes']",100000,1.2046562999021262,1.2222863430017605,1.2433562998194247,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    smallest_nums = unique_nums[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        indexes += index_dict[num]\n    return indexes']",1000,0.006412900052964687,0.0065797840175218884,0.006823700154200196,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    smallest_nums = unique_nums[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        indexes += index_dict[num]\n    return indexes']",10000,0.0748290999326855,0.07635028400691227,0.08026149985380471,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    smallest_nums = unique_nums[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        indexes += index_dict[num]\n    return indexes']",100000,1.5547251000534743,1.5906665150029584,1.675425099907443,N/A
p3_find_n_smallest_number,prompt_1,14,"[""def funcImp(arg1, arg2):\n    indices = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indices.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indices""]",1000,0.0021554999984800816,0.00233554799342528,0.007565499981865287,N/A
p3_find_n_smallest_number,prompt_1,14,"[""def funcImp(arg1, arg2):\n    indices = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indices.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indices""]",10000,0.022096999920904636,0.03283132100012153,0.08965780003927648,N/A
p3_find_n_smallest_number,prompt_1,14,"[""def funcImp(arg1, arg2):\n    indices = []\n    for k in range(arg2):\n        min_idx = arg1.index(min(arg1))\n        indices.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return indices""]",100000,0.33285839995369315,0.7374612970044836,1.077943200012669,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    dict_of_num = {}\n    list_of_num = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_list_of_num = sorted(list_of_num)\n    for i in range(arg2):\n        dict_of_num[sorted_list_of_num[i][1]] = sorted_list_of_num[i][0]\n    return sorted(list(dict_of_num.keys()))']",1000,0.0115726999938488,0.012115359005983919,0.014228599844500422,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    dict_of_num = {}\n    list_of_num = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_list_of_num = sorted(list_of_num)\n    for i in range(arg2):\n        dict_of_num[sorted_list_of_num[i][1]] = sorted_list_of_num[i][0]\n    return sorted(list(dict_of_num.keys()))']",10000,0.18067929986864328,0.18421556398039685,0.1892321000341326,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    dict_of_num = {}\n    list_of_num = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_list_of_num = sorted(list_of_num)\n    for i in range(arg2):\n        dict_of_num[sorted_list_of_num[i][1]] = sorted_list_of_num[i][0]\n    return sorted(list(dict_of_num.keys()))']",100000,2.8450621999800205,2.9033297290070914,3.0510116000659764,N/A
p3_find_n_smallest_number,prompt_1,16,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sortedList = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sortedList[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.00034769997000694275,0.0005432689911685884,0.009984599892050028,N/A
p3_find_n_smallest_number,prompt_1,16,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sortedList = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sortedList[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.00319460011087358,0.024521221003960817,0.14124000002630055,N/A
p3_find_n_smallest_number,prompt_1,16,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sortedList = sorted(arg1)\n    for i in range(arg2):\n        index = arg1.index(sortedList[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,1.5887567999307066,1.741719271009788,1.8042151001282036,N/A
p3_find_n_smallest_number,prompt_1,17,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    return indices']",1000,0.005968700163066387,0.006343465009704233,0.007812299998477101,N/A
p3_find_n_smallest_number,prompt_1,17,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    return indices']",10000,0.10875869984738529,0.11101920498069376,0.11317989998497069,N/A
p3_find_n_smallest_number,prompt_1,17,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    return indices']",100000,1.4069195999763906,1.4297954769898207,1.4911130999680609,N/A
p3_find_n_smallest_number,prompt_1,18,"['def funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers to be sorted.\n    arg2 (int): The value of k, i.e., the number of smallest values to be found.\n\n    Returns:\n    A list of integers that represent the indexes of the k smallest numbers in the array.\n    """"""\n    index_list = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        index_list.append(min_index)\n        arg1[min_index] = float(\'inf\')\n    return index_list']",1000,0.0021927000489085913,0.0023485389980487524,0.007661700015887618,N/A
p3_find_n_smallest_number,prompt_1,18,"['def funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers to be sorted.\n    arg2 (int): The value of k, i.e., the number of smallest values to be found.\n\n    Returns:\n    A list of integers that represent the indexes of the k smallest numbers in the array.\n    """"""\n    index_list = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        index_list.append(min_index)\n        arg1[min_index] = float(\'inf\')\n    return index_list']",10000,0.021975700045004487,0.03276566699612886,0.0876925999764353,N/A
p3_find_n_smallest_number,prompt_1,18,"['def funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers to be sorted.\n    arg2 (int): The value of k, i.e., the number of smallest values to be found.\n\n    Returns:\n    A list of integers that represent the indexes of the k smallest numbers in the array.\n    """"""\n    index_list = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        index_list.append(min_index)\n        arg1[min_index] = float(\'inf\')\n    return index_list']",100000,0.3328003999777138,0.7381532389926724,1.079745399998501,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr_sorted = sorted(arg1)\n    kth_smallest = arr_sorted[k - 1]\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            res.append(i)\n    return res']",1000,0.004266600124537945,0.00447100201388821,0.004940900020301342,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr_sorted = sorted(arg1)\n    kth_smallest = arr_sorted[k - 1]\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            res.append(i)\n    return res']",10000,0.09096770011819899,0.09266983799636364,0.0971121999900788,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr_sorted = sorted(arg1)\n    kth_smallest = arr_sorted[k - 1]\n    res = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            res.append(i)\n    return res']",100000,1.2255355999805033,1.2488774329936132,1.2755525999236852,N/A
p3_find_n_smallest_number,prompt_1,20,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)[:arg2]\n    result = []\n    for val in sorted_list:\n        result.append(dict_values[val])\n    return result']",1000,0.005586100043728948,0.005938172994647175,0.0064130001701414585,N/A
p3_find_n_smallest_number,prompt_1,20,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)[:arg2]\n    result = []\n    for val in sorted_list:\n        result.append(dict_values[val])\n    return result']",10000,0.10561860003508627,0.10864191300934181,0.11799589986912906,N/A
p3_find_n_smallest_number,prompt_1,20,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)[:arg2]\n    result = []\n    for val in sorted_list:\n        result.append(dict_values[val])\n    return result']",100000,1.6176535999402404,1.642958356991876,1.6747491001151502,N/A
p3_find_n_smallest_number,prompt_1,21,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",1000,0.0060749000404030085,0.006359213013201952,0.006801199866458774,N/A
p3_find_n_smallest_number,prompt_1,21,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",10000,0.10986090009100735,0.11153091701678931,0.11557410005480051,N/A
p3_find_n_smallest_number,prompt_1,21,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",100000,1.4062328999862075,1.4233195329783483,1.4572258999105543,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    indices = []\n    if arg2 <= len(arg1):\n        sorted_array = sorted(arg1)\n        for elem in sorted_array[:arg2]:\n            indices.append(arg1.index(elem))\n    return indices']",1000,0.003309299936518073,0.0034717600140720607,0.003800200065597892,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    indices = []\n    if arg2 <= len(arg1):\n        sorted_array = sorted(arg1)\n        for elem in sorted_array[:arg2]:\n            indices.append(arg1.index(elem))\n    return indices']",10000,0.08453089999966323,0.08654114501550794,0.09233130002394319,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    indices = []\n    if arg2 <= len(arg1):\n        sorted_array = sorted(arg1)\n        for elem in sorted_array[:arg2]:\n            indices.append(arg1.index(elem))\n    return indices']",100000,1.20120789995417,1.2280371900158935,1.2774926000274718,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    idxs = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return idxs']",1000,0.005710499826818705,0.006206505000591278,0.008555199950933456,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    idxs = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return idxs']",10000,0.10715040005743504,0.10864059902261942,0.11630910006351769,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    idxs = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return idxs']",100000,1.378904900047928,1.400042889022734,1.5070615001022816,N/A
p3_find_n_smallest_number,prompt_1,24,"['def funcImp(arg1, arg2):\n    tuples = list(enumerate(arg1))\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    indexes = [tup[0] for tup in sorted_tuples[:arg2]]\n    return indexes']",1000,0.008326900191605091,0.008865215990226716,0.012260599993169308,N/A
p3_find_n_smallest_number,prompt_1,24,"['def funcImp(arg1, arg2):\n    tuples = list(enumerate(arg1))\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    indexes = [tup[0] for tup in sorted_tuples[:arg2]]\n    return indexes']",10000,0.1419682998675853,0.14796669699484483,0.15901529998518527,N/A
p3_find_n_smallest_number,prompt_1,24,"['def funcImp(arg1, arg2):\n    tuples = list(enumerate(arg1))\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    indexes = [tup[0] for tup in sorted_tuples[:arg2]]\n    return indexes']",100000,2.160328699974343,2.228459637996275,2.2877668999135494,N/A
p3_find_n_smallest_number,prompt_1,25,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1)\n        indexes.append(arg1.index(min_val))\n        arg1.remove(min_val)\n    return indexes']",1000,0,0,0,	 exception: min() arg is an empty sequence
p3_find_n_smallest_number,prompt_1,25,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1)\n        indexes.append(arg1.index(min_val))\n        arg1.remove(min_val)\n    return indexes']",10000,0,0,0,	 exception: min() arg is an empty sequence
p3_find_n_smallest_number,prompt_1,25,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1)\n        indexes.append(arg1.index(min_val))\n        arg1.remove(min_val)\n    return indexes']",100000,0,0,0,	 exception: min() arg is an empty sequence
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",1000,0.0070229999255388975,0.007572772982530296,0.01218640012666583,N/A
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",10000,0.1103793999645859,0.11327740900451318,0.12463239999487996,N/A
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",100000,1.5799112999811769,1.6158839700068348,1.6864365001674742,N/A
p3_find_n_smallest_number,prompt_1,27,"['def funcImp(arg1, arg2):\n    """"""Returns the indices of the k smallest numbers in an unsorted list""""""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    result = [pair[0] for pair in sorted_dict[:arg2]]\n    return result']",1000,0.010110499802976847,0.010633295990992338,0.01257859985344112,N/A
p3_find_n_smallest_number,prompt_1,27,"['def funcImp(arg1, arg2):\n    """"""Returns the indices of the k smallest numbers in an unsorted list""""""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    result = [pair[0] for pair in sorted_dict[:arg2]]\n    return result']",10000,0.1654927998315543,0.1728565030102618,0.18445439985953271,N/A
p3_find_n_smallest_number,prompt_1,27,"['def funcImp(arg1, arg2):\n    """"""Returns the indices of the k smallest numbers in an unsorted list""""""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    result = [pair[0] for pair in sorted_dict[:arg2]]\n    return result']",100000,2.6161803998984396,2.670241786998231,2.7845085998997092,N/A
p3_find_n_smallest_number,prompt_1,28,"['def funcImp(arg1, arg2):\n    index_list = list(range(len(arg1)))\n    sorted_indexes = sorted(index_list, key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",1000,0.007103400072082877,0.007592415984254331,0.011747899930924177,N/A
p3_find_n_smallest_number,prompt_1,28,"['def funcImp(arg1, arg2):\n    index_list = list(range(len(arg1)))\n    sorted_indexes = sorted(index_list, key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",10000,0.11196099990047514,0.11506935499375687,0.12412709998898208,N/A
p3_find_n_smallest_number,prompt_1,28,"['def funcImp(arg1, arg2):\n    index_list = list(range(len(arg1)))\n    sorted_indexes = sorted(index_list, key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",100000,1.6435829000547528,1.6857785139977932,1.76733239996247,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arg1 = sorted(arg1)\n    for num in sorted_arg1[:arg2]:\n        indices.append(arg1.index(num))\n    return indices']",1000,0.003281199838966131,0.003555083004757762,0.005276300013065338,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arg1 = sorted(arg1)\n    for num in sorted_arg1[:arg2]:\n        indices.append(arg1.index(num))\n    return indices']",10000,0.08390149986371398,0.08711870500585064,0.09445989993400872,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arg1 = sorted(arg1)\n    for num in sorted_arg1[:arg2]:\n        indices.append(arg1.index(num))\n    return indices']",100000,1.207624200033024,1.228037505999673,1.2612054999917746,N/A
p3_find_n_smallest_number,prompt_1,30,"['def funcImp(arg1, arg2):\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    result = []\n    for i in range(arg2):\n        num = arg1.index(arg1_copy[i])\n        result.append(num)\n    result.sort()\n    return result']",1000,0.003257500007748604,0.0034603220084682106,0.003872800152748823,N/A
p3_find_n_smallest_number,prompt_1,30,"['def funcImp(arg1, arg2):\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    result = []\n    for i in range(arg2):\n        num = arg1.index(arg1_copy[i])\n        result.append(num)\n    result.sort()\n    return result']",10000,0.0837187001015991,0.08668155801249668,0.09457110008224845,N/A
p3_find_n_smallest_number,prompt_1,30,"['def funcImp(arg1, arg2):\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    result = []\n    for i in range(arg2):\n        num = arg1.index(arg1_copy[i])\n        result.append(num)\n    result.sort()\n    return result']",100000,1.1955971999559551,1.2281469650170767,1.2889545001089573,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    smallest_nums = []\n    for i in range(len(arg1)):\n        if len(smallest_nums) < k or arg1[i] < smallest_nums[-1][0]:\n            smallest_nums.append((arg1[i], i))\n            smallest_nums.sort()\n            if len(smallest_nums) > k:\n                smallest_nums.pop()\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(num[1])\n    return indexes']",1000,0.0037561000790446997,0.003875357008073479,0.004671800183132291,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    smallest_nums = []\n    for i in range(len(arg1)):\n        if len(smallest_nums) < k or arg1[i] < smallest_nums[-1][0]:\n            smallest_nums.append((arg1[i], i))\n            smallest_nums.sort()\n            if len(smallest_nums) > k:\n                smallest_nums.pop()\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(num[1])\n    return indexes']",10000,0.03491010004654527,0.03610120000317693,0.04314259998500347,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    smallest_nums = []\n    for i in range(len(arg1)):\n        if len(smallest_nums) < k or arg1[i] < smallest_nums[-1][0]:\n            smallest_nums.append((arg1[i], i))\n            smallest_nums.sort()\n            if len(smallest_nums) > k:\n                smallest_nums.pop()\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(num[1])\n    return indexes']",100000,0.3536873001139611,0.3627386060217395,0.43012239993549883,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, k):\n    if k > len(arg1):\n        return None\n    nums = {num: i for i, num in enumerate(arg1)}\n    arg1.sort()\n    indexes = [nums[arg1[i]] for i in range(k)]\n    return indexes']",1000,0.0027989998925477266,0.0029391790134832264,0.0031987999100238085,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, k):\n    if k > len(arg1):\n        return None\n    nums = {num: i for i, num in enumerate(arg1)}\n    arg1.sort()\n    indexes = [nums[arg1[i]] for i in range(k)]\n    return indexes']",10000,0.02769020013511181,0.028898612014018,0.03247009986080229,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, k):\n    if k > len(arg1):\n        return None\n    nums = {num: i for i, num in enumerate(arg1)}\n    arg1.sort()\n    indexes = [nums[arg1[i]] for i in range(k)]\n    return indexes']",100000,0.6349855998996645,0.699175420999527,0.7296720999293029,N/A
p3_find_n_smallest_number,prompt_1,33,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    indexes = [tup[1] for tup in sorted_lst[:arg2]]\n    return indexes']",1000,0.009397099958732724,0.009836352996062487,0.011168699944391847,N/A
p3_find_n_smallest_number,prompt_1,33,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    indexes = [tup[1] for tup in sorted_lst[:arg2]]\n    return indexes']",10000,0.1548002001363784,0.1601131899910979,0.16634909994900227,N/A
p3_find_n_smallest_number,prompt_1,33,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    indexes = [tup[1] for tup in sorted_lst[:arg2]]\n    return indexes']",100000,2.270892000058666,2.309093299000524,2.3578451999928802,N/A
p3_find_n_smallest_number,prompt_1,34,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    indexes = sorted(range(n), key=lambda x: arg1[x])[:arg2]\n    return indexes']",1000,0.007044399855658412,0.007444761008955538,0.009399699978530407,N/A
p3_find_n_smallest_number,prompt_1,34,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    indexes = sorted(range(n), key=lambda x: arg1[x])[:arg2]\n    return indexes']",10000,0.11456010001711547,0.11928467899095267,0.17363139986991882,N/A
p3_find_n_smallest_number,prompt_1,34,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    indexes = sorted(range(n), key=lambda x: arg1[x])[:arg2]\n    return indexes']",100000,1.594823099905625,1.635420941002667,1.709658200154081,N/A
p3_find_n_smallest_number,prompt_1,35,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    result = []\n    for i in range(arg2):\n        result.append(k_smallest[i][0])\n    return result']",1000,0.009995399974286556,0.010568790992256254,0.011758999899029732,N/A
p3_find_n_smallest_number,prompt_1,35,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    result = []\n    for i in range(arg2):\n        result.append(k_smallest[i][0])\n    return result']",10000,0.16278250003233552,0.17031578399706632,0.1952537999022752,N/A
p3_find_n_smallest_number,prompt_1,35,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    result = []\n    for i in range(arg2):\n        result.append(k_smallest[i][0])\n    return result']",100000,2.5813076000194997,2.635149954003282,2.819144499953836,N/A
p3_find_n_smallest_number,prompt_1,36,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array'\n    if arg2 == len(arg1):\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return sorted(indexes)""]",1000,0.002221000147983432,0.0024603359983302654,0.007797400001436472,N/A
p3_find_n_smallest_number,prompt_1,36,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array'\n    if arg2 == len(arg1):\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return sorted(indexes)""]",10000,0.021984399994835258,0.03293795000063256,0.08902389998547733,N/A
p3_find_n_smallest_number,prompt_1,36,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than the length of the array'\n    if arg2 == len(arg1):\n        return [i for i in range(len(arg1))]\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return sorted(indexes)""]",100000,0.33991890004836023,0.7420319940103218,1.0828691001515836,N/A
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return []\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:k]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(index_dict[num])\n    return indexes']",1000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return []\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:k]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(index_dict[num])\n    return indexes']",10000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return []\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    sorted_arg1 = sorted(arg1)\n    smallest_k = sorted_arg1[:k]\n    indexes = []\n    for num in smallest_k:\n        indexes.append(index_dict[num])\n    return indexes']",100000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    value_index_pairs = {}\n    for index, value in enumerate(arg1):\n        value_index_pairs[value] = index\n    k_smallest_values = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for value in k_smallest_values:\n        index = value_index_pairs[value]\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",1000,0.0057471999898552895,0.006232916011940688,0.008085899986326694,N/A
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    value_index_pairs = {}\n    for index, value in enumerate(arg1):\n        value_index_pairs[value] = index\n    k_smallest_values = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for value in k_smallest_values:\n        index = value_index_pairs[value]\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",10000,0.10884200013242662,0.11186649200040848,0.12108150008134544,N/A
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    value_index_pairs = {}\n    for index, value in enumerate(arg1):\n        value_index_pairs[value] = index\n    k_smallest_values = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for value in k_smallest_values:\n        index = value_index_pairs[value]\n        k_smallest_indices.append(index)\n    return k_smallest_indices']",100000,1.6414990001358092,1.6770892409910447,1.708340800134465,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",1000,0.005995600018650293,0.006543426006101072,0.009549699956551194,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",10000,0.10639999993145466,0.11047740299487487,0.11485940008424222,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",100000,1.407185300020501,1.432919361991808,1.4704760999884456,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.extend(index_dict[num][:arg2 - len(index_list)])\n    return sorted(index_list)""]",1000,0.008205699967220426,0.008669297005981206,0.009618999902158976,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.extend(index_dict[num][:arg2 - len(index_list)])\n    return sorted(index_list)""]",10000,0.13565890002064407,0.13943792299367488,0.14851679978892207,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.extend(index_dict[num][:arg2 - len(index_list)])\n    return sorted(index_list)""]",100000,2.16384069994092,2.209032640978694,2.263605499872938,N/A
p3_find_n_smallest_number,prompt_1,41,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(sorted_dict[i][0])\n    return k_smallest_indexes']",1000,0.010344799840822816,0.010837495983578265,0.012715100077912211,N/A
p3_find_n_smallest_number,prompt_1,41,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(sorted_dict[i][0])\n    return k_smallest_indexes']",10000,0.16428120015189052,0.17382928901119157,0.18498079990968108,N/A
p3_find_n_smallest_number,prompt_1,41,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(sorted_dict[i][0])\n    return k_smallest_indexes']",100000,2.6218288999516517,2.7004652630118655,3.0379101999569684,N/A
p3_find_n_smallest_number,prompt_1,42,"['def funcImp(arr, k):\n    """"""\n    This function takes in an array of integers and a number \'k\' and returns a list of the indexes of the k smallest numbers in the array.\n    """"""\n    arr_tuples = [(num, index) for index, num in enumerate(arr)]\n    arr_tuples.sort()\n    return [index for num, index in arr_tuples[:k]]']",1000,0.011408899910748005,0.011815723008476197,0.012767700012773275,N/A
p3_find_n_smallest_number,prompt_1,42,"['def funcImp(arr, k):\n    """"""\n    This function takes in an array of integers and a number \'k\' and returns a list of the indexes of the k smallest numbers in the array.\n    """"""\n    arr_tuples = [(num, index) for index, num in enumerate(arr)]\n    arr_tuples.sort()\n    return [index for num, index in arr_tuples[:k]]']",10000,0.17624980001710355,0.18509447601623832,0.20082549983635545,N/A
p3_find_n_smallest_number,prompt_1,42,"['def funcImp(arr, k):\n    """"""\n    This function takes in an array of integers and a number \'k\' and returns a list of the indexes of the k smallest numbers in the array.\n    """"""\n    arr_tuples = [(num, index) for index, num in enumerate(arr)]\n    arr_tuples.sort()\n    return [index for num, index in arr_tuples[:k]]']",100000,2.751484900014475,2.8858472390053795,3.5543638998642564,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",1000,0.003240699879825115,0.0035295670153573156,0.00869280006736517,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",10000,0.08430729992687702,0.08727456900058314,0.0954711998347193,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",100000,1.1945835000369698,1.2295226949988864,1.286688000196591,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in sorted_tuples[:arg2]]\n    return k_smallest_indexes']",1000,0.009573200019076467,0.010087269004434346,0.01563450018875301,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in sorted_tuples[:arg2]]\n    return k_smallest_indexes']",10000,0.15878699999302626,0.16356722697848455,0.17439180007204413,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1: list[int], arg2: int) -> list[int]:\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in sorted_tuples[:arg2]]\n    return k_smallest_indexes']",100000,2.2515301001258194,2.333376570006367,2.376896600006148,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for num in sorted_list[:arg2]:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.003358700079843402,0.0035029559955000876,0.005452699959278107,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for num in sorted_list[:arg2]:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.08331659995019436,0.08664717201841995,0.09355290001258254,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for num in sorted_list[:arg2]:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,1.1961781000718474,1.2280727719934657,1.2664880000520498,N/A
p3_find_n_smallest_number,prompt_1,46,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_arg1[:arg2]']",1000,0.007248299894854426,0.007551192999817431,0.008963899919763207,N/A
p3_find_n_smallest_number,prompt_1,46,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_arg1[:arg2]']",10000,0.113088000100106,0.1172822210076265,0.12713510007597506,N/A
p3_find_n_smallest_number,prompt_1,46,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_arg1[:arg2]']",100000,1.5997313000261784,1.635524660006631,1.6951363000553101,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    values_and_indexes = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_and_indexes = sorted(values_and_indexes, key=lambda x: x[0])\n    k_smallest_indexes = [sorted_values_and_indexes[i][1] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.009383199969306588,0.009939627000130713,0.012659400003030896,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    values_and_indexes = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_and_indexes = sorted(values_and_indexes, key=lambda x: x[0])\n    k_smallest_indexes = [sorted_values_and_indexes[i][1] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.15167229995131493,0.15893425000598654,0.16318769985809922,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    values_and_indexes = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_and_indexes = sorted(values_and_indexes, key=lambda x: x[0])\n    k_smallest_indexes = [sorted_values_and_indexes[i][1] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.2588807998690754,2.301020982989576,2.3810663998592645,N/A
p3_find_n_smallest_number,prompt_1,48,"['def funcImp(arg1, arg2):\n    arr = [(elem, i) for i, elem in enumerate(arg1)]\n    arr.sort()\n    res = [elem[1] for elem in arr[:arg2]]\n    return res']",1000,0.011631000088527799,0.01217815098585561,0.016857299953699112,N/A
p3_find_n_smallest_number,prompt_1,48,"['def funcImp(arg1, arg2):\n    arr = [(elem, i) for i, elem in enumerate(arg1)]\n    arr.sort()\n    res = [elem[1] for elem in arr[:arg2]]\n    return res']",10000,0.17730279988609254,0.18118729199282824,0.1880604000762105,N/A
p3_find_n_smallest_number,prompt_1,48,"['def funcImp(arg1, arg2):\n    arr = [(elem, i) for i, elem in enumerate(arg1)]\n    arr.sort()\n    res = [elem[1] for elem in arr[:arg2]]\n    return res']",100000,2.788397599942982,2.8287444260087797,2.9545131002087146,N/A
p3_find_n_smallest_number,prompt_1,49,"['def funcImp(arg1, arg2):\n    value_to_index_map = {}\n    for i, value in enumerate(arg1):\n        if value not in value_to_index_map:\n            value_to_index_map[value] = [i]\n        else:\n            value_to_index_map[value].append(i)\n    unique_values = sorted(set(arg1))\n    smallest_values = unique_values[:arg2]\n    smallest_indices = []\n    for value in smallest_values:\n        smallest_indices += value_to_index_map[value][:arg2 - len(smallest_indices)]\n        if len(smallest_indices) == arg2:\n            break\n    return smallest_indices']",1000,0.006347400136291981,0.006632391000166536,0.00757679995149374,N/A
p3_find_n_smallest_number,prompt_1,49,"['def funcImp(arg1, arg2):\n    value_to_index_map = {}\n    for i, value in enumerate(arg1):\n        if value not in value_to_index_map:\n            value_to_index_map[value] = [i]\n        else:\n            value_to_index_map[value].append(i)\n    unique_values = sorted(set(arg1))\n    smallest_values = unique_values[:arg2]\n    smallest_indices = []\n    for value in smallest_values:\n        smallest_indices += value_to_index_map[value][:arg2 - len(smallest_indices)]\n        if len(smallest_indices) == arg2:\n            break\n    return smallest_indices']",10000,0.0742448999080807,0.0764637539931573,0.07883000001311302,N/A
p3_find_n_smallest_number,prompt_1,49,"['def funcImp(arg1, arg2):\n    value_to_index_map = {}\n    for i, value in enumerate(arg1):\n        if value not in value_to_index_map:\n            value_to_index_map[value] = [i]\n        else:\n            value_to_index_map[value].append(i)\n    unique_values = sorted(set(arg1))\n    smallest_values = unique_values[:arg2]\n    smallest_indices = []\n    for value in smallest_values:\n        smallest_indices += value_to_index_map[value][:arg2 - len(smallest_indices)]\n        if len(smallest_indices) == arg2:\n            break\n    return smallest_indices']",100000,1.5358883999288082,1.5730775100179017,1.6257064999081194,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    dict_arg1 = {}\n    for i in range(len(arg1)):\n        dict_arg1[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.append(dict_arg1[num])\n    return index_list']",1000,0.005549099994823337,0.005888488974887878,0.007195599842816591,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    dict_arg1 = {}\n    for i in range(len(arg1)):\n        dict_arg1[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.append(dict_arg1[num])\n    return index_list']",10000,0.10536450007930398,0.10784309200476855,0.11233879998326302,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    dict_arg1 = {}\n    for i in range(len(arg1)):\n        dict_arg1[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    index_list = []\n    for num in k_smallest:\n        index_list.append(dict_arg1[num])\n    return index_list']",100000,1.6005316998343915,1.6285895379795692,1.7299474999308586,N/A
p3_find_n_smallest_number,prompt_1,51,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        indexes.append(arg1.index(sorted_array[i]))\n    return indexes']",1000,0.003229700028896332,0.0035380259878002107,0.004679300123825669,N/A
p3_find_n_smallest_number,prompt_1,51,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        indexes.append(arg1.index(sorted_array[i]))\n    return indexes']",10000,0.08394530019722879,0.08627208800986409,0.09079679986461997,N/A
p3_find_n_smallest_number,prompt_1,51,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_array = sorted(arg1)\n    for i in range(arg2):\n        indexes.append(arg1.index(sorted_array[i]))\n    return indexes']",100000,1.2003438000101596,1.215202824017033,1.2583166998811066,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, x) for i, x in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_index = indexed_list[i][0]\n        k_smallest_indices.append(k_smallest_index)\n    return k_smallest_indices']",1000,0.00914630014449358,0.009702584987971932,0.013592100003734231,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, x) for i, x in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_index = indexed_list[i][0]\n        k_smallest_indices.append(k_smallest_index)\n    return k_smallest_indices']",10000,0.14630549983121455,0.15176903598476202,0.15897590015083551,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    indexed_list = [(i, x) for i, x in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    k_smallest_indices = []\n    for i in range(arg2):\n        k_smallest_index = indexed_list[i][0]\n        k_smallest_indices.append(k_smallest_index)\n    return k_smallest_indices']",100000,2.180532000027597,2.2242024720204063,2.3322862000204623,N/A
p3_find_n_smallest_number,prompt_1,53,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_num = {arg1[i]: i for i in range(n)}\n    sorted_num = sorted(arg1)\n    smallest_k = sorted_num[:arg2]\n    result = []\n    for x in smallest_k:\n        result.append(dict_num[x])\n    return result']",1000,0.005493399919942021,0.0059041189984418456,0.0071240998804569244,N/A
p3_find_n_smallest_number,prompt_1,53,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_num = {arg1[i]: i for i in range(n)}\n    sorted_num = sorted(arg1)\n    smallest_k = sorted_num[:arg2]\n    result = []\n    for x in smallest_k:\n        result.append(dict_num[x])\n    return result']",10000,0.1032124999910593,0.10689167901640757,0.11424749996513128,N/A
p3_find_n_smallest_number,prompt_1,53,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_num = {arg1[i]: i for i in range(n)}\n    sorted_num = sorted(arg1)\n    smallest_k = sorted_num[:arg2]\n    result = []\n    for x in smallest_k:\n        result.append(dict_num[x])\n    return result']",100000,1.6004247998353094,1.6207924139779062,1.6640366001520306,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    my_dict = {}\n    for i in range(len(arg1)):\n        my_dict[arg1[i]] = i\n    sorted_num = sorted(arg1)\n    res = []\n    for i in range(arg2):\n        index = my_dict[sorted_num[i]]\n        res.append(index)\n    return res']",1000,0.005627100123092532,0.006100737999659032,0.007637399947270751,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    my_dict = {}\n    for i in range(len(arg1)):\n        my_dict[arg1[i]] = i\n    sorted_num = sorted(arg1)\n    res = []\n    for i in range(arg2):\n        index = my_dict[sorted_num[i]]\n        res.append(index)\n    return res']",10000,0.1065328000113368,0.10875594699056819,0.11427480005659163,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    my_dict = {}\n    for i in range(len(arg1)):\n        my_dict[arg1[i]] = i\n    sorted_num = sorted(arg1)\n    res = []\n    for i in range(arg2):\n        index = my_dict[sorted_num[i]]\n        res.append(index)\n    return res']",100000,1.5966360000893474,1.6295376400114037,1.7034482001326978,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_k = sorted(arg1)[:k]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",1000,0.005822000093758106,0.006227699997834861,0.007957899942994118,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_k = sorted(arg1)[:k]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",10000,0.10694879991933703,0.10929465499240905,0.13211739994585514,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_k = sorted(arg1)[:k]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",100000,1.385816500056535,1.4082572389976122,1.442680099979043,N/A
p3_find_n_smallest_number,prompt_1,56,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexes = []\n        for i in range(arg2):\n            curr_min = min(arg1)\n            indexes.append(arg1.index(curr_min))\n            arg1.remove(curr_min)\n        return sorted(indexes)']",1000,1.859990879893303e-05,6.478901486843825e-05,0.0033476001117378473,N/A
p3_find_n_smallest_number,prompt_1,56,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexes = []\n        for i in range(arg2):\n            curr_min = min(arg1)\n            indexes.append(arg1.index(curr_min))\n            arg1.remove(curr_min)\n        return sorted(indexes)']",10000,1.8900027498602867e-05,0.004593983995728195,0.04438119987025857,N/A
p3_find_n_smallest_number,prompt_1,56,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexes = []\n        for i in range(arg2):\n            curr_min = min(arg1)\n            indexes.append(arg1.index(curr_min))\n            arg1.remove(curr_min)\n        return sorted(indexes)']",100000,0.2562686000019312,0.37820038898847996,0.4979072001297027,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(arg1, k):\n    indexes = []\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    for i in range(k):\n        index = arg1.index(arg1_copy[i])\n        indexes.append(index)\n    return indexes']",1000,0.0032102998811751604,0.0034334250004030764,0.003775699995458126,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(arg1, k):\n    indexes = []\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    for i in range(k):\n        index = arg1.index(arg1_copy[i])\n        indexes.append(index)\n    return indexes']",10000,0.08435090002603829,0.08621581099927425,0.09335199999623,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(arg1, k):\n    indexes = []\n    arg1_copy = arg1.copy()\n    arg1_copy.sort()\n    for i in range(k):\n        index = arg1.index(arg1_copy[i])\n        indexes.append(index)\n    return indexes']",100000,1.1911039999686182,1.206949242001865,1.2447416000068188,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    k_smallest_indexes = []\n    for num in k_smallest:\n        k_smallest_indexes.append(arg1.index(num))\n    return k_smallest_indexes']",1000,0.0033117998391389847,0.0035125469812192023,0.004223900148645043,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    k_smallest_indexes = []\n    for num in k_smallest:\n        k_smallest_indexes.append(arg1.index(num))\n    return k_smallest_indexes']",10000,0.0829511999618262,0.08563982899300754,0.09247949998825788,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    k_smallest_indexes = []\n    for num in k_smallest:\n        k_smallest_indexes.append(arg1.index(num))\n    return k_smallest_indexes']",100000,1.200601799879223,1.2142504650028423,1.2540105001535267,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[i] = num\n    sorted_d = dict(sorted(d.items(), key=lambda x: x[1])[:arg2])\n    return sorted(sorted_d.keys())']",1000,0.01011350005865097,0.010670633988920599,0.017455199966207147,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[i] = num\n    sorted_d = dict(sorted(d.items(), key=lambda x: x[1])[:arg2])\n    return sorted(sorted_d.keys())']",10000,0.1628328999504447,0.166334971988108,0.17365680006332695,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, num in enumerate(arg1):\n        d[i] = num\n    sorted_d = dict(sorted(d.items(), key=lambda x: x[1])[:arg2])\n    return sorted(sorted_d.keys())']",100000,2.520829000044614,2.57420174801955,2.715416500112042,N/A
p3_find_n_smallest_number,prompt_1,60,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    index_list = []\n    for i in range(arg2):\n        index_list.append(sorted_dict[i][0])\n    return index_list']",1000,0.010349499993026257,0.010788788986392319,0.014315299922600389,N/A
p3_find_n_smallest_number,prompt_1,60,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    index_list = []\n    for i in range(arg2):\n        index_list.append(sorted_dict[i][0])\n    return index_list']",10000,0.16186000010930002,0.16742748899152501,0.17399790021590889,N/A
p3_find_n_smallest_number,prompt_1,60,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    index_list = []\n    for i in range(arg2):\n        index_list.append(sorted_dict[i][0])\n    return index_list']",100000,2.5538802000228316,2.598078535993118,2.9896688000299037,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    elems = [(elem, i) for i, elem in enumerate(arg1)]\n    elems.sort()\n    indexes = [elem[1] for elem in elems[:arg2]]\n    return indexes']",1000,0.011581199942156672,0.012037203996442258,0.015614999923855066,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    elems = [(elem, i) for i, elem in enumerate(arg1)]\n    elems.sort()\n    indexes = [elem[1] for elem in elems[:arg2]]\n    return indexes']",10000,0.17559899995103478,0.1812652310100384,0.21194219985045493,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    elems = [(elem, i) for i, elem in enumerate(arg1)]\n    elems.sort()\n    indexes = [elem[1] for elem in elems[:arg2]]\n    return indexes']",100000,2.7691586001310498,2.835953452005051,2.9707125001586974,N/A
p3_find_n_smallest_number,prompt_1,62,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than size of input array.'\n    val_idx_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_pairs = sorted(val_idx_pairs, key=lambda x: x[0])\n    return [sorted_pairs[i][1] for i in range(arg2)]""]",1000,0.009541899897158146,0.010056547985877842,0.012151299975812435,N/A
p3_find_n_smallest_number,prompt_1,62,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than size of input array.'\n    val_idx_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_pairs = sorted(val_idx_pairs, key=lambda x: x[0])\n    return [sorted_pairs[i][1] for i in range(arg2)]""]",10000,0.15332289994694293,0.1579347410146147,0.16183979995548725,N/A
p3_find_n_smallest_number,prompt_1,62,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than size of input array.'\n    val_idx_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_pairs = sorted(val_idx_pairs, key=lambda x: x[0])\n    return [sorted_pairs[i][1] for i in range(arg2)]""]",100000,2.252953000133857,2.2895967880100945,2.379923600004986,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_numbers = sorted_list[:arg2]\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in smallest_numbers:\n            indexes.append(i)\n    return indexes']",1000,0.006253200117498636,0.0065142629877664145,0.007596600102260709,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_numbers = sorted_list[:arg2]\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in smallest_numbers:\n            indexes.append(i)\n    return indexes']",10000,0.108059799997136,0.11048246400430799,0.11457279999740422,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_numbers = sorted_list[:arg2]\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in smallest_numbers:\n            indexes.append(i)\n    return indexes']",100000,1.3938666000030935,1.4221187260071746,1.4649840001948178,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        indexes.append(arg1.index(sorted_arg1[i]))\n    return indexes']",1000,0.003207199973985553,0.0035161169967614114,0.006949699949473143,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        indexes.append(arg1.index(sorted_arg1[i]))\n    return indexes']",10000,0.08322879998013377,0.08525103899650276,0.08836599998176098,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        indexes.append(arg1.index(sorted_arg1[i]))\n    return indexes']",100000,1.1954909998457879,1.2121364039881155,1.2563493999186903,N/A
p3_find_n_smallest_number,prompt_1,65,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    if k <= len(arg1):\n        k_smallest_values = sorted(arg1)[:k]\n        for value in k_smallest_values:\n            index = arg1.index(value)\n            indexes.append(index)\n    return indexes']",1000,0.0032441001385450363,0.0034915679832920434,0.003916499903425574,N/A
p3_find_n_smallest_number,prompt_1,65,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    if k <= len(arg1):\n        k_smallest_values = sorted(arg1)[:k]\n        for value in k_smallest_values:\n            index = arg1.index(value)\n            indexes.append(index)\n    return indexes']",10000,0.08448589988984168,0.08693068000255152,0.10464309994131327,N/A
p3_find_n_smallest_number,prompt_1,65,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    if k <= len(arg1):\n        k_smallest_values = sorted(arg1)[:k]\n        for value in k_smallest_values:\n            index = arg1.index(value)\n            indexes.append(index)\n    return indexes']",100000,1.1990714001003653,1.221329784989357,1.2696989998221397,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",1000,0.005705100018531084,0.005979322001803666,0.006499799899756908,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",10000,0.10605560010299087,0.10856790199643002,0.11922620004042983,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",100000,1.3698970000259578,1.4004581050109117,1.4376758998259902,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1, arg2):\n    """"""Find the indexes of k smallest numbers in unsorted array""""""\n    sorted_array = sorted(arg1)\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(index_dict[sorted_array[i]])\n    return k_smallest_indexes']",1000,0.0058327000588178635,0.006273052000906319,0.008373700082302094,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1, arg2):\n    """"""Find the indexes of k smallest numbers in unsorted array""""""\n    sorted_array = sorted(arg1)\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(index_dict[sorted_array[i]])\n    return k_smallest_indexes']",10000,0.10892979986965656,0.1118109610164538,0.13381480006501079,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1, arg2):\n    """"""Find the indexes of k smallest numbers in unsorted array""""""\n    sorted_array = sorted(arg1)\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.append(index_dict[sorted_array[i]])\n    return k_smallest_indexes']",100000,1.6938011997845024,1.726547547976952,1.7757839001715183,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    index_dict = {i: arg1[i] for i in range(len(arg1))}\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.010177399963140488,0.01051312501076609,0.011401700088754296,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    index_dict = {i: arg1[i] for i in range(len(arg1))}\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.16144379996694624,0.16813681400613859,0.17828179989010096,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    index_dict = {i: arg1[i] for i in range(len(arg1))}\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.5636001999955624,2.636288765012287,2.7240730999037623,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    k_smallest_nums = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num and i not in indices:\n                indices.append(i)\n                break\n    return indices']",1000,0.00479709985665977,0.005106530997436493,0.007548199966549873,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    k_smallest_nums = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num and i not in indices:\n                indices.append(i)\n                break\n    return indices']",10000,0.11473330017179251,0.11787603300297633,0.1349934998434037,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    k_smallest_nums = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num and i not in indices:\n                indices.append(i)\n                break\n    return indices']",100000,1.652110799914226,1.6799233199912122,1.7405888999346644,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",1000,0.003342099953442812,0.003527581011876464,0.004255000036209822,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",10000,0.08291110000573099,0.08626289400272072,0.09389050002209842,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indices.append(index)\n    return indices']",100000,1.1968030000571162,1.23175493898103,1.317457800032571,N/A
p3_find_n_smallest_number,prompt_1,71,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'k is greater than the length of the list'\n    else:\n        k_smallest = sorted(arg1)[:k]\n        indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n        return indices""]",1000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,71,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'k is greater than the length of the list'\n    else:\n        k_smallest = sorted(arg1)[:k]\n        indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n        return indices""]",10000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,71,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'k is greater than the length of the list'\n    else:\n        k_smallest = sorted(arg1)[:k]\n        indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n        return indices""]",100000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_1,72,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    indexes.sort()\n    return indexes""]",1000,0.000336900120601058,0.0005089959944598377,0.010008600074797869,N/A
p3_find_n_smallest_number,prompt_1,72,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    indexes.sort()\n    return indexes""]",10000,0.00318130012601614,0.02474586999975145,0.13737519993446767,N/A
p3_find_n_smallest_number,prompt_1,72,"[""def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n        arg1[index] = float('inf')\n    indexes.sort()\n    return indexes""]",100000,1.620387400034815,1.749878390005324,1.8381197999697179,N/A
p3_find_n_smallest_number,prompt_1,73,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the array'\n    sorted_arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",1000,0.00034030014649033546,0.000512747997418046,0.00999179994687438,N/A
p3_find_n_smallest_number,prompt_1,73,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the array'\n    sorted_arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",10000,0.003205099841579795,0.024797590007074176,0.1390207998920232,N/A
p3_find_n_smallest_number,prompt_1,73,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the length of the array'\n    sorted_arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        index = arg1.index(sorted_arg1[i])\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",100000,1.6082093000877649,1.74991499400232,1.8371651999186724,N/A
p3_find_n_smallest_number,prompt_1,74,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indices[:arg2]']",1000,0.0071137999184429646,0.00756750100525096,0.009201599983498454,N/A
p3_find_n_smallest_number,prompt_1,74,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indices[:arg2]']",10000,0.11046510003507137,0.11393861600197852,0.16216880013234913,N/A
p3_find_n_smallest_number,prompt_1,74,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indices[:arg2]']",100000,1.5825000999029726,1.6469075430044904,1.7036135999951512,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    if k > len(arg1):\n        return indices\n    for i in range(k):\n        min_index = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[min_index] > arg1[j]:\n                min_index = j\n        indices.append(min_index)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n    return indices']",1000,0.0088984000030905,0.00932747099082917,0.010659099789336324,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    if k > len(arg1):\n        return indices\n    for i in range(k):\n        min_index = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[min_index] > arg1[j]:\n                min_index = j\n        indices.append(min_index)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n    return indices']",10000,0.094770000083372,0.09746937399962917,0.10695779998786747,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    if k > len(arg1):\n        return indices\n    for i in range(k):\n        min_index = i\n        for j in range(i + 1, len(arg1)):\n            if arg1[min_index] > arg1[j]:\n                min_index = j\n        indices.append(min_index)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n    return indices']",100000,0.9713477999903262,0.9899375839857385,1.0369976998772472,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.003235999960452318,0.0035283829853869973,0.004401399986818433,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.08275129995308816,0.08567748601548374,0.0934971000533551,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,1.207465099869296,1.2334004389937037,1.2630001998040825,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = {num: arg1.index(num) for num in k_smallest}\n    return [indices[num] for num in k_smallest]']",1000,0.0032895999029278755,0.0035531680029816924,0.004254499915987253,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = {num: arg1.index(num) for num in k_smallest}\n    return [indices[num] for num in k_smallest]']",10000,0.08332420000806451,0.08713934598956258,0.09746820013970137,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    indices = {num: arg1.index(num) for num in k_smallest}\n    return [indices[num] for num in k_smallest]']",100000,1.2033221998717636,1.2281170539953745,1.2618295999709517,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    sorted_indexes = sorted(range(n), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",1000,0.006977600045502186,0.0074025580123998225,0.008460900047793984,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    sorted_indexes = sorted(range(n), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",10000,0.1135950000025332,0.11652392600197345,0.12323509994894266,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    sorted_indexes = sorted(range(n), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",100000,1.5936322999186814,1.6259631620021537,1.7810420000459999,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indexes.append(index)\n    return indexes']",1000,0.0032450000289827585,0.003481080993078649,0.004457100061699748,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indexes.append(index)\n    return indexes']",10000,0.08313090004958212,0.08646363601088523,0.09451589989475906,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    sorted_arg1 = sorted(arg1)\n    for i in range(k):\n        index = arg1.index(sorted_arg1[i])\n        indexes.append(index)\n    return indexes']",100000,1.2040271998848766,1.2270196329895406,1.2556839000899345,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",1000,0.007029500091448426,0.007416389028076082,0.008014299906790257,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",10000,0.11006209999322891,0.1137177750072442,0.13002820010297,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indexes']",100000,1.5712230000644922,1.609506874990184,1.750616200035438,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",1000,0.0032275000121444464,0.003509517996571958,0.005300800083205104,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",10000,0.08388820011168718,0.0870985640003346,0.09557949984446168,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    indices = []\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(arg1.index(sorted_arr[i]))\n    return indices']",100000,1.2050672001205385,1.225934235996101,1.2658416999038309,N/A
p3_find_n_smallest_number,prompt_1,82,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",1000,0.0021710998844355345,0.0023755110055208206,0.007699900073930621,N/A
p3_find_n_smallest_number,prompt_1,82,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",10000,0.022192399948835373,0.032948356005363166,0.08810340007767081,N/A
p3_find_n_smallest_number,prompt_1,82,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",100000,0.34245800017379224,0.739537556997966,1.0907712997868657,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [tup[1] for tup in lst[:arg2]]']",1000,0.011462599970400333,0.012027232011314481,0.01382009987719357,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [tup[1] for tup in lst[:arg2]]']",10000,0.17533400002866983,0.182916358995717,0.19234289997257292,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [tup[1] for tup in lst[:arg2]]']",100000,2.815239799907431,2.9148064890061507,3.3505893000401556,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_list = sorted(arg1)\n    indexes = []\n    for num in sorted_list[:arg2]:\n        indexes.append(index_dict[num])\n    return indexes']",1000,0.005785099929198623,0.0061166199971921745,0.010072000091895461,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_list = sorted(arg1)\n    indexes = []\n    for num in sorted_list[:arg2]:\n        indexes.append(index_dict[num])\n    return indexes']",10000,0.10972429998219013,0.11180022299289703,0.1164284001570195,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_list = sorted(arg1)\n    indexes = []\n    for num in sorted_list[:arg2]:\n        indexes.append(index_dict[num])\n    return indexes']",100000,1.6409681998193264,1.6798098379885777,1.758748299907893,N/A
p3_find_n_smallest_number,prompt_1,85,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid value of arg2, should be less than or equal to length of arg1'\n    dict1 = {}\n    for i, val in enumerate(arg1):\n        dict1[i] = val\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    index_list = []\n    for i in range(arg2):\n        index_list.append(k_smallest[i][0])\n    return index_list""]",1000,0.010192800080403686,0.010706498015206307,0.014290400082245469,N/A
p3_find_n_smallest_number,prompt_1,85,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid value of arg2, should be less than or equal to length of arg1'\n    dict1 = {}\n    for i, val in enumerate(arg1):\n        dict1[i] = val\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    index_list = []\n    for i in range(arg2):\n        index_list.append(k_smallest[i][0])\n    return index_list""]",10000,0.16766500007361174,0.17526266501285137,0.18559270002879202,N/A
p3_find_n_smallest_number,prompt_1,85,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid value of arg2, should be less than or equal to length of arg1'\n    dict1 = {}\n    for i, val in enumerate(arg1):\n        dict1[i] = val\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    index_list = []\n    for i in range(arg2):\n        index_list.append(k_smallest[i][0])\n    return index_list""]",100000,2.5887710999231786,2.6579502669977955,2.764851100044325,N/A
p3_find_n_smallest_number,prompt_1,86,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    arr_with_index = [(val, idx) for idx, val in enumerate(arr)]\n    arr_with_index.sort()\n    k_smallest = arr_with_index[:k]\n    k_smallest.sort(key=lambda x: x[1])\n    return [x[1] for x in k_smallest]']",1000,0.011626499937847257,0.012250613991636784,0.016316600143909454,N/A
p3_find_n_smallest_number,prompt_1,86,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    arr_with_index = [(val, idx) for idx, val in enumerate(arr)]\n    arr_with_index.sort()\n    k_smallest = arr_with_index[:k]\n    k_smallest.sort(key=lambda x: x[1])\n    return [x[1] for x in k_smallest]']",10000,0.17851169989444315,0.18615968700964003,0.20271759992465377,N/A
p3_find_n_smallest_number,prompt_1,86,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    k = arg2\n    arr_with_index = [(val, idx) for idx, val in enumerate(arr)]\n    arr_with_index.sort()\n    k_smallest = arr_with_index[:k]\n    k_smallest.sort(key=lambda x: x[1])\n    return [x[1] for x in k_smallest]']",100000,2.84713439992629,2.933878125997726,3.0312040999997407,N/A
p3_find_n_smallest_number,prompt_1,87,"['def funcImp(arg1, arg2):\n    index_value_dict = {index: value for index, value in enumerate(arg1)}\n    sorted_dict = sorted(index_value_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.010128699941560626,0.01061704899650067,0.013311099959537387,N/A
p3_find_n_smallest_number,prompt_1,87,"['def funcImp(arg1, arg2):\n    index_value_dict = {index: value for index, value in enumerate(arg1)}\n    sorted_dict = sorted(index_value_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.16315549984574318,0.17183897400042042,0.17977420007809997,N/A
p3_find_n_smallest_number,prompt_1,87,"['def funcImp(arg1, arg2):\n    index_value_dict = {index: value for index, value in enumerate(arg1)}\n    sorted_dict = sorted(index_value_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.566767399897799,2.6456003430043347,2.989607499912381,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_idx']",1000,0.007084999931976199,0.007521690013818443,0.011596400057896972,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_idx']",10000,0.10990399983711541,0.11310911499429493,0.1511335999239236,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_idx']",100000,1.5797198999207467,1.610857912984211,1.6714372001588345,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        indices[num] = i\n    sorted_nums = sorted(arg1)[:arg2]\n    result = [indices[num] for num in sorted_nums]\n    return result']",1000,0.005857399897649884,0.006175584997981787,0.006632500095292926,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        indices[num] = i\n    sorted_nums = sorted(arg1)[:arg2]\n    result = [indices[num] for num in sorted_nums]\n    return result']",10000,0.10804260009899735,0.11138181100366637,0.11840469995513558,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        indices[num] = i\n    sorted_nums = sorted(arg1)[:arg2]\n    result = [indices[num] for num in sorted_nums]\n    return result']",100000,1.6508028998505324,1.6933996520005166,1.744173299986869,N/A
p3_find_n_smallest_number,prompt_1,90,"['def funcImp(arg1, arg2):\n    indexed_list = zip(range(len(arg1)), arg1)\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])[:arg2]\n    sorted_list.sort()\n    result = [x[0] for x in sorted_list]\n    return result']",1000,0.008144499966874719,0.008603917988948525,0.011241199914366007,N/A
p3_find_n_smallest_number,prompt_1,90,"['def funcImp(arg1, arg2):\n    indexed_list = zip(range(len(arg1)), arg1)\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])[:arg2]\n    sorted_list.sort()\n    result = [x[0] for x in sorted_list]\n    return result']",10000,0.1397620001807809,0.14481270799413323,0.15509559982456267,N/A
p3_find_n_smallest_number,prompt_1,90,"['def funcImp(arg1, arg2):\n    indexed_list = zip(range(len(arg1)), arg1)\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])[:arg2]\n    sorted_list.sort()\n    result = [x[0] for x in sorted_list]\n    return result']",100000,2.060645499965176,2.107769625999499,2.166692500002682,N/A
p3_find_n_smallest_number,prompt_1,91,"['def funcImp(arg1, arg2):\n    sortedList = sorted(arg1)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(sortedList[i]))\n    return indexes']",1000,0.003225899999961257,0.0034786429861560463,0.0042624999769032,N/A
p3_find_n_smallest_number,prompt_1,91,"['def funcImp(arg1, arg2):\n    sortedList = sorted(arg1)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(sortedList[i]))\n    return indexes']",10000,0.08300750004127622,0.08667383999563753,0.09495219984091818,N/A
p3_find_n_smallest_number,prompt_1,91,"['def funcImp(arg1, arg2):\n    sortedList = sorted(arg1)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(sortedList[i]))\n    return indexes']",100000,1.1989466999657452,1.214326252990868,1.2391801001504064,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.005797199904918671,0.006122364995535463,0.00682709994725883,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.10687829996459186,0.10954097000183538,0.1273297998122871,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,1.373339300043881,1.3971888380101882,1.4250678999815136,N/A
p3_find_n_smallest_number,prompt_1,93,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    result = []\n    for num in k_smallest:\n        result += index_dict[num]\n    return sorted(result)']",1000,0.00836510001681745,0.008671826010104269,0.009236100129783154,N/A
p3_find_n_smallest_number,prompt_1,93,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    result = []\n    for num in k_smallest:\n        result += index_dict[num]\n    return sorted(result)']",10000,0.13515390013344586,0.1383016059966758,0.14746690005995333,N/A
p3_find_n_smallest_number,prompt_1,93,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    result = []\n    for num in k_smallest:\n        result += index_dict[num]\n    return sorted(result)']",100000,2.134020400000736,2.1886648499919104,2.2626708999741822,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indexes = sorted_indexes[:k]\n    return k_indexes']",1000,0.007089400198310614,0.007481375001370907,0.00866719987243414,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indexes = sorted_indexes[:k]\n    return k_indexes']",10000,0.11306809983216226,0.11567385101923719,0.11911460012197495,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indexes = sorted_indexes[:k]\n    return k_indexes']",100000,1.5708209001459181,1.604534376002848,1.6846271001268178,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",1000,0.007053999928757548,0.007483539001550525,0.00933720008470118,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",10000,0.1106552998535335,0.11366367798764258,0.12200449989177287,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_arg1 = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    for i in range(arg2):\n        indexes.append(sorted_arg1[i])\n    return indexes']",100000,1.585133400047198,1.619655038996134,1.6820821999572217,N/A
p3_find_n_smallest_number,prompt_1,96,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [sorted_arr[i][0] for i in range(arg2)]']",1000,0.008284500101581216,0.00877064999891445,0.010933199897408485,N/A
p3_find_n_smallest_number,prompt_1,96,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [sorted_arr[i][0] for i in range(arg2)]']",10000,0.13821620005182922,0.1420371530065313,0.1528701998759061,N/A
p3_find_n_smallest_number,prompt_1,96,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [sorted_arr[i][0] for i in range(arg2)]']",100000,2.055529800010845,2.105779474002775,2.1636467000935227,N/A
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        pivot = random.choice(arr)\n        lows = [num for num in arr if num < pivot]\n        highs = [num for num in arr if num > pivot]\n        pivots = [num for num in arr if num == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == arg2:\n            break\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        pivot = random.choice(arr)\n        lows = [num for num in arr if num < pivot]\n        highs = [num for num in arr if num > pivot]\n        pivots = [num for num in arr if num == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == arg2:\n            break\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        pivot = random.choice(arr)\n        lows = [num for num in arr if num < pivot]\n        highs = [num for num in arr if num > pivot]\n        pivots = [num for num in arr if num == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == arg2:\n            break\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    k_smallest = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            k_smallest_indices.append(i)\n    return k_smallest_indices']",1000,0.005859700031578541,0.006260345987975598,0.007161800051108003,N/A
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    k_smallest = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            k_smallest_indices.append(i)\n    return k_smallest_indices']",10000,0.10628900001756847,0.10920079998904839,0.1124143002089113,N/A
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    k_smallest = sorted(arg1)[:arg2]\n    k_smallest_indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            k_smallest_indices.append(i)\n    return k_smallest_indices']",100000,1.3808601999189705,1.402634867017623,1.4378907999489456,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        value, index = heapq.heappop(heap)\n        indexes.append(index)\n    return indexes']",1000,0.0049848000053316355,0.005211306014098227,0.005635200068354607,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        value, index = heapq.heappop(heap)\n        indexes.append(index)\n    return indexes']",10000,0.06493750005029142,0.06656449598493054,0.06858540000393987,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        value, index = heapq.heappop(heap)\n        indexes.append(index)\n    return indexes']",100000,0.7477164999581873,0.7729685489996336,0.8311026999726892,N/A
p3_find_n_smallest_number,prompt_1,100,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the index of the k smallest numbers in an unsorted array.\n    \n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer representing the number of smallest values to return\n    \n    Returns:\n    a list of the indexes of the k smallest values\n    """"""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])[:arg2]\n    k_indexes = [x[0] for x in sorted_dict]\n    return k_indexes']",1000,0.01006020000204444,0.010620329012162984,0.012525300029665232,N/A
p3_find_n_smallest_number,prompt_1,100,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the index of the k smallest numbers in an unsorted array.\n    \n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer representing the number of smallest values to return\n    \n    Returns:\n    a list of the indexes of the k smallest values\n    """"""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])[:arg2]\n    k_indexes = [x[0] for x in sorted_dict]\n    return k_indexes']",10000,0.16127729997970164,0.1675546639971435,0.17758829984813929,N/A
p3_find_n_smallest_number,prompt_1,100,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the index of the k smallest numbers in an unsorted array.\n    \n    Arguments:\n    arg1 -- a list of integers\n    arg2 -- an integer representing the number of smallest values to return\n    \n    Returns:\n    a list of the indexes of the k smallest values\n    """"""\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        num_dict[i] = num\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])[:arg2]\n    k_indexes = [x[0] for x in sorted_dict]\n    return k_indexes']",100000,2.497546800179407,2.5831344769941644,2.755925100063905,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arr[i], i))\n    result = []\n    for _, i in heap:\n        result.append(i)\n    return result']",1000,0.0029722999315708876,0.00311522601172328,0.0032761001493781805,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arr[i], i))\n    result = []\n    for _, i in heap:\n        result.append(i)\n    return result']",10000,0.028957700124010444,0.030034487009979783,0.0319931001868099,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arr[i], i))\n    result = []\n    for _, i in heap:\n        result.append(i)\n    return result']",100000,0.2926817999687046,0.29740505900699643,0.31491319998167455,N/A
p3_find_n_smallest_number,prompt_2,2,"['def funcImp(arg1, arg2):\n\n    def quickSelect(arr, k):\n        pivot = arr[len(arr) // 2]\n        lows = [el for el in arr if el < pivot]\n        highs = [el for el in arr if el > pivot]\n        pivots = [el for el in arr if el == pivot]\n        if k < len(lows):\n            return quickSelect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickSelect(highs, k - len(lows) - len(pivots))\n    kthsmallest = quickSelect(arg1, arg2 - 1)\n    indexes = [idx for idx, val in enumerate(arg1) if val <= kthsmallest]\n    return indexes[:arg2]']",1000,0.009162100031971931,0.009722198988310993,0.011567699955776334,N/A
p3_find_n_smallest_number,prompt_2,2,"['def funcImp(arg1, arg2):\n\n    def quickSelect(arr, k):\n        pivot = arr[len(arr) // 2]\n        lows = [el for el in arr if el < pivot]\n        highs = [el for el in arr if el > pivot]\n        pivots = [el for el in arr if el == pivot]\n        if k < len(lows):\n            return quickSelect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickSelect(highs, k - len(lows) - len(pivots))\n    kthsmallest = quickSelect(arg1, arg2 - 1)\n    indexes = [idx for idx, val in enumerate(arg1) if val <= kthsmallest]\n    return indexes[:arg2]']",10000,0.14319069986231625,0.1458601070055738,0.1487560998648405,N/A
p3_find_n_smallest_number,prompt_2,2,"['def funcImp(arg1, arg2):\n\n    def quickSelect(arr, k):\n        pivot = arr[len(arr) // 2]\n        lows = [el for el in arr if el < pivot]\n        highs = [el for el in arr if el > pivot]\n        pivots = [el for el in arr if el == pivot]\n        if k < len(lows):\n            return quickSelect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickSelect(highs, k - len(lows) - len(pivots))\n    kthsmallest = quickSelect(arg1, arg2 - 1)\n    indexes = [idx for idx, val in enumerate(arg1) if val <= kthsmallest]\n    return indexes[:arg2]']",100000,1.056501999963075,1.0730929590039886,1.1006112999748439,N/A
p3_find_n_smallest_number,prompt_2,3,"['def funcImp(arg1, arg2):\n    import heapq\n    res = heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))\n    indexes = [idx for num, idx in res]\n    return indexes']",1000,0.005721299909055233,0.006028474015183746,0.00918490020558238,N/A
p3_find_n_smallest_number,prompt_2,3,"['def funcImp(arg1, arg2):\n    import heapq\n    res = heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))\n    indexes = [idx for num, idx in res]\n    return indexes']",10000,0.05373789998702705,0.05568380099488422,0.0668785001616925,N/A
p3_find_n_smallest_number,prompt_2,3,"['def funcImp(arg1, arg2):\n    import heapq\n    res = heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))\n    indexes = [idx for num, idx in res]\n    return indexes']",100000,0.547541500069201,0.5577102819923312,0.5793432001955807,N/A
p3_find_n_smallest_number,prompt_2,4,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        if not arr:\n            return []\n        else:\n            pivot = arr[0]\n            left = [x for x in arr if x < pivot]\n            right = [x for x in arr if x > pivot]\n            count = len(arr) - len(left) - len(right)\n            if k < len(left):\n                return quickselect(left, k)\n            elif k < len(left) + count:\n                return pivot\n            else:\n                return quickselect(right, k - len(left) - count)\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",1000,0.006110199959948659,0.006392284992616623,0.007918999996036291,N/A
p3_find_n_smallest_number,prompt_2,4,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        if not arr:\n            return []\n        else:\n            pivot = arr[0]\n            left = [x for x in arr if x < pivot]\n            right = [x for x in arr if x > pivot]\n            count = len(arr) - len(left) - len(right)\n            if k < len(left):\n                return quickselect(left, k)\n            elif k < len(left) + count:\n                return pivot\n            else:\n                return quickselect(right, k - len(left) - count)\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",10000,0.07288319990038872,0.07472072598291561,0.07728119986131787,N/A
p3_find_n_smallest_number,prompt_2,4,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, k):\n        if not arr:\n            return []\n        else:\n            pivot = arr[0]\n            left = [x for x in arr if x < pivot]\n            right = [x for x in arr if x > pivot]\n            count = len(arr) - len(left) - len(right)\n            if k < len(left):\n                return quickselect(left, k)\n            elif k < len(left) + count:\n                return pivot\n            else:\n                return quickselect(right, k - len(left) - count)\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",100000,0.8596111000515521,0.8735179810016416,0.9277081000618637,N/A
p3_find_n_smallest_number,prompt_2,5,"['def funcImp(arg1, arg2):\n    indexed_elements = [(i, v) for i, v in enumerate(arg1)]\n    sorted_elements = sorted(indexed_elements, key=lambda x: x[1])\n    k_smallest_elements = sorted_elements[:arg2]\n    return [i for i, _ in k_smallest_elements]']",1000,0.009606000036001205,0.010154846985824407,0.013832899974659085,N/A
p3_find_n_smallest_number,prompt_2,5,"['def funcImp(arg1, arg2):\n    indexed_elements = [(i, v) for i, v in enumerate(arg1)]\n    sorted_elements = sorted(indexed_elements, key=lambda x: x[1])\n    k_smallest_elements = sorted_elements[:arg2]\n    return [i for i, _ in k_smallest_elements]']",10000,0.15153919998556376,0.15597240498522297,0.16051570000126958,N/A
p3_find_n_smallest_number,prompt_2,5,"['def funcImp(arg1, arg2):\n    indexed_elements = [(i, v) for i, v in enumerate(arg1)]\n    sorted_elements = sorted(indexed_elements, key=lambda x: x[1])\n    k_smallest_elements = sorted_elements[:arg2]\n    return [i for i, _ in k_smallest_elements]']",100000,2.2444332998711616,2.2940721779945306,2.4897743999026716,N/A
p3_find_n_smallest_number,prompt_2,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        raise ValueError('Invalid value for arg2')\n    if n == 0:\n        return []\n    if n == 1:\n        return [(0, arg1[0])]\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    result = [(heapq.heappop(heap)[1], arg1[i]) for i in range(arg2)]\n    return sorted(result)""]",1000,0.0030620000325143337,0.0032455549878068267,0.0035308999940752983,N/A
p3_find_n_smallest_number,prompt_2,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        raise ValueError('Invalid value for arg2')\n    if n == 0:\n        return []\n    if n == 1:\n        return [(0, arg1[0])]\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    result = [(heapq.heappop(heap)[1], arg1[i]) for i in range(arg2)]\n    return sorted(result)""]",10000,0.029650700045749545,0.03093474398832768,0.0390045999083668,N/A
p3_find_n_smallest_number,prompt_2,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 <= 0 or arg2 > n:\n        raise ValueError('Invalid value for arg2')\n    if n == 0:\n        return []\n    if n == 1:\n        return [(0, arg1[0])]\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, n):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    result = [(heapq.heappop(heap)[1], arg1[i]) for i in range(arg2)]\n    return sorted(result)""]",100000,0.30220480007119477,0.3070430699945427,0.3159481999464333,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return sorted(heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1]))']",1000,0.004532699938863516,0.00477422600844875,0.006132900016382337,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return sorted(heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1]))']",10000,0.042099400190636516,0.043364946998190136,0.04633600008673966,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return sorted(heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1]))']",100000,0.4354121000505984,0.44165275698062034,0.4585276001598686,N/A
p3_find_n_smallest_number,prompt_2,8,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return indexes']",1000,0.007011699955910444,0.007433634020853788,0.009031199850142002,N/A
p3_find_n_smallest_number,prompt_2,8,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return indexes']",10000,0.11011420004069805,0.1127874470106326,0.11763669992797077,N/A
p3_find_n_smallest_number,prompt_2,8,"['def funcImp(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return indexes']",100000,1.5898359999991953,1.6144997610012068,1.68192210001871,N/A
p3_find_n_smallest_number,prompt_2,9,"['def funcImp(arg1, arg2):\n    k_smallest = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(k_smallest)\n    k_smallest = [heapq.heappop(k_smallest) for _ in range(arg2)]\n    return sorted((idx for num, idx in k_smallest))']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,9,"['def funcImp(arg1, arg2):\n    k_smallest = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(k_smallest)\n    k_smallest = [heapq.heappop(k_smallest) for _ in range(arg2)]\n    return sorted((idx for num, idx in k_smallest))']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,9,"['def funcImp(arg1, arg2):\n    k_smallest = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(k_smallest)\n    k_smallest = [heapq.heappop(k_smallest) for _ in range(arg2)]\n    return sorted((idx for num, idx in k_smallest))']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    result = [heapq.heappop(heap) for _ in range(len(heap))]\n    result.sort(key=lambda x: x[1])\n    return [x[1] for x in result]']",1000,0.004301399923861027,0.004443818000145257,0.004729299806058407,N/A
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    result = [heapq.heappop(heap) for _ in range(len(heap))]\n    result.sort(key=lambda x: x[1])\n    return [x[1] for x in result]']",10000,0.04038530006073415,0.04170980500988662,0.04550020000897348,N/A
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    result = [heapq.heappop(heap) for _ in range(len(heap))]\n    result.sort(key=lambda x: x[1])\n    return [x[1] for x in result]']",100000,0.40620860015042126,0.413002442009747,0.43429429992102087,N/A
p3_find_n_smallest_number,prompt_2,11,"['def funcImp(arg1, arg2):\n    idx = list(range(len(arg1)))\n    idx.sort(key=lambda i: arg1[i])\n    return idx[:arg2]']",1000,0.007033499889075756,0.00743980199797079,0.008182500023394823,N/A
p3_find_n_smallest_number,prompt_2,11,"['def funcImp(arg1, arg2):\n    idx = list(range(len(arg1)))\n    idx.sort(key=lambda i: arg1[i])\n    return idx[:arg2]']",10000,0.11127359978854656,0.11327222798252479,0.12152200005948544,N/A
p3_find_n_smallest_number,prompt_2,11,"['def funcImp(arg1, arg2):\n    idx = list(range(len(arg1)))\n    idx.sort(key=lambda i: arg1[i])\n    return idx[:arg2]']",100000,1.5936083998531103,1.6210370920109562,1.6797960998956114,N/A
p3_find_n_smallest_number,prompt_2,12,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    indices = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    indices.sort()\n    return indices""]",1000,0.0022061998024582863,0.002364223999902606,0.007724799914285541,N/A
p3_find_n_smallest_number,prompt_2,12,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    indices = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    indices.sort()\n    return indices""]",10000,0.023118600016459823,0.033643767004832625,0.09115079999901354,N/A
p3_find_n_smallest_number,prompt_2,12,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    indices = []\n    for i in range(arg2):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    indices.sort()\n    return indices""]",100000,0.3342128999065608,0.743515469005797,1.0841202998999506,N/A
p3_find_n_smallest_number,prompt_2,13,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    smallest_indices = []\n    for j in range(arg2):\n        smallest_indices.append(dict_values[sorted_list[j]])\n    return smallest_indices']",1000,0.005679799942299724,0.0060321829887107015,0.006990899797528982,N/A
p3_find_n_smallest_number,prompt_2,13,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    smallest_indices = []\n    for j in range(arg2):\n        smallest_indices.append(dict_values[sorted_list[j]])\n    return smallest_indices']",10000,0.1055633001960814,0.10883133800700306,0.11316390009596944,N/A
p3_find_n_smallest_number,prompt_2,13,"['def funcImp(arg1, arg2):\n    dict_values = {}\n    for i in range(len(arg1)):\n        dict_values[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    smallest_indices = []\n    for j in range(arg2):\n        smallest_indices.append(dict_values[sorted_list[j]])\n    return smallest_indices']",100000,1.618088599992916,1.654901437999215,1.6993497000075877,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(heapq.heappop(heap)))\n    return indexes']",1000,0.006947599817067385,0.007268553001340479,0.008416800061240792,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(heapq.heappop(heap)))\n    return indexes']",10000,0.05398950004018843,0.05600903799757361,0.06342860008589923,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(arg1.index(heapq.heappop(heap)))\n    return indexes']",100000,0.8083448000252247,0.8292840090068058,0.8664579999167472,N/A
p3_find_n_smallest_number,prompt_2,15,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    pivot = arg1[random.randrange(n)]\n    lows = [ele for ele in arg1 if ele < pivot]\n    highs = [ele for ele in arg1 if ele > pivot]\n    pivots = [ele for ele in arg1 if ele == pivot]\n    k = arg2 - len(lows)\n    m = len(pivots)\n    if k < m:\n        return [arg1.index(pivot)] * m + funcImp(highs, k)\n    else:\n        return sorted([arg1.index(ele) for ele in lows] + [arg1.index(ele) for ele in pivots] + funcImp(highs, k - m))']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,15,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    pivot = arg1[random.randrange(n)]\n    lows = [ele for ele in arg1 if ele < pivot]\n    highs = [ele for ele in arg1 if ele > pivot]\n    pivots = [ele for ele in arg1 if ele == pivot]\n    k = arg2 - len(lows)\n    m = len(pivots)\n    if k < m:\n        return [arg1.index(pivot)] * m + funcImp(highs, k)\n    else:\n        return sorted([arg1.index(ele) for ele in lows] + [arg1.index(ele) for ele in pivots] + funcImp(highs, k - m))']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,15,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return sorted(range(n), key=lambda i: arg1[i])\n    pivot = arg1[random.randrange(n)]\n    lows = [ele for ele in arg1 if ele < pivot]\n    highs = [ele for ele in arg1 if ele > pivot]\n    pivots = [ele for ele in arg1 if ele == pivot]\n    k = arg2 - len(lows)\n    m = len(pivots)\n    if k < m:\n        return [arg1.index(pivot)] * m + funcImp(highs, k)\n    else:\n        return sorted([arg1.index(ele) for ele in lows] + [arg1.index(ele) for ele in pivots] + funcImp(highs, k - m))']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,16,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_idx = (left + right) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return k\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef k_smallest_indexes(arr, k):\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arr, 0, len(arr) - 1, i)\n        indexes.append(idx)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,0.02901989989914,0.03013106998289004,0.0316941998898983,N/A
p3_find_n_smallest_number,prompt_2,16,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_idx = (left + right) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return k\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef k_smallest_indexes(arr, k):\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arr, 0, len(arr) - 1, i)\n        indexes.append(idx)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,0.3018251999747008,0.31084699200233445,0.33775289985351264,N/A
p3_find_n_smallest_number,prompt_2,16,"['def partition(arr, left, right, pivot_idx):\n    pivot_val = arr[pivot_idx]\n    arr[pivot_idx], arr[right] = (arr[right], arr[pivot_idx])\n    store_idx = left\n    for i in range(left, right):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_idx] = (arr[store_idx], arr[i])\n            store_idx += 1\n    arr[right], arr[store_idx] = (arr[store_idx], arr[right])\n    return store_idx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_idx = (left + right) // 2\n    pivot_idx = partition(arr, left, right, pivot_idx)\n    if k == pivot_idx:\n        return k\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef k_smallest_indexes(arr, k):\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arr, 0, len(arr) - 1, i)\n        indexes.append(idx)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,3.523545099887997,3.7251337009924463,4.296612000092864,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",1000,0.0071125999093055725,0.007572876987978816,0.0130474001634866,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",10000,0.11019150004722178,0.11450168899726122,0.13300510006956756,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",100000,1.5990927999373525,1.6634664489980786,1.8773477000650018,N/A
p3_find_n_smallest_number,prompt_2,18,"['def partition(arr, left, right, pivot):\n    pivotVal = arr[pivot]\n    arr[pivot], arr[right] = (arr[right], arr[pivot])\n    storeIdx = left\n    for i in range(left, right):\n        if arr[i] < pivotVal:\n            arr[i], arr[storeIdx] = (arr[storeIdx], arr[i])\n            storeIdx += 1\n    arr[right], arr[storeIdx] = (arr[storeIdx], arr[right])\n    return storeIdx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot = random.randint(left, right)\n    pivot = partition(arr, left, right, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, left, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    kthSmallest = arg1[quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)]\n    indexes = [i for i, num in enumerate(arg1) if num <= kthSmallest]\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,18,"['def partition(arr, left, right, pivot):\n    pivotVal = arr[pivot]\n    arr[pivot], arr[right] = (arr[right], arr[pivot])\n    storeIdx = left\n    for i in range(left, right):\n        if arr[i] < pivotVal:\n            arr[i], arr[storeIdx] = (arr[storeIdx], arr[i])\n            storeIdx += 1\n    arr[right], arr[storeIdx] = (arr[storeIdx], arr[right])\n    return storeIdx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot = random.randint(left, right)\n    pivot = partition(arr, left, right, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, left, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    kthSmallest = arg1[quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)]\n    indexes = [i for i, num in enumerate(arg1) if num <= kthSmallest]\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,18,"['def partition(arr, left, right, pivot):\n    pivotVal = arr[pivot]\n    arr[pivot], arr[right] = (arr[right], arr[pivot])\n    storeIdx = left\n    for i in range(left, right):\n        if arr[i] < pivotVal:\n            arr[i], arr[storeIdx] = (arr[storeIdx], arr[i])\n            storeIdx += 1\n    arr[right], arr[storeIdx] = (arr[storeIdx], arr[right])\n    return storeIdx\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot = random.randint(left, right)\n    pivot = partition(arr, left, right, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, left, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    kthSmallest = arg1[quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)]\n    indexes = [i for i, num in enumerate(arg1) if num <= kthSmallest]\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,19,"['def find_k_smallest_indexes(nums, k):\n    if k < 1 or k > len(nums):\n        return []\n    indices = range(len(nums))\n    k_indices = sorted(indices, key=lambda i: nums[i])[:k]\n    return k_indices']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,19,"['def find_k_smallest_indexes(nums, k):\n    if k < 1 or k > len(nums):\n        return []\n    indices = range(len(nums))\n    k_indices = sorted(indices, key=lambda i: nums[i])[:k]\n    return k_indices']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,19,"['def find_k_smallest_indexes(nums, k):\n    if k < 1 or k > len(nums):\n        return []\n    indices = range(len(nums))\n    k_indices = sorted(indices, key=lambda i: nums[i])[:k]\n    return k_indices']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    arr_tuples = [(arr[i], i) for i in range(len(arr))]\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return arr[left][0]\n        pivot_index = random.randint(left, right)\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k == pivot_index:\n            return arr[k][0]\n        elif k < pivot_index:\n            return quick_select(arr, left, pivot_index - 1, k)\n        else:\n            return quick_select(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index][0]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i][0] < pivot_value:\n                arr[store_index], arr[i] = (arr[i], arr[store_index])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n    kth_smallest_val = quick_select(arr_tuples, 0, len(arr_tuples) - 1, k)\n    indexes = [arr_tuples[i][1] for i in range(len(arr_tuples)) if arr_tuples[i][0] <= kth_smallest_val][:k]\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    arr_tuples = [(arr[i], i) for i in range(len(arr))]\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return arr[left][0]\n        pivot_index = random.randint(left, right)\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k == pivot_index:\n            return arr[k][0]\n        elif k < pivot_index:\n            return quick_select(arr, left, pivot_index - 1, k)\n        else:\n            return quick_select(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index][0]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i][0] < pivot_value:\n                arr[store_index], arr[i] = (arr[i], arr[store_index])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n    kth_smallest_val = quick_select(arr_tuples, 0, len(arr_tuples) - 1, k)\n    indexes = [arr_tuples[i][1] for i in range(len(arr_tuples)) if arr_tuples[i][0] <= kth_smallest_val][:k]\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,20,"['def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    arr_tuples = [(arr[i], i) for i in range(len(arr))]\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return arr[left][0]\n        pivot_index = random.randint(left, right)\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k == pivot_index:\n            return arr[k][0]\n        elif k < pivot_index:\n            return quick_select(arr, left, pivot_index - 1, k)\n        else:\n            return quick_select(arr, pivot_index + 1, right, k)\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index][0]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i][0] < pivot_value:\n                arr[store_index], arr[i] = (arr[i], arr[store_index])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n    kth_smallest_val = quick_select(arr_tuples, 0, len(arr_tuples) - 1, k)\n    indexes = [arr_tuples[i][1] for i in range(len(arr_tuples)) if arr_tuples[i][0] <= kth_smallest_val][:k]\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,21,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    """"""\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",1000,0.007199000101536512,0.0076763479853980245,0.01060079992748797,N/A
p3_find_n_smallest_number,prompt_2,21,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    """"""\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",10000,0.11002359981648624,0.11592981798574328,0.12799709988757968,N/A
p3_find_n_smallest_number,prompt_2,21,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    """"""\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",100000,1.6036828001961112,1.6699470430030487,1.9095246000215411,N/A
p3_find_n_smallest_number,prompt_2,22,"['def funcImp(arg1, k):\n    idxs = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return idxs[:k]']",1000,0.007012999849393964,0.007512437989935279,0.008830300066620111,N/A
p3_find_n_smallest_number,prompt_2,22,"['def funcImp(arg1, k):\n    idxs = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return idxs[:k]']",10000,0.11019759997725487,0.11396093898452818,0.12975469999946654,N/A
p3_find_n_smallest_number,prompt_2,22,"['def funcImp(arg1, k):\n    idxs = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return idxs[:k]']",100000,1.6028865999542177,1.6666688219900243,1.8923680998850614,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[l]\n        i, j = (l + 1, r)\n        while i <= j:\n            if arr[i] <= pivot:\n                i += 1\n            elif arr[j] >= pivot:\n                j -= 1\n            else:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        arr[l], arr[j] = (arr[j], arr[l])\n        return j\n    k = arg2\n    left, right = (0, len(arg1) - 1)\n    while True:\n        pivot_idx = partition(arg1, left, right)\n        if pivot_idx == k - 1:\n            break\n        elif pivot_idx < k - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n    smallest = arg1[:k]\n    smallest_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return smallest_idx']",1000,0.021910900017246604,0.022995691001415252,0.024610700085759163,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[l]\n        i, j = (l + 1, r)\n        while i <= j:\n            if arr[i] <= pivot:\n                i += 1\n            elif arr[j] >= pivot:\n                j -= 1\n            else:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        arr[l], arr[j] = (arr[j], arr[l])\n        return j\n    k = arg2\n    left, right = (0, len(arg1) - 1)\n    while True:\n        pivot_idx = partition(arg1, left, right)\n        if pivot_idx == k - 1:\n            break\n        elif pivot_idx < k - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n    smallest = arg1[:k]\n    smallest_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return smallest_idx']",10000,0.2638872000388801,0.27288694399408997,0.2988973001483828,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[l]\n        i, j = (l + 1, r)\n        while i <= j:\n            if arr[i] <= pivot:\n                i += 1\n            elif arr[j] >= pivot:\n                j -= 1\n            else:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n                j -= 1\n        arr[l], arr[j] = (arr[j], arr[l])\n        return j\n    k = arg2\n    left, right = (0, len(arg1) - 1)\n    while True:\n        pivot_idx = partition(arg1, left, right)\n        if pivot_idx == k - 1:\n            break\n        elif pivot_idx < k - 1:\n            left = pivot_idx + 1\n        else:\n            right = pivot_idx - 1\n    smallest = arg1[:k]\n    smallest_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return smallest_idx']",100000,3.2096394000109285,3.280578620007727,3.5095065000932664,N/A
p3_find_n_smallest_number,prompt_2,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in sorted_list]\n    return indexes']",1000,0.005907400045543909,0.00616951297968626,0.007112100021913648,N/A
p3_find_n_smallest_number,prompt_2,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in sorted_list]\n    return indexes']",10000,0.10513209993951023,0.10822892401134596,0.11617169994860888,N/A
p3_find_n_smallest_number,prompt_2,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in sorted_list]\n    return indexes']",100000,1.3780024000443518,1.4061747550033032,1.518029399914667,N/A
p3_find_n_smallest_number,prompt_2,25,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    smallest_nums = sorted(arg1)[:arg2]\n    index_list = [index_dict[num] for num in smallest_nums]\n    return index_list']",1000,0.005679300054907799,0.0060054129920899865,0.006649299990385771,N/A
p3_find_n_smallest_number,prompt_2,25,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    smallest_nums = sorted(arg1)[:arg2]\n    index_list = [index_dict[num] for num in smallest_nums]\n    return index_list']",10000,0.10612070001661777,0.11035765799693763,0.12706930004060268,N/A
p3_find_n_smallest_number,prompt_2,25,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    smallest_nums = sorted(arg1)[:arg2]\n    index_list = [index_dict[num] for num in smallest_nums]\n    return index_list']",100000,1.6402980000711977,1.6941518160002307,1.7819487999659032,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices']",1000,0.004544900031760335,0.0047997920052148405,0.005077000008895993,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices']",10000,0.04162589996121824,0.0437377249985002,0.05079169990494847,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices']",100000,0.4406660001259297,0.4519999629957601,0.4905216000042856,N/A
p3_find_n_smallest_number,prompt_2,27,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",1000,0.006995099829509854,0.007503791991621256,0.009942099917680025,N/A
p3_find_n_smallest_number,prompt_2,27,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",10000,0.11210789997130632,0.11753173000179232,0.12531910021789372,N/A
p3_find_n_smallest_number,prompt_2,27,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",100000,1.6120905000716448,1.6779220480052754,1.8933951000217348,N/A
p3_find_n_smallest_number,prompt_2,28,"['def funcImp(arg1, arg2):\n    d = {val: i for i, val in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(d[num])\n    return result']",1000,0.00564950006082654,0.0059083339897915725,0.006680399877950549,N/A
p3_find_n_smallest_number,prompt_2,28,"['def funcImp(arg1, arg2):\n    d = {val: i for i, val in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(d[num])\n    return result']",10000,0.10606179991737008,0.10995146799134091,0.12528289994224906,N/A
p3_find_n_smallest_number,prompt_2,28,"['def funcImp(arg1, arg2):\n    d = {val: i for i, val in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(d[num])\n    return result']",100000,1.6316861000377685,1.6798805949953384,1.7997668001335114,N/A
p3_find_n_smallest_number,prompt_2,29,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",1000,0.007192000048235059,0.007546996003948152,0.01039370009675622,N/A
p3_find_n_smallest_number,prompt_2,29,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",10000,0.11456699995324016,0.11751955901039764,0.12823569984175265,N/A
p3_find_n_smallest_number,prompt_2,29,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",100000,1.5851564998738468,1.6217693750048057,1.6977615000214428,N/A
p3_find_n_smallest_number,prompt_2,30,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arg1_len = len(arg1)\n    if k > arg1_len:\n        return 'k is greater than the length of the array'\n    index_lst = range(arg1_len)\n    sorted_index_lst = sorted(index_lst, key=lambda i: arg1[i])\n    return sorted_index_lst[:k]""]",1000,0.007009800057858229,0.007431738011073321,0.008938899962231517,N/A
p3_find_n_smallest_number,prompt_2,30,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arg1_len = len(arg1)\n    if k > arg1_len:\n        return 'k is greater than the length of the array'\n    index_lst = range(arg1_len)\n    sorted_index_lst = sorted(index_lst, key=lambda i: arg1[i])\n    return sorted_index_lst[:k]""]",10000,0.10983890015631914,0.11356693400070071,0.12208070000633597,N/A
p3_find_n_smallest_number,prompt_2,30,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arg1_len = len(arg1)\n    if k > arg1_len:\n        return 'k is greater than the length of the array'\n    index_lst = range(arg1_len)\n    sorted_index_lst = sorted(index_lst, key=lambda i: arg1[i])\n    return sorted_index_lst[:k]""]",100000,1.6019896999932826,1.6463557339925319,1.7458463001530617,N/A
p3_find_n_smallest_number,prompt_2,31,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.007015799870714545,0.007595551006961614,0.015562199987471104,N/A
p3_find_n_smallest_number,prompt_2,31,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.10885549988597631,0.1131413979944773,0.12279479997232556,N/A
p3_find_n_smallest_number,prompt_2,31,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.5947205999400467,1.6172009769896976,1.6769378001336008,N/A
p3_find_n_smallest_number,prompt_2,32,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(0, arg2):\n        indexes.append(arg1.index(sorted_list[i]))\n    return indexes']",1000,0.0031856000423431396,0.003497462992090732,0.00389840011484921,N/A
p3_find_n_smallest_number,prompt_2,32,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(0, arg2):\n        indexes.append(arg1.index(sorted_list[i]))\n    return indexes']",10000,0.08398959995247424,0.08636705200886353,0.09592210012488067,N/A
p3_find_n_smallest_number,prompt_2,32,"['def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(0, arg2):\n        indexes.append(arg1.index(sorted_list[i]))\n    return indexes']",100000,1.1823789000045508,1.2119173369952478,1.253526700194925,N/A
p3_find_n_smallest_number,prompt_2,33,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)[:arg2]\n    indices = [index_dict[num] for num in sorted_list]\n    return indices']",1000,0.0056634999345988035,0.006070222007110715,0.0071916000451892614,N/A
p3_find_n_smallest_number,prompt_2,33,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)[:arg2]\n    indices = [index_dict[num] for num in sorted_list]\n    return indices']",10000,0.10565409995615482,0.10893162099411711,0.11933390004560351,N/A
p3_find_n_smallest_number,prompt_2,33,"['def funcImp(arg1, arg2):\n    index_dict = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)[:arg2]\n    indices = [index_dict[num] for num in sorted_list]\n    return indices']",100000,1.6333320001140237,1.6550070379930548,1.7196586998179555,N/A
p3_find_n_smallest_number,prompt_2,34,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    else:\n        indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n        return indexes""]",1000,0.007029799977317452,0.00753465301124379,0.013629100052639842,N/A
p3_find_n_smallest_number,prompt_2,34,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    else:\n        indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n        return indexes""]",10000,0.1088570998981595,0.11273621098836883,0.11835819995030761,N/A
p3_find_n_smallest_number,prompt_2,34,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    else:\n        indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n        return indexes""]",100000,1.5771399999503046,1.613867309007328,1.6785552999936044,N/A
p3_find_n_smallest_number,prompt_2,35,"['def partition(array, pivot_index):\n    pivot_value = array[pivot_index]\n    array[pivot_index], array[-1] = (array[-1], array[pivot_index])\n    store_index = i = 0\n    while i < len(array) - 1:\n        if array[i] < pivot_value:\n            array[i], array[store_index] = (array[store_index], array[i])\n            store_index += 1\n        i += 1\n    array[store_index], array[-1] = (array[-1], array[store_index])\n    return store_index\n\ndef select(array, k):\n    left = 0\n    right = len(array) - 1\n    while True:\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(array, pivot_index)\n        if k == pivot_index:\n            return array[:k]\n        elif k < pivot_index:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n\ndef find_k_smallest_indexes(arg1, arg2):\n    k = arg2\n    if k > len(arg1) or k < 1:\n        return []\n    k_smallest = select(arg1, k)\n    k_smallest_indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indexes']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,35,"['def partition(array, pivot_index):\n    pivot_value = array[pivot_index]\n    array[pivot_index], array[-1] = (array[-1], array[pivot_index])\n    store_index = i = 0\n    while i < len(array) - 1:\n        if array[i] < pivot_value:\n            array[i], array[store_index] = (array[store_index], array[i])\n            store_index += 1\n        i += 1\n    array[store_index], array[-1] = (array[-1], array[store_index])\n    return store_index\n\ndef select(array, k):\n    left = 0\n    right = len(array) - 1\n    while True:\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(array, pivot_index)\n        if k == pivot_index:\n            return array[:k]\n        elif k < pivot_index:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n\ndef find_k_smallest_indexes(arg1, arg2):\n    k = arg2\n    if k > len(arg1) or k < 1:\n        return []\n    k_smallest = select(arg1, k)\n    k_smallest_indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indexes']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,35,"['def partition(array, pivot_index):\n    pivot_value = array[pivot_index]\n    array[pivot_index], array[-1] = (array[-1], array[pivot_index])\n    store_index = i = 0\n    while i < len(array) - 1:\n        if array[i] < pivot_value:\n            array[i], array[store_index] = (array[store_index], array[i])\n            store_index += 1\n        i += 1\n    array[store_index], array[-1] = (array[-1], array[store_index])\n    return store_index\n\ndef select(array, k):\n    left = 0\n    right = len(array) - 1\n    while True:\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(array, pivot_index)\n        if k == pivot_index:\n            return array[:k]\n        elif k < pivot_index:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1\n\ndef find_k_smallest_indexes(arg1, arg2):\n    k = arg2\n    if k > len(arg1) or k < 1:\n        return []\n    k_smallest = select(arg1, k)\n    k_smallest_indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indexes']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_2,36,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i in range(len(arg1)):\n        index_map[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_map[arg1[i]])\n    return result']",1000,0.0027759000658988953,0.002916671989951283,0.003128599841147661,N/A
p3_find_n_smallest_number,prompt_2,36,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i in range(len(arg1)):\n        index_map[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_map[arg1[i]])\n    return result']",10000,0.02762589999474585,0.02901490599149838,0.039802399929612875,N/A
p3_find_n_smallest_number,prompt_2,36,"['def funcImp(arg1, arg2):\n    index_map = {}\n    for i in range(len(arg1)):\n        index_map[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for i in range(arg2):\n        result.append(index_map[arg1[i]])\n    return result']",100000,0.6341470000334084,0.6770260099857114,0.7336539998650551,N/A
p3_find_n_smallest_number,prompt_2,37,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    l, r = (0, n - 1)\n    while l <= r:\n        pivot_index = partition(arr, l, r)\n        if pivot_index == k - 1:\n            return sorted(range(n), key=lambda i: arr[i])[:k]\n        elif pivot_index < k - 1:\n            l = pivot_index + 1\n        else:\n            r = pivot_index - 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",1000,2.0052795000374317,2.1241493589919993,2.174398999894038,N/A
p3_find_n_smallest_number,prompt_2,37,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    l, r = (0, n - 1)\n    while l <= r:\n        pivot_index = partition(arr, l, r)\n        if pivot_index == k - 1:\n            return sorted(range(n), key=lambda i: arr[i])[:k]\n        elif pivot_index < k - 1:\n            l = pivot_index + 1\n        else:\n            r = pivot_index - 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,37,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    l, r = (0, n - 1)\n    while l <= r:\n        pivot_index = partition(arr, l, r)\n        if pivot_index == k - 1:\n            return sorted(range(n), key=lambda i: arr[i])[:k]\n        elif pivot_index < k - 1:\n            l = pivot_index + 1\n        else:\n            r = pivot_index - 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,38,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    return [i for i, n in enumerate(arg1) if n in nsmallest(arg2, arg1)]']",1000,1.3244938000570983,1.3479021760146133,1.3768694000318646,N/A
p3_find_n_smallest_number,prompt_2,38,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    return [i for i, n in enumerate(arg1) if n in nsmallest(arg2, arg1)]']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,38,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    return [i for i, n in enumerate(arg1) if n in nsmallest(arg2, arg1)]']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indexes']",1000,0.0027191999834030867,0.002914003001060337,0.004051599884405732,N/A
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indexes']",10000,0.026287399930879474,0.02731612998293713,0.03292719996534288,N/A
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indexes']",100000,0.26392389996908605,0.2681206830102019,0.2797050999943167,N/A
p3_find_n_smallest_number,prompt_2,40,"['def funcImp(arg1, arg2):\n\n    def quickSelect(nums, k):\n        pivot = nums[len(nums) // 2]\n        nums1, nums2, nums3 = ([], [], [])\n        for num in nums:\n            if num < pivot:\n                nums1.append(num)\n            elif num > pivot:\n                nums3.append(num)\n            else:\n                nums2.append(num)\n        if k < len(nums1):\n            return quickSelect(nums1, k)\n        elif k < len(nums1) + len(nums2):\n            return nums2[0]\n        else:\n            return quickSelect(nums3, k - len(nums1) - len(nums2))\n    kth_smallest = quickSelect(arg1, arg2)\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.006377900019288063,0.006673965982627123,0.007198299979791045,N/A
p3_find_n_smallest_number,prompt_2,40,"['def funcImp(arg1, arg2):\n\n    def quickSelect(nums, k):\n        pivot = nums[len(nums) // 2]\n        nums1, nums2, nums3 = ([], [], [])\n        for num in nums:\n            if num < pivot:\n                nums1.append(num)\n            elif num > pivot:\n                nums3.append(num)\n            else:\n                nums2.append(num)\n        if k < len(nums1):\n            return quickSelect(nums1, k)\n        elif k < len(nums1) + len(nums2):\n            return nums2[0]\n        else:\n            return quickSelect(nums3, k - len(nums1) - len(nums2))\n    kth_smallest = quickSelect(arg1, arg2)\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.08989360020495951,0.0921943680010736,0.10027389996685088,N/A
p3_find_n_smallest_number,prompt_2,40,"['def funcImp(arg1, arg2):\n\n    def quickSelect(nums, k):\n        pivot = nums[len(nums) // 2]\n        nums1, nums2, nums3 = ([], [], [])\n        for num in nums:\n            if num < pivot:\n                nums1.append(num)\n            elif num > pivot:\n                nums3.append(num)\n            else:\n                nums2.append(num)\n        if k < len(nums1):\n            return quickSelect(nums1, k)\n        elif k < len(nums1) + len(nums2):\n            return nums2[0]\n        else:\n            return quickSelect(nums3, k - len(nums1) - len(nums2))\n    kth_smallest = quickSelect(arg1, arg2)\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num == kth_smallest:\n            indexes.append(i)\n    return indexes']",100000,0.6988740998785943,0.7117235939903185,0.7479431999381632,N/A
p3_find_n_smallest_number,prompt_2,41,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    indexes = [i for i in range(len(arg1))]\n    arg1_index_pairs = list(zip(arg1, indexes))\n    lo = 0\n    hi = len(arg1_index_pairs) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        pivot = arg1_index_pairs[mid]\n        left = [x for x in arg1_index_pairs[lo:mid] if x[0] <= pivot[0]]\n        right = [x for x in arg1_index_pairs[mid + 1:hi + 1] if x[0] < pivot[0]]\n        arg1_index_pairs[lo:hi + 1] = left + [pivot] + right\n        if len(left) < arg2 - 1:\n            arg2 -= len(left)\n            lo = mid + 1\n        elif len(left) == arg2 - 1:\n            return [x[1] for x in arg1_index_pairs[:mid + 1]]\n        else:\n            hi = mid\n    return [x[1] for x in arg1_index_pairs[:arg2]]']",1000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_2,41,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    indexes = [i for i in range(len(arg1))]\n    arg1_index_pairs = list(zip(arg1, indexes))\n    lo = 0\n    hi = len(arg1_index_pairs) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        pivot = arg1_index_pairs[mid]\n        left = [x for x in arg1_index_pairs[lo:mid] if x[0] <= pivot[0]]\n        right = [x for x in arg1_index_pairs[mid + 1:hi + 1] if x[0] < pivot[0]]\n        arg1_index_pairs[lo:hi + 1] = left + [pivot] + right\n        if len(left) < arg2 - 1:\n            arg2 -= len(left)\n            lo = mid + 1\n        elif len(left) == arg2 - 1:\n            return [x[1] for x in arg1_index_pairs[:mid + 1]]\n        else:\n            hi = mid\n    return [x[1] for x in arg1_index_pairs[:arg2]]']",10000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_2,41,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    indexes = [i for i in range(len(arg1))]\n    arg1_index_pairs = list(zip(arg1, indexes))\n    lo = 0\n    hi = len(arg1_index_pairs) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        pivot = arg1_index_pairs[mid]\n        left = [x for x in arg1_index_pairs[lo:mid] if x[0] <= pivot[0]]\n        right = [x for x in arg1_index_pairs[mid + 1:hi + 1] if x[0] < pivot[0]]\n        arg1_index_pairs[lo:hi + 1] = left + [pivot] + right\n        if len(left) < arg2 - 1:\n            arg2 -= len(left)\n            lo = mid + 1\n        elif len(left) == arg2 - 1:\n            return [x[1] for x in arg1_index_pairs[:mid + 1]]\n        else:\n            hi = mid\n    return [x[1] for x in arg1_index_pairs[:arg2]]']",100000,0,0,0,	 exception: list index out of range
p3_find_n_smallest_number,prompt_2,42,"['def funcImp(arg1, arg2):\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(arg1.index(num))\n    return indexes']",1000,0.0018531999085098505,0.0019485550024546682,0.002103199949488044,N/A
p3_find_n_smallest_number,prompt_2,42,"['def funcImp(arg1, arg2):\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(arg1.index(num))\n    return indexes']",10000,0.019909400027245283,0.020594901016447693,0.022295799804851413,N/A
p3_find_n_smallest_number,prompt_2,42,"['def funcImp(arg1, arg2):\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in smallest_nums:\n        indexes.append(arg1.index(num))\n    return indexes']",100000,0.24174179998226464,0.24869259200524538,0.2608539001084864,N/A
p3_find_n_smallest_number,prompt_2,43,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for j in range(arg2):\n        result.append(num_index_dict[sorted_list[j]])\n    return result']",1000,0.005658899899572134,0.005992046017199755,0.007166400086134672,N/A
p3_find_n_smallest_number,prompt_2,43,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for j in range(arg2):\n        result.append(num_index_dict[sorted_list[j]])\n    return result']",10000,0.10465619992464781,0.10718023000052199,0.11346469982527196,N/A
p3_find_n_smallest_number,prompt_2,43,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    result = []\n    for j in range(arg2):\n        result.append(num_index_dict[sorted_list[j]])\n    return result']",100000,1.583082500146702,1.63888011100702,1.6881133001297712,N/A
p3_find_n_smallest_number,prompt_2,44,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 is None:\n        arg2 = len(arg1)\n    if arg2 < 0:\n        arg2 = len(arg1)\n    elif arg2 > len(arg1):\n        arg2 = len(arg1)\n    indices = {i: arg1[i] for i in range(len(arg1))}\n    sorted_indices = sorted(indices.items(), key=lambda x: x[1])\n    return [sorted_indices[i][0] for i in range(arg2)]']",1000,0.009995000204071403,0.010522824004292488,0.015293199801817536,N/A
p3_find_n_smallest_number,prompt_2,44,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 is None:\n        arg2 = len(arg1)\n    if arg2 < 0:\n        arg2 = len(arg1)\n    elif arg2 > len(arg1):\n        arg2 = len(arg1)\n    indices = {i: arg1[i] for i in range(len(arg1))}\n    sorted_indices = sorted(indices.items(), key=lambda x: x[1])\n    return [sorted_indices[i][0] for i in range(arg2)]']",10000,0.16176840011030436,0.1666940430062823,0.17253370000980794,N/A
p3_find_n_smallest_number,prompt_2,44,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 is None:\n        arg2 = len(arg1)\n    if arg2 < 0:\n        arg2 = len(arg1)\n    elif arg2 > len(arg1):\n        arg2 = len(arg1)\n    indices = {i: arg1[i] for i in range(len(arg1))}\n    sorted_indices = sorted(indices.items(), key=lambda x: x[1])\n    return [sorted_indices[i][0] for i in range(arg2)]']",100000,2.5627494000364095,2.622874762986321,2.71673130011186,N/A
p3_find_n_smallest_number,prompt_2,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = []\n        index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_nums = unique_nums[:arg2]\n    result = []\n    for num in k_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            return result\n    return result']",1000,0.007613900117576122,0.007968333999160677,0.011324899969622493,N/A
p3_find_n_smallest_number,prompt_2,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = []\n        index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_nums = unique_nums[:arg2]\n    result = []\n    for num in k_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            return result\n    return result']",10000,0.08716980018652976,0.08913378201192244,0.09362279996275902,N/A
p3_find_n_smallest_number,prompt_2,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = []\n        index_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_nums = unique_nums[:arg2]\n    result = []\n    for num in k_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            return result\n    return result']",100000,1.7320018999744207,1.7715964650036766,1.8165160999633372,N/A
p3_find_n_smallest_number,prompt_2,46,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    result = []\n    if n == 0 or arg2 == 0:\n        return result\n    if arg2 >= n:\n        return [i for i in range(n)]\n    min_heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(min_heap, arg2, i)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0]:\n            min_heap[0] = arg1[i]\n            heapify(min_heap, arg2, 0)\n    result = [i for i in range(n) if arg1[i] in min_heap]\n    return result\n\ndef heapify(arr, n, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    smallest = i\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)']",1000,0.004983499879017472,0.00523845000192523,0.00657570012845099,N/A
p3_find_n_smallest_number,prompt_2,46,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    result = []\n    if n == 0 or arg2 == 0:\n        return result\n    if arg2 >= n:\n        return [i for i in range(n)]\n    min_heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(min_heap, arg2, i)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0]:\n            min_heap[0] = arg1[i]\n            heapify(min_heap, arg2, 0)\n    result = [i for i in range(n) if arg1[i] in min_heap]\n    return result\n\ndef heapify(arr, n, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    smallest = i\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)']",10000,0.0504054999910295,0.051946050010155884,0.05668040015734732,N/A
p3_find_n_smallest_number,prompt_2,46,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    result = []\n    if n == 0 or arg2 == 0:\n        return result\n    if arg2 >= n:\n        return [i for i in range(n)]\n    min_heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(min_heap, arg2, i)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0]:\n            min_heap[0] = arg1[i]\n            heapify(min_heap, arg2, 0)\n    result = [i for i in range(n) if arg1[i] in min_heap]\n    return result\n\ndef heapify(arr, n, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    smallest = i\n    if l < n and arr[l] < arr[smallest]:\n        smallest = l\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest != i:\n        arr[i], arr[smallest] = (arr[smallest], arr[i])\n        heapify(arr, n, smallest)']",100000,0.5132051999680698,0.5189856700110249,0.5352280999068171,N/A
p3_find_n_smallest_number,prompt_2,47,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot_index = partition(arr, l, r)\n        if k == pivot_index:\n            return k\n        elif k < pivot_index:\n            return quickselect(arr, l, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, r, k)\n    k = arg2\n    k_index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    k_smallest = sorted(arg1[:k])\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,47,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot_index = partition(arr, l, r)\n        if k == pivot_index:\n            return k\n        elif k < pivot_index:\n            return quickselect(arr, l, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, r, k)\n    k = arg2\n    k_index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    k_smallest = sorted(arg1[:k])\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,47,"['def funcImp(arg1, arg2):\n\n    def partition(arr, l, r):\n        pivot = arr[r]\n        i = l - 1\n        for j in range(l, r):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, l, r, k):\n        if l == r:\n            return l\n        pivot_index = partition(arr, l, r)\n        if k == pivot_index:\n            return k\n        elif k < pivot_index:\n            return quickselect(arr, l, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, r, k)\n    k = arg2\n    k_index = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    k_smallest = sorted(arg1[:k])\n    result = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return result']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,48,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[len(nums) // 2]\n        lows = [n for n in nums if n < pivot]\n        highs = [n for n in nums if n > pivot]\n        pivots = [n for n in nums if n == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + len(pivots) + quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = arg1[quickselect(arg1, arg2 - 1)]\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",1000,0.009402000112459064,0.009904243003111332,0.014398899860680103,N/A
p3_find_n_smallest_number,prompt_2,48,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[len(nums) // 2]\n        lows = [n for n in nums if n < pivot]\n        highs = [n for n in nums if n > pivot]\n        pivots = [n for n in nums if n == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + len(pivots) + quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = arg1[quickselect(arg1, arg2 - 1)]\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",10000,0.14781340002082288,0.14997831099666656,0.15680689993314445,N/A
p3_find_n_smallest_number,prompt_2,48,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[len(nums) // 2]\n        lows = [n for n in nums if n < pivot]\n        highs = [n for n in nums if n > pivot]\n        pivots = [n for n in nums if n == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + len(pivots) + quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = arg1[quickselect(arg1, arg2 - 1)]\n    indices = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indices']",100000,1.0762779000215232,1.0951136869820766,1.1184030999429524,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return sorted(result)']",1000,0.0036859000101685524,0.003966083000414074,0.00840100017376244,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return sorted(result)']",10000,0.0362835000269115,0.03741663799621165,0.04084819997660816,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return sorted(result)']",100000,0.36546120001003146,0.37190924199763686,0.3975139001850039,N/A
p3_find_n_smallest_number,prompt_2,50,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(idx_smallest)']",1000,0.0070361001417040825,0.0074609789904206995,0.009640100179240108,N/A
p3_find_n_smallest_number,prompt_2,50,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(idx_smallest)']",10000,0.10999889997765422,0.113400819003582,0.12401790008880198,N/A
p3_find_n_smallest_number,prompt_2,50,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(idx_smallest)']",100000,1.5932845000643283,1.6202866899897344,1.6898769000545144,N/A
p3_find_n_smallest_number,prompt_2,51,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, element in enumerate(arg1):\n        if element not in index_dict:\n            index_dict[element] = [i]\n        else:\n            index_dict[element].append(i)\n    unique_elements = sorted(set(arg1))\n    k_smallest = unique_elements[:arg2]\n    indices = []\n    for element in k_smallest:\n        indices += index_dict[element]\n        if len(indices) >= arg2:\n            break\n    return indices[:arg2]']",1000,0.0061963999178260565,0.006463103017304093,0.007901499979197979,N/A
p3_find_n_smallest_number,prompt_2,51,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, element in enumerate(arg1):\n        if element not in index_dict:\n            index_dict[element] = [i]\n        else:\n            index_dict[element].append(i)\n    unique_elements = sorted(set(arg1))\n    k_smallest = unique_elements[:arg2]\n    indices = []\n    for element in k_smallest:\n        indices += index_dict[element]\n        if len(indices) >= arg2:\n            break\n    return indices[:arg2]']",10000,0.07350309984758496,0.07580074099823833,0.07918849983252585,N/A
p3_find_n_smallest_number,prompt_2,51,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, element in enumerate(arg1):\n        if element not in index_dict:\n            index_dict[element] = [i]\n        else:\n            index_dict[element].append(i)\n    unique_elements = sorted(set(arg1))\n    k_smallest = unique_elements[:arg2]\n    indices = []\n    for element in k_smallest:\n        indices += index_dict[element]\n        if len(indices) >= arg2:\n            break\n    return indices[:arg2]']",100000,1.5571494000032544,1.6066777160111814,1.6594851000700146,N/A
p3_find_n_smallest_number,prompt_2,52,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(heap, i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            heapify(heap, 0)\n    result = []\n    for i in range(arg2):\n        result.append(arg1.index(heap[i]))\n    return result']",1000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_2,52,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(heap, i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            heapify(heap, 0)\n    result = []\n    for i in range(arg2):\n        result.append(arg1.index(heap[i]))\n    return result']",10000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_2,52,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = arg1[:arg2]\n    for i in range(arg2 // 2 - 1, -1, -1):\n        heapify(heap, i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            heapify(heap, 0)\n    result = []\n    for i in range(arg2):\n        result.append(arg1.index(heap[i]))\n    return result']",100000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_2,53,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return sorted(sorted_indices)']",1000,0.007020799908787012,0.0076561270118691025,0.009983800118789077,N/A
p3_find_n_smallest_number,prompt_2,53,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return sorted(sorted_indices)']",10000,0.10910329991020262,0.11294797199545428,0.11928969994187355,N/A
p3_find_n_smallest_number,prompt_2,53,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]\n    return sorted(sorted_indices)']",100000,1.6063099999446422,1.6389440819923766,1.6889984998852015,N/A
p3_find_n_smallest_number,prompt_2,54,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    smallest = sorted(index_dict.keys())[:arg2]\n    result = []\n    for s in smallest:\n        result.extend(index_dict[s])\n    return result']",1000,0.008334399899467826,0.008899890014436095,0.01107220002450049,N/A
p3_find_n_smallest_number,prompt_2,54,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    smallest = sorted(index_dict.keys())[:arg2]\n    result = []\n    for s in smallest:\n        result.extend(index_dict[s])\n    return result']",10000,0.13632720010355115,0.14097346499562263,0.15337580000050366,N/A
p3_find_n_smallest_number,prompt_2,54,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    smallest = sorted(index_dict.keys())[:arg2]\n    result = []\n    for s in smallest:\n        result.extend(index_dict[s])\n    return result']",100000,2.1982205000240356,2.2449679410015233,2.3189034000970423,N/A
p3_find_n_smallest_number,prompt_2,55,"['def funcImp(arg1, arg2):\n\n    def quick_select(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[len(l) // 2]\n        lows = [el for el in l if el < pivot]\n        highs = [el for el in l if el > pivot]\n        pivots = [el for el in l if el == pivot]\n        if k < len(lows):\n            return quick_select(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quick_select(highs, k - len(lows) - len(pivots))\n    k_smallest = [quick_select(arg1, i) for i in range(arg2)]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",1000,0.03902989998459816,0.040697110982146116,0.057145100086927414,N/A
p3_find_n_smallest_number,prompt_2,55,"['def funcImp(arg1, arg2):\n\n    def quick_select(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[len(l) // 2]\n        lows = [el for el in l if el < pivot]\n        highs = [el for el in l if el > pivot]\n        pivots = [el for el in l if el == pivot]\n        if k < len(lows):\n            return quick_select(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quick_select(highs, k - len(lows) - len(pivots))\n    k_smallest = [quick_select(arg1, i) for i in range(arg2)]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",10000,0.6678673999849707,0.6822736189956777,0.7175765000283718,N/A
p3_find_n_smallest_number,prompt_2,55,"['def funcImp(arg1, arg2):\n\n    def quick_select(l, k):\n        if len(l) == 1:\n            return l[0]\n        pivot = l[len(l) // 2]\n        lows = [el for el in l if el < pivot]\n        highs = [el for el in l if el > pivot]\n        pivots = [el for el in l if el == pivot]\n        if k < len(lows):\n            return quick_select(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quick_select(highs, k - len(lows) - len(pivots))\n    k_smallest = [quick_select(arg1, i) for i in range(arg2)]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",100000,4.803216499974951,4.875737263995688,4.965579600073397,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    return [i[0] for i in k_smallest]']",1000,0.010034000035375357,0.010661385008133947,0.012761699967086315,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    return [i[0] for i in k_smallest]']",10000,0.16067189979366958,0.17053787000011653,0.1793935999739915,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    dict1 = {}\n    for i in range(len(arg1)):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    return [i[0] for i in k_smallest]']",100000,2.593164599966258,2.6530265589873308,2.718579800100997,N/A
p3_find_n_smallest_number,prompt_2,57,"['def funcImp(arg1, arg2):\n    dict1 = {arg1[i]: i for i in range(len(arg1))}\n    arr = sorted(arg1)\n    res = []\n    i = 0\n    while i < arg2:\n        res.append(dict1[arr[i]])\n        i += 1\n    return res']",1000,0.005551600130274892,0.005858755987137556,0.0076107000932097435,N/A
p3_find_n_smallest_number,prompt_2,57,"['def funcImp(arg1, arg2):\n    dict1 = {arg1[i]: i for i in range(len(arg1))}\n    arr = sorted(arg1)\n    res = []\n    i = 0\n    while i < arg2:\n        res.append(dict1[arr[i]])\n        i += 1\n    return res']",10000,0.10276680020615458,0.10718660100130364,0.11664070002734661,N/A
p3_find_n_smallest_number,prompt_2,57,"['def funcImp(arg1, arg2):\n    dict1 = {arg1[i]: i for i in range(len(arg1))}\n    arr = sorted(arg1)\n    res = []\n    i = 0\n    while i < arg2:\n        res.append(dict1[arr[i]])\n        i += 1\n    return res']",100000,1.597965900087729,1.643280986007303,1.724679599981755,N/A
p3_find_n_smallest_number,prompt_2,58,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    low, high = (0, n - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if k - 1 == pivot_index:\n            return sorted(list(enumerate(arr[:k])), key=lambda x: x[1])\n        elif k - 1 < pivot_index:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n    return []\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,2.014213199960068,2.1392460499936714,2.184352200012654,N/A
p3_find_n_smallest_number,prompt_2,58,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    low, high = (0, n - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if k - 1 == pivot_index:\n            return sorted(list(enumerate(arr[:k])), key=lambda x: x[1])\n        elif k - 1 < pivot_index:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n    return []\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,58,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    low, high = (0, n - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if k - 1 == pivot_index:\n            return sorted(list(enumerate(arr[:k])), key=lambda x: x[1])\n        elif k - 1 < pivot_index:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n    return []\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,59,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",1000,0.007143799914047122,0.007975038995500654,0.013296599965542555,N/A
p3_find_n_smallest_number,prompt_2,59,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",10000,0.06868310016579926,0.07754465498030186,0.08624059986323118,N/A
p3_find_n_smallest_number,prompt_2,59,"['import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[right], arr[pivot_index] = (arr[pivot_index], arr[right])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest]\n    return indexes']",100000,0.8862844000104815,0.984400741015561,1.077260100049898,N/A
p3_find_n_smallest_number,prompt_2,60,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = lst[-1]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        k_left = len(left)\n        if k < k_left:\n            return quickselect(left, k)\n        elif k > k_left:\n            return quickselect(right, k - k_left - 1)\n        else:\n            return pivot\n    k = arg2\n    indices = []\n    lst = arg1.copy()\n    for i in range(k):\n        val = quickselect(lst, i)\n        index = lst.index(val)\n        indices.append(index)\n        lst.pop(index)\n    return indices']",1000,0.04700709995813668,0.04932490501087159,0.0650966998655349,N/A
p3_find_n_smallest_number,prompt_2,60,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = lst[-1]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        k_left = len(left)\n        if k < k_left:\n            return quickselect(left, k)\n        elif k > k_left:\n            return quickselect(right, k - k_left - 1)\n        else:\n            return pivot\n    k = arg2\n    indices = []\n    lst = arg1.copy()\n    for i in range(k):\n        val = quickselect(lst, i)\n        index = lst.index(val)\n        indices.append(index)\n        lst.pop(index)\n    return indices']",10000,0.15718879993073642,0.1622967079980299,0.17902030004188418,N/A
p3_find_n_smallest_number,prompt_2,60,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        pivot = lst[-1]\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        k_left = len(left)\n        if k < k_left:\n            return quickselect(left, k)\n        elif k > k_left:\n            return quickselect(right, k - k_left - 1)\n        else:\n            return pivot\n    k = arg2\n    indices = []\n    lst = arg1.copy()\n    for i in range(k):\n        val = quickselect(lst, i)\n        index = lst.index(val)\n        indices.append(index)\n        lst.pop(index)\n    return indices']",100000,3.6550223999656737,3.71705533599481,3.78597109997645,N/A
p3_find_n_smallest_number,prompt_2,61,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n    return indexes']",1000,0.003237399971112609,0.0034711559931747617,0.004066299879923463,N/A
p3_find_n_smallest_number,prompt_2,61,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n    return indexes']",10000,0.0824452000670135,0.08580611102283,0.09349559992551804,N/A
p3_find_n_smallest_number,prompt_2,61,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    arr.sort()\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(arr[i])\n        indexes.append(index)\n    return indexes']",100000,1.1925793001428246,1.2344460269901902,1.2832969999872148,N/A
p3_find_n_smallest_number,prompt_2,62,"[""def partition(arr, l, r, pivot):\n    pivot_val = arr[pivot]\n    arr[pivot], arr[r] = (arr[r], arr[pivot])\n    store_index = l\n    for i in range(l, r):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[r] = (arr[r], arr[store_index])\n    return store_index\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return l\n    pivot = random.randint(l, r)\n    pivot = partition(arr, l, r, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, l, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'k is larger than the length of the array'\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arg1, 0, n - 1, i)\n        indexes.append(idx)\n    return indexes""]",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,62,"[""def partition(arr, l, r, pivot):\n    pivot_val = arr[pivot]\n    arr[pivot], arr[r] = (arr[r], arr[pivot])\n    store_index = l\n    for i in range(l, r):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[r] = (arr[r], arr[store_index])\n    return store_index\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return l\n    pivot = random.randint(l, r)\n    pivot = partition(arr, l, r, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, l, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'k is larger than the length of the array'\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arg1, 0, n - 1, i)\n        indexes.append(idx)\n    return indexes""]",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,62,"[""def partition(arr, l, r, pivot):\n    pivot_val = arr[pivot]\n    arr[pivot], arr[r] = (arr[r], arr[pivot])\n    store_index = l\n    for i in range(l, r):\n        if arr[i] < pivot_val:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[r] = (arr[r], arr[store_index])\n    return store_index\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return l\n    pivot = random.randint(l, r)\n    pivot = partition(arr, l, r, pivot)\n    if k == pivot:\n        return k\n    elif k < pivot:\n        return quickselect(arr, l, pivot - 1, k)\n    else:\n        return quickselect(arr, pivot + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'k is larger than the length of the array'\n    indexes = []\n    for i in range(k):\n        idx = quickselect(arg1, 0, n - 1, i)\n        indexes.append(idx)\n    return indexes""]",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,63,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",1000,0.0071396001148968935,0.00753180400468409,0.010436499956995249,N/A
p3_find_n_smallest_number,prompt_2,63,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",10000,0.11017609992995858,0.11381230399943888,0.12588920001871884,N/A
p3_find_n_smallest_number,prompt_2,63,"['def funcImp(arr, k):\n    indexes = sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n    return indexes']",100000,1.6168097001500428,1.6506440660101362,1.7322478001005948,N/A
p3_find_n_smallest_number,prompt_2,64,"['def funcImp(arg1, arg2):\n    indices = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,64,"['def funcImp(arg1, arg2):\n    indices = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,64,"['def funcImp(arg1, arg2):\n    indices = []\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    for num in heap:\n        indices.append(arg1.index(num))\n    return indices']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,65,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]']",1000,0.002935499884188175,0.0030434709833934903,0.003388599958270788,N/A
p3_find_n_smallest_number,prompt_2,65,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]']",10000,0.02624850021675229,0.027391164998989553,0.030430200044065714,N/A
p3_find_n_smallest_number,prompt_2,65,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)][::-1]']",100000,0.2614496999885887,0.27024033199297265,0.2910114999394864,N/A
p3_find_n_smallest_number,prompt_2,66,"[""def funcImp(arg1, arg2):\n    if not 0 <= arg2 < len(arg1):\n        raise ValueError('k must be between 0 and len(arg1)-1')\n\n    def partition(left, right, pivot_idx):\n        pivot_value = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[right] = (arg1[right], arg1[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arg1[i] <= pivot_value:\n                arg1[store_idx], arg1[i] = (arg1[i], arg1[store_idx])\n                store_idx += 1\n        arg1[right], arg1[store_idx] = (arg1[store_idx], arg1[right])\n        return store_idx\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_idx = (left + right) // 2\n        pivot_idx = partition(left, right, pivot_idx)\n        if k_smallest == pivot_idx:\n            return k_smallest\n        elif k_smallest < pivot_idx:\n            return select(left, pivot_idx - 1, k_smallest)\n        else:\n            return select(pivot_idx + 1, right, k_smallest)\n    k_indices = []\n    k_smallest = select(0, len(arg1) - 1, arg2)\n    for i in range(k_smallest + 1):\n        k_indices.append(arg1.index(sorted(arg1[:k_smallest + 1])[i]))\n    return k_indices""]",1000,0.0060189999639987946,0.006303853001445532,0.007361600175499916,N/A
p3_find_n_smallest_number,prompt_2,66,"[""def funcImp(arg1, arg2):\n    if not 0 <= arg2 < len(arg1):\n        raise ValueError('k must be between 0 and len(arg1)-1')\n\n    def partition(left, right, pivot_idx):\n        pivot_value = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[right] = (arg1[right], arg1[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arg1[i] <= pivot_value:\n                arg1[store_idx], arg1[i] = (arg1[i], arg1[store_idx])\n                store_idx += 1\n        arg1[right], arg1[store_idx] = (arg1[store_idx], arg1[right])\n        return store_idx\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_idx = (left + right) // 2\n        pivot_idx = partition(left, right, pivot_idx)\n        if k_smallest == pivot_idx:\n            return k_smallest\n        elif k_smallest < pivot_idx:\n            return select(left, pivot_idx - 1, k_smallest)\n        else:\n            return select(pivot_idx + 1, right, k_smallest)\n    k_indices = []\n    k_smallest = select(0, len(arg1) - 1, arg2)\n    for i in range(k_smallest + 1):\n        k_indices.append(arg1.index(sorted(arg1[:k_smallest + 1])[i]))\n    return k_indices""]",10000,0.06312299985438585,0.06481627201894298,0.07266400009393692,N/A
p3_find_n_smallest_number,prompt_2,66,"[""def funcImp(arg1, arg2):\n    if not 0 <= arg2 < len(arg1):\n        raise ValueError('k must be between 0 and len(arg1)-1')\n\n    def partition(left, right, pivot_idx):\n        pivot_value = arg1[pivot_idx]\n        arg1[pivot_idx], arg1[right] = (arg1[right], arg1[pivot_idx])\n        store_idx = left\n        for i in range(left, right):\n            if arg1[i] <= pivot_value:\n                arg1[store_idx], arg1[i] = (arg1[i], arg1[store_idx])\n                store_idx += 1\n        arg1[right], arg1[store_idx] = (arg1[store_idx], arg1[right])\n        return store_idx\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_idx = (left + right) // 2\n        pivot_idx = partition(left, right, pivot_idx)\n        if k_smallest == pivot_idx:\n            return k_smallest\n        elif k_smallest < pivot_idx:\n            return select(left, pivot_idx - 1, k_smallest)\n        else:\n            return select(pivot_idx + 1, right, k_smallest)\n    k_indices = []\n    k_smallest = select(0, len(arg1) - 1, arg2)\n    for i in range(k_smallest + 1):\n        k_indices.append(arg1.index(sorted(arg1[:k_smallest + 1])[i]))\n    return k_indices""]",100000,0.661975699942559,0.7634352780040353,0.800951800076291,N/A
p3_find_n_smallest_number,prompt_2,67,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array using the quickselect algorithm.\n    \n    arg1: list of integers, unsorted array\n    arg2: integer, k\n    return: list of integers, indexes of the k smallest numbers\n    """"""\n    if arg2 < 1:\n        return []\n\n    def select(lst, l, r, k):\n        """"""\n        Returns the kth smallest element of lst[l:r+1].\n        """"""\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[l], lst[pivot_index] = (lst[pivot_index], lst[l])\n        i = l\n        for j in range(l + 1, r + 1):\n            if lst[j] < lst[l]:\n                i += 1\n                lst[i], lst[j] = (lst[j], lst[i])\n        lst[l], lst[i] = (lst[i], lst[l])\n        if k == i - l + 1:\n            return lst[i]\n        elif k < i - l + 1:\n            return select(lst, l, i - 1, k)\n        else:\n            return select(lst, i + 1, r, k - (i - l + 1))\n    n = len(arg1)\n    kth_smallest = select(arg1, 0, n - 1, arg2)\n    k_smallest_indexes = [i for i in range(n) if arg1[i] <= kth_smallest]\n    return k_smallest_indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,67,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array using the quickselect algorithm.\n    \n    arg1: list of integers, unsorted array\n    arg2: integer, k\n    return: list of integers, indexes of the k smallest numbers\n    """"""\n    if arg2 < 1:\n        return []\n\n    def select(lst, l, r, k):\n        """"""\n        Returns the kth smallest element of lst[l:r+1].\n        """"""\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[l], lst[pivot_index] = (lst[pivot_index], lst[l])\n        i = l\n        for j in range(l + 1, r + 1):\n            if lst[j] < lst[l]:\n                i += 1\n                lst[i], lst[j] = (lst[j], lst[i])\n        lst[l], lst[i] = (lst[i], lst[l])\n        if k == i - l + 1:\n            return lst[i]\n        elif k < i - l + 1:\n            return select(lst, l, i - 1, k)\n        else:\n            return select(lst, i + 1, r, k - (i - l + 1))\n    n = len(arg1)\n    kth_smallest = select(arg1, 0, n - 1, arg2)\n    k_smallest_indexes = [i for i in range(n) if arg1[i] <= kth_smallest]\n    return k_smallest_indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,67,"['def funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array using the quickselect algorithm.\n    \n    arg1: list of integers, unsorted array\n    arg2: integer, k\n    return: list of integers, indexes of the k smallest numbers\n    """"""\n    if arg2 < 1:\n        return []\n\n    def select(lst, l, r, k):\n        """"""\n        Returns the kth smallest element of lst[l:r+1].\n        """"""\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[l], lst[pivot_index] = (lst[pivot_index], lst[l])\n        i = l\n        for j in range(l + 1, r + 1):\n            if lst[j] < lst[l]:\n                i += 1\n                lst[i], lst[j] = (lst[j], lst[i])\n        lst[l], lst[i] = (lst[i], lst[l])\n        if k == i - l + 1:\n            return lst[i]\n        elif k < i - l + 1:\n            return select(lst, l, i - 1, k)\n        else:\n            return select(lst, i + 1, r, k - (i - l + 1))\n    n = len(arg1)\n    kth_smallest = select(arg1, 0, n - 1, arg2)\n    k_smallest_indexes = [i for i in range(n) if arg1[i] <= kth_smallest]\n    return k_smallest_indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,68,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Args:\n        arg1 (list[int]): The input array to search\n        k (int): The number of smallest indexes to return\n\n    Returns:\n        list[int]: The indexes of the k smallest numbers in the input array\n    """"""\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_idx = partition(arr, left, right)\n        if k < pivot_idx:\n            return quick_select(arr, left, pivot_idx - 1, k)\n        elif k > pivot_idx:\n            return quick_select(arr, pivot_idx + 1, right, k)\n        else:\n            return pivot_idx\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        return i\n    idxs = []\n    for i in range(k):\n        idx = quick_select(arg1, 0, len(arg1) - 1, i)\n        idxs.append(idx)\n    return idxs']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,68,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Args:\n        arg1 (list[int]): The input array to search\n        k (int): The number of smallest indexes to return\n\n    Returns:\n        list[int]: The indexes of the k smallest numbers in the input array\n    """"""\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_idx = partition(arr, left, right)\n        if k < pivot_idx:\n            return quick_select(arr, left, pivot_idx - 1, k)\n        elif k > pivot_idx:\n            return quick_select(arr, pivot_idx + 1, right, k)\n        else:\n            return pivot_idx\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        return i\n    idxs = []\n    for i in range(k):\n        idx = quick_select(arg1, 0, len(arg1) - 1, i)\n        idxs.append(idx)\n    return idxs']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,68,"['def funcImp(arg1, k):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Args:\n        arg1 (list[int]): The input array to search\n        k (int): The number of smallest indexes to return\n\n    Returns:\n        list[int]: The indexes of the k smallest numbers in the input array\n    """"""\n\n    def quick_select(arr, left, right, k):\n        if left == right:\n            return left\n        pivot_idx = partition(arr, left, right)\n        if k < pivot_idx:\n            return quick_select(arr, left, pivot_idx - 1, k)\n        elif k > pivot_idx:\n            return quick_select(arr, pivot_idx + 1, right, k)\n        else:\n            return pivot_idx\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        return i\n    idxs = []\n    for i in range(k):\n        idx = quick_select(arg1, 0, len(arg1) - 1, i)\n        idxs.append(idx)\n    return idxs']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,69,"['def funcImp(arg1, arg2):\n    indexed_dict = {}\n    for i in range(len(arg1)):\n        indexed_dict[i] = arg1[i]\n    sorted_values = sorted(indexed_dict.items(), key=lambda x: x[1])\n    output = []\n    for i in range(arg2):\n        output.append(sorted_values[i][0])\n    return output']",1000,0.010077800136059523,0.010636114003136753,0.012195699848234653,N/A
p3_find_n_smallest_number,prompt_2,69,"['def funcImp(arg1, arg2):\n    indexed_dict = {}\n    for i in range(len(arg1)):\n        indexed_dict[i] = arg1[i]\n    sorted_values = sorted(indexed_dict.items(), key=lambda x: x[1])\n    output = []\n    for i in range(arg2):\n        output.append(sorted_values[i][0])\n    return output']",10000,0.16122140013612807,0.17113921801093965,0.1871011999901384,N/A
p3_find_n_smallest_number,prompt_2,69,"['def funcImp(arg1, arg2):\n    indexed_dict = {}\n    for i in range(len(arg1)):\n        indexed_dict[i] = arg1[i]\n    sorted_values = sorted(indexed_dict.items(), key=lambda x: x[1])\n    output = []\n    for i in range(arg2):\n        output.append(sorted_values[i][0])\n    return output']",100000,2.5829468998126686,2.671848287000321,2.773467999882996,N/A
p3_find_n_smallest_number,prompt_2,70,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",1000,0.0057363000232726336,0.006178488985169679,0.01078610005788505,N/A
p3_find_n_smallest_number,prompt_2,70,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",10000,0.10597170004621148,0.11076502400217578,0.12055700016207993,N/A
p3_find_n_smallest_number,prompt_2,70,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",100000,1.6566954001318663,1.6966760800150222,1.7762616998516023,N/A
p3_find_n_smallest_number,prompt_2,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted(sorted_indices)']",1000,0.007059599971398711,0.007462380982469767,0.00872179982252419,N/A
p3_find_n_smallest_number,prompt_2,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted(sorted_indices)']",10000,0.10966499987989664,0.113313146000728,0.12347760004922748,N/A
p3_find_n_smallest_number,prompt_2,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted(sorted_indices)']",100000,1.6007153999526054,1.6580362270050681,1.742096999892965,N/A
p3_find_n_smallest_number,prompt_2,72,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n\n    def quickselect(first, last, k):\n        pivot = arg1[last]\n        left = first\n        for right in range(first, last):\n            if arg1[right] <= pivot:\n                arg1[left], arg1[right] = (arg1[right], arg1[left])\n                left += 1\n        arg1[left], arg1[last] = (arg1[last], arg1[left])\n        rank = left - first\n        if rank == k:\n            return left\n        elif rank < k:\n            return quickselect(left + 1, last, k - rank - 1)\n        else:\n            return quickselect(first, left - 1, k)\n    kth_smallest_val = arg1[quickselect(0, len(arg1) - 1, k)]\n    res = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest_val]\n    return res[:k]']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,72,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n\n    def quickselect(first, last, k):\n        pivot = arg1[last]\n        left = first\n        for right in range(first, last):\n            if arg1[right] <= pivot:\n                arg1[left], arg1[right] = (arg1[right], arg1[left])\n                left += 1\n        arg1[left], arg1[last] = (arg1[last], arg1[left])\n        rank = left - first\n        if rank == k:\n            return left\n        elif rank < k:\n            return quickselect(left + 1, last, k - rank - 1)\n        else:\n            return quickselect(first, left - 1, k)\n    kth_smallest_val = arg1[quickselect(0, len(arg1) - 1, k)]\n    res = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest_val]\n    return res[:k]']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,72,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return []\n\n    def quickselect(first, last, k):\n        pivot = arg1[last]\n        left = first\n        for right in range(first, last):\n            if arg1[right] <= pivot:\n                arg1[left], arg1[right] = (arg1[right], arg1[left])\n                left += 1\n        arg1[left], arg1[last] = (arg1[last], arg1[left])\n        rank = left - first\n        if rank == k:\n            return left\n        elif rank < k:\n            return quickselect(left + 1, last, k - rank - 1)\n        else:\n            return quickselect(first, left - 1, k)\n    kth_smallest_val = arg1[quickselect(0, len(arg1) - 1, k)]\n    res = [i for i in range(len(arg1)) if arg1[i] <= kth_smallest_val]\n    return res[:k]']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,73,"['def funcImp(arg1, arg2):\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted_idx']",1000,0.007115100044757128,0.007601937979925424,0.011094900080934167,N/A
p3_find_n_smallest_number,prompt_2,73,"['def funcImp(arg1, arg2):\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted_idx']",10000,0.11230879998765886,0.11644103800645098,0.12811610009521246,N/A
p3_find_n_smallest_number,prompt_2,73,"['def funcImp(arg1, arg2):\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted_idx']",100000,1.6099052000790834,1.6658125609951093,1.7200637001078576,N/A
p3_find_n_smallest_number,prompt_2,74,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1:\n        return []\n    if len(arr) == 1:\n        return [0]\n    if k > len(arr):\n        return []\n    indexes = []\n    pivot_index = partition(arr, 0, len(arr) - 1)\n    while len(indexes) < k:\n        if pivot_index == len(arr) - 1:\n            indexes.extend(list(range(len(arr) - k, len(arr))))\n            break\n        if pivot_index == k - 1:\n            indexes.extend(list(range(k)))\n            break\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n            pivot_index = partition(arr, 0, high)\n        else:\n            indexes.extend(list(range(pivot_index)))\n            low = pivot_index + 1\n            pivot_index = partition(arr, low, len(arr) - 1)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,0.00415010005235672,0.005256747007369995,0.08720930013805628,N/A
p3_find_n_smallest_number,prompt_2,74,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1:\n        return []\n    if len(arr) == 1:\n        return [0]\n    if k > len(arr):\n        return []\n    indexes = []\n    pivot_index = partition(arr, 0, len(arr) - 1)\n    while len(indexes) < k:\n        if pivot_index == len(arr) - 1:\n            indexes.extend(list(range(len(arr) - k, len(arr))))\n            break\n        if pivot_index == k - 1:\n            indexes.extend(list(range(k)))\n            break\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n            pivot_index = partition(arr, 0, high)\n        else:\n            indexes.extend(list(range(pivot_index)))\n            low = pivot_index + 1\n            pivot_index = partition(arr, low, len(arr) - 1)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,0.04302780004218221,0.06117914901347831,1.7455937000922859,N/A
p3_find_n_smallest_number,prompt_2,74,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1:\n        return []\n    if len(arr) == 1:\n        return [0]\n    if k > len(arr):\n        return []\n    indexes = []\n    pivot_index = partition(arr, 0, len(arr) - 1)\n    while len(indexes) < k:\n        if pivot_index == len(arr) - 1:\n            indexes.extend(list(range(len(arr) - k, len(arr))))\n            break\n        if pivot_index == k - 1:\n            indexes.extend(list(range(k)))\n            break\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n            pivot_index = partition(arr, 0, high)\n        else:\n            indexes.extend(list(range(pivot_index)))\n            low = pivot_index + 1\n            pivot_index = partition(arr, low, len(arr) - 1)\n    return indexes\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,0.5175518000032753,4.386343987986911,386.1968463000376,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    index_list = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        index_list.append(index)\n    return index_list']",1000,0.00206059985794127,0.002092806992586702,0.0023662999738007784,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    index_list = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        index_list.append(index)\n    return index_list']",10000,0.02043129992671311,0.021270135999657214,0.024096100125461817,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    index_list = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        index_list.append(index)\n    return index_list']",100000,0.2009707000106573,0.2040612159948796,0.2112340999301523,N/A
p3_find_n_smallest_number,prompt_2,76,"['def funcImp(arg1, arg2):\n    lst = [(i, val) for i, val in enumerate(arg1)]\n    lst.sort(key=lambda x: x[1])\n    indices = [tup[0] for tup in lst[:arg2]]\n    return indices']",1000,0.009348399937152863,0.009793944996781647,0.010475399903953075,N/A
p3_find_n_smallest_number,prompt_2,76,"['def funcImp(arg1, arg2):\n    lst = [(i, val) for i, val in enumerate(arg1)]\n    lst.sort(key=lambda x: x[1])\n    indices = [tup[0] for tup in lst[:arg2]]\n    return indices']",10000,0.15270780003629625,0.15621243199333548,0.1729889998678118,N/A
p3_find_n_smallest_number,prompt_2,76,"['def funcImp(arg1, arg2):\n    lst = [(i, val) for i, val in enumerate(arg1)]\n    lst.sort(key=lambda x: x[1])\n    indices = [tup[0] for tup in lst[:arg2]]\n    return indices']",100000,2.2197688999585807,2.258169180988334,2.3360170000232756,N/A
p3_find_n_smallest_number,prompt_2,77,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, kth):\n        pivot = random.choice(lst)\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if kth < len(lows):\n            return quickselect(lows, kth)\n        elif kth < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, kth - len(lows) - len(pivots))\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,77,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, kth):\n        pivot = random.choice(lst)\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if kth < len(lows):\n            return quickselect(lows, kth)\n        elif kth < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, kth - len(lows) - len(pivots))\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,77,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, kth):\n        pivot = random.choice(lst)\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if kth < len(lows):\n            return quickselect(lows, kth)\n        elif kth < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, kth - len(lows) - len(pivots))\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_2,78,"['def funcImp(arg1, arg2):\n    dict_values = {arg1[i]: i for i in range(len(arg1))}\n    sorted_values = sorted(arg1)\n    k_smallest = sorted_values[:arg2]\n    indexes = [dict_values[value] for value in k_smallest]\n    return indexes']",1000,0.0055500001180917025,0.0058876530174165964,0.006846799980849028,N/A
p3_find_n_smallest_number,prompt_2,78,"['def funcImp(arg1, arg2):\n    dict_values = {arg1[i]: i for i in range(len(arg1))}\n    sorted_values = sorted(arg1)\n    k_smallest = sorted_values[:arg2]\n    indexes = [dict_values[value] for value in k_smallest]\n    return indexes']",10000,0.1051127000246197,0.10803827300900594,0.12074289983138442,N/A
p3_find_n_smallest_number,prompt_2,78,"['def funcImp(arg1, arg2):\n    dict_values = {arg1[i]: i for i in range(len(arg1))}\n    sorted_values = sorted(arg1)\n    k_smallest = sorted_values[:arg2]\n    indexes = [dict_values[value] for value in k_smallest]\n    return indexes']",100000,1.6041331999003887,1.635565067990683,1.701147599844262,N/A
p3_find_n_smallest_number,prompt_2,79,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1.copy()\n    k_min = [float('inf')] * k\n    k_min_idx = [-1] * k\n    for i in range(len(arr)):\n        num = arr[i]\n        for j in range(k):\n            if num < k_min[j]:\n                k_min[j + 1:k] = k_min[j:k - 1]\n                k_min[j] = num\n                k_min_idx[j + 1:k] = k_min_idx[j:k - 1]\n                k_min_idx[j] = i\n                break\n    return sorted(k_min_idx)""]",1000,0.013189200079068542,0.013826294001191855,0.01519820000976324,N/A
p3_find_n_smallest_number,prompt_2,79,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1.copy()\n    k_min = [float('inf')] * k\n    k_min_idx = [-1] * k\n    for i in range(len(arr)):\n        num = arr[i]\n        for j in range(k):\n            if num < k_min[j]:\n                k_min[j + 1:k] = k_min[j:k - 1]\n                k_min[j] = num\n                k_min_idx[j + 1:k] = k_min_idx[j:k - 1]\n                k_min_idx[j] = i\n                break\n    return sorted(k_min_idx)""]",10000,0.13006280013360083,0.13280301499878988,0.14571029995568097,N/A
p3_find_n_smallest_number,prompt_2,79,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1.copy()\n    k_min = [float('inf')] * k\n    k_min_idx = [-1] * k\n    for i in range(len(arr)):\n        num = arr[i]\n        for j in range(k):\n            if num < k_min[j]:\n                k_min[j + 1:k] = k_min[j:k - 1]\n                k_min[j] = num\n                k_min_idx[j + 1:k] = k_min_idx[j:k - 1]\n                k_min_idx[j] = i\n                break\n    return sorted(k_min_idx)""]",100000,1.3214486001525074,1.3478276519943029,1.3850539999548346,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(v, i) for i, v in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [i for v, i in smallest_pairs]']",1000,0.005297899944707751,0.005404133023694158,0.006866600131615996,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(v, i) for i, v in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [i for v, i in smallest_pairs]']",10000,0.052848099963739514,0.054717640993185344,0.0649260999634862,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(v, i) for i, v in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [i for v, i in smallest_pairs]']",100000,0.6901970999315381,0.7188477249862626,0.7697046999819577,N/A
p3_find_n_smallest_number,prompt_2,81,"[""def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quick_select(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_idx = partition(arr, l, r)\n    if k == pivot_idx:\n        return arr[k]\n    elif k < pivot_idx:\n        return quick_select(arr, l, pivot_idx - 1, k)\n    else:\n        return quick_select(arr, pivot_idx + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k > n:\n        return 'k should be smaller than array length'\n    k_smallest = [quick_select(arg1, 0, n - 1, i) for i in range(k)]\n    result = [i for i in range(n) if arg1[i] in k_smallest]\n    return result""]",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,81,"[""def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quick_select(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_idx = partition(arr, l, r)\n    if k == pivot_idx:\n        return arr[k]\n    elif k < pivot_idx:\n        return quick_select(arr, l, pivot_idx - 1, k)\n    else:\n        return quick_select(arr, pivot_idx + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k > n:\n        return 'k should be smaller than array length'\n    k_smallest = [quick_select(arg1, 0, n - 1, i) for i in range(k)]\n    result = [i for i in range(n) if arg1[i] in k_smallest]\n    return result""]",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,81,"[""def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quick_select(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_idx = partition(arr, l, r)\n    if k == pivot_idx:\n        return arr[k]\n    elif k < pivot_idx:\n        return quick_select(arr, l, pivot_idx - 1, k)\n    else:\n        return quick_select(arr, pivot_idx + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    n = len(arg1)\n    if k > n:\n        return 'k should be smaller than array length'\n    k_smallest = [quick_select(arg1, 0, n - 1, i) for i in range(k)]\n    result = [i for i in range(n) if arg1[i] in k_smallest]\n    return result""]",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,82,"['def funcImp(arg1, arg2):\n    temp = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return temp[:arg2]']",1000,0.007044099969789386,0.007484779001679272,0.009532200172543526,N/A
p3_find_n_smallest_number,prompt_2,82,"['def funcImp(arg1, arg2):\n    temp = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return temp[:arg2]']",10000,0.11141359992325306,0.11372001899639145,0.13135949987918139,N/A
p3_find_n_smallest_number,prompt_2,82,"['def funcImp(arg1, arg2):\n    temp = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return temp[:arg2]']",100000,1.586717199999839,1.6193594769993798,1.6836991000454873,N/A
p3_find_n_smallest_number,prompt_2,83,"['import random\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivotIndex = random.randint(left, right)\n    pivotIndex = partition(arr, left, right)\n    if k == pivotIndex:\n        return pivotIndex\n    elif k < pivotIndex:\n        return quickselect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickselect(arr, pivotIndex + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    kSmallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        index = quickselect(kSmallest, 0, arg2 - 1, 0)\n        if arg1[i] < kSmallest[index]:\n            kSmallest[index] = arg1[i]\n            indexes[index] = i\n    return indexes']",1000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_2,83,"['import random\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivotIndex = random.randint(left, right)\n    pivotIndex = partition(arr, left, right)\n    if k == pivotIndex:\n        return pivotIndex\n    elif k < pivotIndex:\n        return quickselect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickselect(arr, pivotIndex + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    kSmallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        index = quickselect(kSmallest, 0, arg2 - 1, 0)\n        if arg1[i] < kSmallest[index]:\n            kSmallest[index] = arg1[i]\n            indexes[index] = i\n    return indexes']",10000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_2,83,"['import random\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivotIndex = random.randint(left, right)\n    pivotIndex = partition(arr, left, right)\n    if k == pivotIndex:\n        return pivotIndex\n    elif k < pivotIndex:\n        return quickselect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickselect(arr, pivotIndex + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    kSmallest = arg1[:arg2]\n    for i in range(arg2, len(arg1)):\n        index = quickselect(kSmallest, 0, arg2 - 1, 0)\n        if arg1[i] < kSmallest[index]:\n            kSmallest[index] = arg1[i]\n            indexes[index] = i\n    return indexes']",100000,0,0,0,	 exception: list assignment index out of range
p3_find_n_smallest_number,prompt_2,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    index_dict = {}\n    for i, value in enumerate(arg1):\n        if value in index_dict:\n            index_dict[value].append(i)\n        else:\n            index_dict[value] = [i]\n    sorted_vals = sorted(list(set(arg1)))\n    result = []\n    for val in sorted_vals[:arg2]:\n        result += index_dict[val]\n    return sorted(result)']",1000,0.006445200182497501,0.006829444007016718,0.009273800067603588,N/A
p3_find_n_smallest_number,prompt_2,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    index_dict = {}\n    for i, value in enumerate(arg1):\n        if value in index_dict:\n            index_dict[value].append(i)\n        else:\n            index_dict[value] = [i]\n    sorted_vals = sorted(list(set(arg1)))\n    result = []\n    for val in sorted_vals[:arg2]:\n        result += index_dict[val]\n    return sorted(result)']",10000,0.07573530008085072,0.07779567099409178,0.08748840005137026,N/A
p3_find_n_smallest_number,prompt_2,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    index_dict = {}\n    for i, value in enumerate(arg1):\n        if value in index_dict:\n            index_dict[value].append(i)\n        else:\n            index_dict[value] = [i]\n    sorted_vals = sorted(list(set(arg1)))\n    result = []\n    for val in sorted_vals[:arg2]:\n        result += index_dict[val]\n    return sorted(result)']",100000,1.6968145000282675,1.7328547310153954,1.7796554998494685,N/A
p3_find_n_smallest_number,prompt_2,85,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[0]\n        lows = [x for x in nums if x < pivot]\n        highs = [x for x in nums if x > pivot]\n        pivots = [x for x in nums if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + quickselect(highs, k - len(lows) - len(pivots))\n    smallest = []\n    for i in range(arg2):\n        idx = quickselect(arg1, i)\n        smallest.append(idx)\n    return smallest']",1000,0.030094899935647845,0.031203024010173976,0.039152099983766675,N/A
p3_find_n_smallest_number,prompt_2,85,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[0]\n        lows = [x for x in nums if x < pivot]\n        highs = [x for x in nums if x > pivot]\n        pivots = [x for x in nums if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + quickselect(highs, k - len(lows) - len(pivots))\n    smallest = []\n    for i in range(arg2):\n        idx = quickselect(arg1, i)\n        smallest.append(idx)\n    return smallest']",10000,0.3896604001056403,0.3991457439796068,0.4172406999859959,N/A
p3_find_n_smallest_number,prompt_2,85,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return 0\n        pivot = nums[0]\n        lows = [x for x in nums if x < pivot]\n        highs = [x for x in nums if x > pivot]\n        pivots = [x for x in nums if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return len(lows)\n        else:\n            return len(lows) + quickselect(highs, k - len(lows) - len(pivots))\n    smallest = []\n    for i in range(arg2):\n        idx = quickselect(arg1, i)\n        smallest.append(idx)\n    return smallest']",100000,4.704840099904686,4.75292739300523,5.0246058001648635,N/A
p3_find_n_smallest_number,prompt_2,86,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Error: k is greater than length of array.'\n    smallest_indices = []\n    sorted_array = arg1.copy()\n    sorted_array.sort()\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        smallest_indices.append(index)\n    return smallest_indices""]",1000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_2,86,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Error: k is greater than length of array.'\n    smallest_indices = []\n    sorted_array = arg1.copy()\n    sorted_array.sort()\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        smallest_indices.append(index)\n    return smallest_indices""]",10000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_2,86,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Error: k is greater than length of array.'\n    smallest_indices = []\n    sorted_array = arg1.copy()\n    sorted_array.sort()\n    for i in range(arg2):\n        index = arg1.index(sorted_array[i])\n        smallest_indices.append(index)\n    return smallest_indices""]",100000,0,0,0,	 exception: name 'k' is not defined
p3_find_n_smallest_number,prompt_2,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    smallest = []\n    for num in sorted(index_dict.keys())[:arg2]:\n        smallest.extend(index_dict[num])\n    return smallest']",1000,0.008632099954411387,0.009148040011059493,0.01067039999179542,N/A
p3_find_n_smallest_number,prompt_2,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    smallest = []\n    for num in sorted(index_dict.keys())[:arg2]:\n        smallest.extend(index_dict[num])\n    return smallest']",10000,0.1390079997945577,0.14188552600098775,0.1474776000250131,N/A
p3_find_n_smallest_number,prompt_2,87,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    smallest = []\n    for num in sorted(index_dict.keys())[:arg2]:\n        smallest.extend(index_dict[num])\n    return smallest']",100000,2.2001423998735845,2.2365366789815018,2.3082699000369757,N/A
p3_find_n_smallest_number,prompt_2,88,"['def funcImp(arg1, k):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_smallest_indices = []\n    for num in unique_nums:\n        if len(k_smallest_indices) == k:\n            break\n        indices = num_dict[num]\n        if len(k_smallest_indices) + len(indices) > k:\n            k_smallest_indices.extend(indices[:k - len(k_smallest_indices)])\n        else:\n            k_smallest_indices.extend(indices)\n    return k_smallest_indices']",1000,0.006202199961990118,0.006493237006943673,0.007557000033557415,N/A
p3_find_n_smallest_number,prompt_2,88,"['def funcImp(arg1, k):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_smallest_indices = []\n    for num in unique_nums:\n        if len(k_smallest_indices) == k:\n            break\n        indices = num_dict[num]\n        if len(k_smallest_indices) + len(indices) > k:\n            k_smallest_indices.extend(indices[:k - len(k_smallest_indices)])\n        else:\n            k_smallest_indices.extend(indices)\n    return k_smallest_indices']",10000,0.07459269999526441,0.07638051900081337,0.07879730011336505,N/A
p3_find_n_smallest_number,prompt_2,88,"['def funcImp(arg1, k):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(set(arg1))\n    k_smallest_indices = []\n    for num in unique_nums:\n        if len(k_smallest_indices) == k:\n            break\n        indices = num_dict[num]\n        if len(k_smallest_indices) + len(indices) > k:\n            k_smallest_indices.extend(indices[:k - len(k_smallest_indices)])\n        else:\n            k_smallest_indices.extend(indices)\n    return k_smallest_indices']",100000,1.5714332999195904,1.6047246560058557,1.6428340000566095,N/A
p3_find_n_smallest_number,prompt_2,89,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1.sort()\n    return [index_dict[arg1[i]] for i in range(arg2)]']",1000,0.0028838999569416046,0.0030318859848193825,0.003696999978274107,N/A
p3_find_n_smallest_number,prompt_2,89,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1.sort()\n    return [index_dict[arg1[i]] for i in range(arg2)]']",10000,0.028441500151529908,0.030221630004234612,0.036623400170356035,N/A
p3_find_n_smallest_number,prompt_2,89,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1.sort()\n    return [index_dict[arg1[i]] for i in range(arg2)]']",100000,0.647382800001651,0.6860735599999316,0.70757140009664,N/A
p3_find_n_smallest_number,prompt_2,90,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return 'Error: k is greater than the length of the array'\n    k_smallest = arr[:k]\n    heapq.heapify(k_smallest)\n    for i in range(k, len(arr)):\n        if arr[i] < k_smallest[-1]:\n            heapq.heappop(k_smallest)\n            heapq.heappush(k_smallest, arr[i])\n    result = {}\n    for num in k_smallest:\n        result[num] = [i for i, x in enumerate(arr) if x == num]\n    return result""]",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,90,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return 'Error: k is greater than the length of the array'\n    k_smallest = arr[:k]\n    heapq.heapify(k_smallest)\n    for i in range(k, len(arr)):\n        if arr[i] < k_smallest[-1]:\n            heapq.heappop(k_smallest)\n            heapq.heappush(k_smallest, arr[i])\n    result = {}\n    for num in k_smallest:\n        result[num] = [i for i, x in enumerate(arr) if x == num]\n    return result""]",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,90,"[""def funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return 'Error: k is greater than the length of the array'\n    k_smallest = arr[:k]\n    heapq.heapify(k_smallest)\n    for i in range(k, len(arr)):\n        if arr[i] < k_smallest[-1]:\n            heapq.heappop(k_smallest)\n            heapq.heappush(k_smallest, arr[i])\n    result = {}\n    for num in k_smallest:\n        result[num] = [i for i, x in enumerate(arr) if x == num]\n    return result""]",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_2,91,"['def funcImp(arg1, k):\n    data_dict = {}\n    for i, num in enumerate(arg1):\n        data_dict[num] = i\n    arg1.sort()\n    result = [data_dict[arg1[i]] for i in range(k)]\n    return result']",1000,0.0031767000909894705,0.003241477010305971,0.0033453998621553183,N/A
p3_find_n_smallest_number,prompt_2,91,"['def funcImp(arg1, k):\n    data_dict = {}\n    for i, num in enumerate(arg1):\n        data_dict[num] = i\n    arg1.sort()\n    result = [data_dict[arg1[i]] for i in range(k)]\n    return result']",10000,0.03087499993853271,0.03229021200211719,0.04822300001978874,N/A
p3_find_n_smallest_number,prompt_2,91,"['def funcImp(arg1, k):\n    data_dict = {}\n    for i, num in enumerate(arg1):\n        data_dict[num] = i\n    arg1.sort()\n    result = [data_dict[arg1[i]] for i in range(k)]\n    return result']",100000,0.6964443000033498,0.7251827039918862,0.7543495998252183,N/A
p3_find_n_smallest_number,prompt_2,92,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'Error: k is greater than the length of the input array.'\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_values = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    smallest_indexes = [i[0] for i in sorted_values]\n    return smallest_indexes""]",1000,0.010046500014141202,0.010425554991234093,0.010983400046825409,N/A
p3_find_n_smallest_number,prompt_2,92,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'Error: k is greater than the length of the input array.'\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_values = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    smallest_indexes = [i[0] for i in sorted_values]\n    return smallest_indexes""]",10000,0.15876820008270442,0.16428434997797012,0.1733804999385029,N/A
p3_find_n_smallest_number,prompt_2,92,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'Error: k is greater than the length of the input array.'\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_values = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    smallest_indexes = [i[0] for i in sorted_values]\n    return smallest_indexes""]",100000,2.5429060999304056,2.601152342981659,2.7615882998798043,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [x[1] for x in heapq.nsmallest(arg2, min_heap)]']",1000,0.002306099981069565,0.00244710601400584,0.0026241999585181475,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [x[1] for x in heapq.nsmallest(arg2, min_heap)]']",10000,0.022651199949905276,0.02342161398846656,0.02639579982496798,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [x[1] for x in heapq.nsmallest(arg2, min_heap)]']",100000,0.22820309991948307,0.2317246969952248,0.24121410003863275,N/A
p3_find_n_smallest_number,prompt_2,94,"['import random\n\ndef partition(lst, pivot):\n    left = []\n    right = []\n    for elem in lst:\n        if elem <= pivot:\n            left.append(elem)\n        else:\n            right.append(elem)\n    return (left, right)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    left, right = partition(lst, pivot)\n    if k < len(left):\n        return quickselect(left, k)\n    elif k >= len(lst) - len(right):\n        return quickselect(right, k - (len(lst) - len(right)))\n    else:\n        return pivot\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest]\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded while calling a Python object
p3_find_n_smallest_number,prompt_2,94,"['import random\n\ndef partition(lst, pivot):\n    left = []\n    right = []\n    for elem in lst:\n        if elem <= pivot:\n            left.append(elem)\n        else:\n            right.append(elem)\n    return (left, right)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    left, right = partition(lst, pivot)\n    if k < len(left):\n        return quickselect(left, k)\n    elif k >= len(lst) - len(right):\n        return quickselect(right, k - (len(lst) - len(right)))\n    else:\n        return pivot\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest]\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded while calling a Python object
p3_find_n_smallest_number,prompt_2,94,"['import random\n\ndef partition(lst, pivot):\n    left = []\n    right = []\n    for elem in lst:\n        if elem <= pivot:\n            left.append(elem)\n        else:\n            right.append(elem)\n    return (left, right)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    left, right = partition(lst, pivot)\n    if k < len(left):\n        return quickselect(left, k)\n    elif k >= len(lst) - len(right):\n        return quickselect(right, k - (len(lst) - len(right)))\n    else:\n        return pivot\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, k - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest]\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded while calling a Python object
p3_find_n_smallest_number,prompt_2,95,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    sorted_indexes = sorted([x[0] for x in k_smallest])\n    return sorted_indexes']",1000,0.010107100009918213,0.010683241006918252,0.012874099891632795,N/A
p3_find_n_smallest_number,prompt_2,95,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    sorted_indexes = sorted([x[0] for x in k_smallest])\n    return sorted_indexes']",10000,0.16185649996623397,0.1691884790058248,0.18197020003572106,N/A
p3_find_n_smallest_number,prompt_2,95,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i in range(len(arg1)):\n        num_dict[i] = arg1[i]\n    sorted_dict = sorted(num_dict.items(), key=lambda x: x[1])\n    k_smallest = sorted_dict[:arg2]\n    sorted_indexes = sorted([x[0] for x in k_smallest])\n    return sorted_indexes']",100000,2.6013515000231564,2.6512692309892736,2.72575889993459,N/A
p3_find_n_smallest_number,prompt_2,96,"['def funcImp(arg1, arg2):\n    k = arg2\n    dict_val = {i: arg1[i] for i in range(len(arg1))}\n    smallest = sorted(dict_val, key=dict_val.get)[:k]\n    smallest.sort()\n    return smallest']",1000,0.007458699867129326,0.007757865008898079,0.009451900143176317,N/A
p3_find_n_smallest_number,prompt_2,96,"['def funcImp(arg1, arg2):\n    k = arg2\n    dict_val = {i: arg1[i] for i in range(len(arg1))}\n    smallest = sorted(dict_val, key=dict_val.get)[:k]\n    smallest.sort()\n    return smallest']",10000,0.1166500998660922,0.11992288899607956,0.14160860003903508,N/A
p3_find_n_smallest_number,prompt_2,96,"['def funcImp(arg1, arg2):\n    k = arg2\n    dict_val = {i: arg1[i] for i in range(len(arg1))}\n    smallest = sorted(dict_val, key=dict_val.get)[:k]\n    smallest.sort()\n    return smallest']",100000,1.8350875000469387,1.863531285005156,1.9225097000598907,N/A
p3_find_n_smallest_number,prompt_2,97,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        minIndex = arg1.index(min(arg1))\n        indexes.append(minIndex)\n        arg1[minIndex] = float('inf')\n    return indexes""]",1000,0.0022245999425649643,0.002349264014046639,0.00789069989696145,N/A
p3_find_n_smallest_number,prompt_2,97,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        minIndex = arg1.index(min(arg1))\n        indexes.append(minIndex)\n        arg1[minIndex] = float('inf')\n    return indexes""]",10000,0.022272400092333555,0.033192528993822634,0.08864969993010163,N/A
p3_find_n_smallest_number,prompt_2,97,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        minIndex = arg1.index(min(arg1))\n        indexes.append(minIndex)\n        arg1[minIndex] = float('inf')\n    return indexes""]",100000,0.33680679998360574,0.7391077529801987,1.086525100050494,N/A
p3_find_n_smallest_number,prompt_2,98,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    if k > n:\n        return []\n    l = 0\n    r = n - 1\n    while l <= r:\n        idx = partition(arr, l, r)\n        if idx == k:\n            return list(range(k))\n        elif idx < k:\n            l = idx + 1\n        else:\n            r = idx - 1\n    return list(range(k))\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,2.0260340999811888,2.1404324699938297,2.205638299928978,N/A
p3_find_n_smallest_number,prompt_2,98,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    if k > n:\n        return []\n    l = 0\n    r = n - 1\n    while l <= r:\n        idx = partition(arr, l, r)\n        if idx == k:\n            return list(range(k))\n        elif idx < k:\n            l = idx + 1\n        else:\n            r = idx - 1\n    return list(range(k))\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,98,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    n = len(arr)\n    if k > n:\n        return []\n    l = 0\n    r = n - 1\n    while l <= r:\n        idx = partition(arr, l, r)\n        if idx == k:\n            return list(range(k))\n        elif idx < k:\n            l = idx + 1\n        else:\n            r = idx - 1\n    return list(range(k))\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,99,"['def funcImp(arg1, arg2):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indices = []\n    for element in smallest_k:\n        indices.append(index_dict[element])\n    indices.sort()\n    return indices']",1000,0.005395499989390373,0.005881202006712556,0.010836699977517128,N/A
p3_find_n_smallest_number,prompt_2,99,"['def funcImp(arg1, arg2):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indices = []\n    for element in smallest_k:\n        indices.append(index_dict[element])\n    indices.sort()\n    return indices']",10000,0.10425340011715889,0.10811740599572658,0.11753539997152984,N/A
p3_find_n_smallest_number,prompt_2,99,"['def funcImp(arg1, arg2):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indices = []\n    for element in smallest_k:\n        indices.append(index_dict[element])\n    indices.sort()\n    return indices']",100000,1.5915330999996513,1.6428844499983826,1.6800682998728007,N/A
p3_find_n_smallest_number,prompt_2,100,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",1000,0.007057199953123927,0.007458782000467182,0.00835510017350316,N/A
p3_find_n_smallest_number,prompt_2,100,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",10000,0.11279090004973114,0.11575983300805091,0.12649410008452833,N/A
p3_find_n_smallest_number,prompt_2,100,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",100000,1.5943775000050664,1.6386559070111253,1.708187600132078,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(abs(arg2), ((n, i) for i, n in enumerate(arg1)))\n    result = sorted((idx for num, idx in k_smallest))\n    return result']",1000,0.005690200021490455,0.0059580649854615335,0.00945689994841814,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(abs(arg2), ((n, i) for i, n in enumerate(arg1)))\n    result = sorted((idx for num, idx in k_smallest))\n    return result']",10000,0.05387489986605942,0.055907305008731784,0.05937730008736253,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(abs(arg2), ((n, i) for i, n in enumerate(arg1)))\n    result = sorted((idx for num, idx in k_smallest))\n    return result']",100000,0.5484718999359757,0.5625167619995772,0.6050363001413643,N/A
p3_find_n_smallest_number,prompt_3,2,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",1000,0.005773500073701143,0.006137052993290126,0.007106199860572815,N/A
p3_find_n_smallest_number,prompt_3,2,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",10000,0.10784700000658631,0.1112574090063572,0.12655260018073022,N/A
p3_find_n_smallest_number,prompt_3,2,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[num] = i\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(index_dict[num])\n    return result']",100000,1.6509126999881119,1.691771485004574,1.743282799841836,N/A
p3_find_n_smallest_number,prompt_3,3,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    indices = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return sorted(indices)']",1000,0.0070992999244481325,0.00749668799340725,0.010454499861225486,N/A
p3_find_n_smallest_number,prompt_3,3,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    indices = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return sorted(indices)']",10000,0.11030790000222623,0.11394970000488684,0.12065049982629716,N/A
p3_find_n_smallest_number,prompt_3,3,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    indices = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return sorted(indices)']",100000,1.6135311999823898,1.6639231740077958,1.7251889000181109,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",1000,0.0049097000155597925,0.0051294400170445445,0.007681099930778146,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",10000,0.05120250000618398,0.05238153502345085,0.05644580000080168,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",100000,0.5141596000175923,0.5279916219948791,0.563148699933663,N/A
p3_find_n_smallest_number,prompt_3,5,"['def funcImp(arg1, arg2):\n\n    def quick_select(left, right, k):\n        if left == right:\n            return (left,)\n        pivot_index = random.randint(left, right)\n        arg1[pivot_index], arg1[right] = (arg1[right], arg1[pivot_index])\n        i = left - 1\n        for j in range(left, right):\n            if arg1[j] < arg1[right]:\n                i += 1\n                arg1[i], arg1[j] = (arg1[j], arg1[i])\n        i += 1\n        arg1[i], arg1[right] = (arg1[right], arg1[i])\n        if k == i - left + 1:\n            return tuple(range(left, i + 1))\n        elif k < i - left + 1:\n            return quick_select(left, i - 1, k)\n        else:\n            return quick_select(i + 1, right, k - (i - left + 1))\n    indices = quick_select(0, len(arg1) - 1, arg2)\n    values = [arg1[i] for i in indices]\n    return (indices, values)']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,5,"['def funcImp(arg1, arg2):\n\n    def quick_select(left, right, k):\n        if left == right:\n            return (left,)\n        pivot_index = random.randint(left, right)\n        arg1[pivot_index], arg1[right] = (arg1[right], arg1[pivot_index])\n        i = left - 1\n        for j in range(left, right):\n            if arg1[j] < arg1[right]:\n                i += 1\n                arg1[i], arg1[j] = (arg1[j], arg1[i])\n        i += 1\n        arg1[i], arg1[right] = (arg1[right], arg1[i])\n        if k == i - left + 1:\n            return tuple(range(left, i + 1))\n        elif k < i - left + 1:\n            return quick_select(left, i - 1, k)\n        else:\n            return quick_select(i + 1, right, k - (i - left + 1))\n    indices = quick_select(0, len(arg1) - 1, arg2)\n    values = [arg1[i] for i in indices]\n    return (indices, values)']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,5,"['def funcImp(arg1, arg2):\n\n    def quick_select(left, right, k):\n        if left == right:\n            return (left,)\n        pivot_index = random.randint(left, right)\n        arg1[pivot_index], arg1[right] = (arg1[right], arg1[pivot_index])\n        i = left - 1\n        for j in range(left, right):\n            if arg1[j] < arg1[right]:\n                i += 1\n                arg1[i], arg1[j] = (arg1[j], arg1[i])\n        i += 1\n        arg1[i], arg1[right] = (arg1[right], arg1[i])\n        if k == i - left + 1:\n            return tuple(range(left, i + 1))\n        elif k < i - left + 1:\n            return quick_select(left, i - 1, k)\n        else:\n            return quick_select(i + 1, right, k - (i - left + 1))\n    indices = quick_select(0, len(arg1) - 1, arg2)\n    values = [arg1[i] for i in indices]\n    return (indices, values)']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices = []\n    heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",1000,0.0032217998523265123,0.003389128998387605,0.003931200131773949,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices = []\n    heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",10000,0.03512130002491176,0.036523867989890275,0.03762079984880984,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices = []\n    heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",100000,0.23822699999436736,0.24416951100807638,0.2739467001520097,N/A
p3_find_n_smallest_number,prompt_3,7,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.006979800062254071,0.007445240991655737,0.010006299940869212,N/A
p3_find_n_smallest_number,prompt_3,7,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.10897190007381141,0.11389837899943814,0.13278039987199008,N/A
p3_find_n_smallest_number,prompt_3,7,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.6043125002179295,1.6632389150047675,1.7358629000373185,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_indexes = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_indexes]']",1000,0.0050472000148147345,0.005265371981076896,0.0057849998120218515,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_indexes = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_indexes]']",10000,0.052974099991843104,0.055334263995755466,0.06270430004224181,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_indexes = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_indexes]']",100000,0.6777919000014663,0.6960287500033155,0.7282545999623835,N/A
p3_find_n_smallest_number,prompt_3,9,"['def funcImp(arg1, k):\n    from heapq import nsmallest\n    smallest = nsmallest(k, arg1)\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.0018933000974357128,0.002030234003905207,0.003023599972948432,N/A
p3_find_n_smallest_number,prompt_3,9,"['def funcImp(arg1, k):\n    from heapq import nsmallest\n    smallest = nsmallest(k, arg1)\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.019687100080773234,0.02070180200273171,0.0243369999807328,N/A
p3_find_n_smallest_number,prompt_3,9,"['def funcImp(arg1, k):\n    from heapq import nsmallest\n    smallest = nsmallest(k, arg1)\n    indexes = []\n    for num in smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,0.2446058001369238,0.2533955900114961,0.28409840003587306,N/A
p3_find_n_smallest_number,prompt_3,10,"['import heapq\n\ndef funcImp(lst, k):\n    heap = [(val, idx) for idx, val in enumerate(lst[:k])]\n    heapq.heapify(heap)\n    for i in range(k, len(lst)):\n        if lst[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (lst[i], i))\n    return sorted(heap)']",1000,0.009436099790036678,0.009866414002608508,0.01025549997575581,N/A
p3_find_n_smallest_number,prompt_3,10,"['import heapq\n\ndef funcImp(lst, k):\n    heap = [(val, idx) for idx, val in enumerate(lst[:k])]\n    heapq.heapify(heap)\n    for i in range(k, len(lst)):\n        if lst[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (lst[i], i))\n    return sorted(heap)']",10000,0.07150059984996915,0.07351952799828723,0.07758589996956289,N/A
p3_find_n_smallest_number,prompt_3,10,"['import heapq\n\ndef funcImp(lst, k):\n    heap = [(val, idx) for idx, val in enumerate(lst[:k])]\n    heapq.heapify(heap)\n    for i in range(k, len(lst)):\n        if lst[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (lst[i], i))\n    return sorted(heap)']",100000,1.1339636999182403,1.1561565809999592,1.2293388000689447,N/A
p3_find_n_smallest_number,prompt_3,11,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in sorted_list[:k]]']",1000,0.008164800005033612,0.008698973995633423,0.012672899989411235,N/A
p3_find_n_smallest_number,prompt_3,11,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in sorted_list[:k]]']",10000,0.14024970005266368,0.14875865498790516,0.1652825998608023,N/A
p3_find_n_smallest_number,prompt_3,11,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in sorted_list[:k]]']",100000,2.119079800089821,2.1680751280044204,2.2485011001117527,N/A
p3_find_n_smallest_number,prompt_3,12,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",1000,0.006031600059941411,0.006481567020528018,0.007271500071510673,N/A
p3_find_n_smallest_number,prompt_3,12,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",10000,0.10836470010690391,0.1115407960047014,0.12067790003493428,N/A
p3_find_n_smallest_number,prompt_3,12,"['def funcImp(arg1, arg2):\n    sorted_arg1 = sorted(arg1)\n    k_smallest = sorted_arg1[:arg2]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",100000,1.4079065001569688,1.443175222002901,1.592648799996823,N/A
p3_find_n_smallest_number,prompt_3,13,"['def funcImp(arg1, arg2):\n    dict1 = {val: i for i, val in enumerate(arg1)}\n    smlst_vals = sorted(dict1.keys())[:arg2]\n    return [dict1[val] for val in smlst_vals]']",1000,0.005817099940031767,0.006141329992096871,0.0079369000159204,N/A
p3_find_n_smallest_number,prompt_3,13,"['def funcImp(arg1, arg2):\n    dict1 = {val: i for i, val in enumerate(arg1)}\n    smlst_vals = sorted(dict1.keys())[:arg2]\n    return [dict1[val] for val in smlst_vals]']",10000,0.10681649995967746,0.11014839999610558,0.12231610016897321,N/A
p3_find_n_smallest_number,prompt_3,13,"['def funcImp(arg1, arg2):\n    dict1 = {val: i for i, val in enumerate(arg1)}\n    smlst_vals = sorted(dict1.keys())[:arg2]\n    return [dict1[val] for val in smlst_vals]']",100000,1.6343918000347912,1.7050805360008963,1.7637039998080581,N/A
p3_find_n_smallest_number,prompt_3,14,"['def funcImp(arg1, arg2):\n    indexes = []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    temp = arg1[:k]\n    min_index = temp.index(min(temp))\n    indexes.append(min_index)\n    for i in range(k, len(arg1)):\n        if arg1[i] < max(temp):\n            temp[temp.index(max(temp))] = arg1[i]\n            min_index = temp.index(min(temp))\n            indexes.append(i) if min_index != k else None\n    return indexes']",1000,0.007764599984511733,0.008039145013317466,0.009110900107771158,N/A
p3_find_n_smallest_number,prompt_3,14,"['def funcImp(arg1, arg2):\n    indexes = []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    temp = arg1[:k]\n    min_index = temp.index(min(temp))\n    indexes.append(min_index)\n    for i in range(k, len(arg1)):\n        if arg1[i] < max(temp):\n            temp[temp.index(max(temp))] = arg1[i]\n            min_index = temp.index(min(temp))\n            indexes.append(i) if min_index != k else None\n    return indexes']",10000,0.0721313999965787,0.07483932999894023,0.0814788001589477,N/A
p3_find_n_smallest_number,prompt_3,14,"['def funcImp(arg1, arg2):\n    indexes = []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    temp = arg1[:k]\n    min_index = temp.index(min(temp))\n    indexes.append(min_index)\n    for i in range(k, len(arg1)):\n        if arg1[i] < max(temp):\n            temp[temp.index(max(temp))] = arg1[i]\n            min_index = temp.index(min(temp))\n            indexes.append(i) if min_index != k else None\n    return indexes']",100000,0.7297350000590086,0.7455353929917328,0.7703841000329703,N/A
p3_find_n_smallest_number,prompt_3,15,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[val] = i\n    sorted_keys = sorted(d.keys())\n    return [d[sorted_keys[i]] for i in range(arg2)]']",1000,0.006111799972131848,0.006611209011171013,0.012878000037744641,N/A
p3_find_n_smallest_number,prompt_3,15,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[val] = i\n    sorted_keys = sorted(d.keys())\n    return [d[sorted_keys[i]] for i in range(arg2)]']",10000,0.11005020001903176,0.11404268299229443,0.15470560011453927,N/A
p3_find_n_smallest_number,prompt_3,15,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[val] = i\n    sorted_keys = sorted(d.keys())\n    return [d[sorted_keys[i]] for i in range(arg2)]']",100000,1.6712259999476373,1.708914157007821,1.7650566000957042,N/A
p3_find_n_smallest_number,prompt_3,16,"['def funcImp(arg1, arg2):\n    indices = list(range(len(arg1)))\n    elements = {arg1[i]: i for i in indices}\n    smallest_k = sorted(arg1)[:arg2]\n    result = [elements[element] for element in smallest_k]\n    return result']",1000,0.00569240003824234,0.00601302400464192,0.010431800037622452,N/A
p3_find_n_smallest_number,prompt_3,16,"['def funcImp(arg1, arg2):\n    indices = list(range(len(arg1)))\n    elements = {arg1[i]: i for i in indices}\n    smallest_k = sorted(arg1)[:arg2]\n    result = [elements[element] for element in smallest_k]\n    return result']",10000,0.10544850002042949,0.10930464699398726,0.11716460017487407,N/A
p3_find_n_smallest_number,prompt_3,16,"['def funcImp(arg1, arg2):\n    indices = list(range(len(arg1)))\n    elements = {arg1[i]: i for i in indices}\n    smallest_k = sorted(arg1)[:arg2]\n    result = [elements[element] for element in smallest_k]\n    return result']",100000,1.6910713000688702,1.7296680630091579,1.7639235998503864,N/A
p3_find_n_smallest_number,prompt_3,17,"['def funcImp(arg1, arg2):\n    index_dict = {val: idx for idx, val in enumerate(arg1)}\n    sorted_lst = sorted(arg1)[:arg2]\n    smallest_indexes = [index_dict[val] for val in sorted_lst]\n    return smallest_indexes']",1000,0.0057119999546557665,0.006111586003098637,0.008375799981877208,N/A
p3_find_n_smallest_number,prompt_3,17,"['def funcImp(arg1, arg2):\n    index_dict = {val: idx for idx, val in enumerate(arg1)}\n    sorted_lst = sorted(arg1)[:arg2]\n    smallest_indexes = [index_dict[val] for val in sorted_lst]\n    return smallest_indexes']",10000,0.10605970001779497,0.11020154899684713,0.11741090007126331,N/A
p3_find_n_smallest_number,prompt_3,17,"['def funcImp(arg1, arg2):\n    index_dict = {val: idx for idx, val in enumerate(arg1)}\n    sorted_lst = sorted(arg1)[:arg2]\n    smallest_indexes = [index_dict[val] for val in sorted_lst]\n    return smallest_indexes']",100000,1.6421600999310613,1.6782993019907735,1.7385350000113249,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[index], index))\n    return sorted([index for _, index in heap])']",1000,0.009494200116023421,0.010058449015486986,0.017493899911642075,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[index], index))\n    return sorted([index for _, index in heap])']",10000,0.0710634000133723,0.073006982000079,0.0789856999181211,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[index], index))\n    return sorted([index for _, index in heap])']",100000,1.136774400016293,1.161063251006417,1.2117087999358773,N/A
p3_find_n_smallest_number,prompt_3,19,"['def funcImp(arg1, arg2):\n    indexed_arg1 = [(i, val) for i, val in enumerate(arg1)]\n    sorted_arg1 = sorted(indexed_arg1, key=lambda x: x[1])\n    return sorted([x[0] for x in sorted_arg1[:arg2]])']",1000,0.009460999863222241,0.010074904991779477,0.012819399824365973,N/A
p3_find_n_smallest_number,prompt_3,19,"['def funcImp(arg1, arg2):\n    indexed_arg1 = [(i, val) for i, val in enumerate(arg1)]\n    sorted_arg1 = sorted(indexed_arg1, key=lambda x: x[1])\n    return sorted([x[0] for x in sorted_arg1[:arg2]])']",10000,0.15325339999981225,0.15970676800236105,0.17953189997933805,N/A
p3_find_n_smallest_number,prompt_3,19,"['def funcImp(arg1, arg2):\n    indexed_arg1 = [(i, val) for i, val in enumerate(arg1)]\n    sorted_arg1 = sorted(indexed_arg1, key=lambda x: x[1])\n    return sorted([x[0] for x in sorted_arg1[:arg2]])']",100000,2.3012233001645654,2.3732819980126805,2.476290399907157,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",1000,0.011565499939024448,0.012190861005801707,0.013242200016975403,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",10000,0.1752945000771433,0.18309581800131128,0.1964516998268664,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",100000,2.7913911999203265,2.927152212001383,3.0843498001340777,N/A
p3_find_n_smallest_number,prompt_3,21,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    k_smallest = sorted_list[:arg2]\n    return [i for i, _ in k_smallest]']",1000,0.0081044000107795,0.008801452000625432,0.017231000121682882,N/A
p3_find_n_smallest_number,prompt_3,21,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    k_smallest = sorted_list[:arg2]\n    return [i for i, _ in k_smallest]']",10000,0.1381110001821071,0.14502698599826544,0.17048120009712875,N/A
p3_find_n_smallest_number,prompt_3,21,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    k_smallest = sorted_list[:arg2]\n    return [i for i, _ in k_smallest]']",100000,2.0912619000300765,2.151406977986917,2.213796699885279,N/A
p3_find_n_smallest_number,prompt_3,22,"['def funcImp(arg1, arg2):\n    value_to_index = {val: i for i, val in enumerate(arg1)}\n    sorted_values = sorted(arg1)\n    k_smallest = []\n    for val in sorted_values[:arg2]:\n        k_smallest.append(value_to_index[val])\n    return k_smallest']",1000,0.0056871999986469746,0.006094670994207263,0.010098600061610341,N/A
p3_find_n_smallest_number,prompt_3,22,"['def funcImp(arg1, arg2):\n    value_to_index = {val: i for i, val in enumerate(arg1)}\n    sorted_values = sorted(arg1)\n    k_smallest = []\n    for val in sorted_values[:arg2]:\n        k_smallest.append(value_to_index[val])\n    return k_smallest']",10000,0.10776869999244809,0.10994546599453316,0.11954970005899668,N/A
p3_find_n_smallest_number,prompt_3,22,"['def funcImp(arg1, arg2):\n    value_to_index = {val: i for i, val in enumerate(arg1)}\n    sorted_values = sorted(arg1)\n    k_smallest = []\n    for val in sorted_values[:arg2]:\n        k_smallest.append(value_to_index[val])\n    return k_smallest']",100000,1.643885500030592,1.6682185059948824,1.7043555001728237,N/A
p3_find_n_smallest_number,prompt_3,23,"['def funcImp(arg1, arg2):\n\n    def select(lst, l, r, index):\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[pivot_index], lst[r] = (lst[r], lst[pivot_index])\n        j = l\n        for i in range(l, r):\n            if lst[i] < lst[r]:\n                lst[i], lst[j] = (lst[j], lst[i])\n                j += 1\n        lst[r], lst[j] = (lst[j], lst[r])\n        if index == j:\n            return lst[j]\n        elif index < j:\n            return select(lst, l, j - 1, index)\n        else:\n            return select(lst, j + 1, r, index)\n    lst = arg1[:]\n    k = arg2\n    kth_smallest = select(lst, 0, len(lst) - 1, k - 1)\n    indexes = []\n    for i in range(len(lst)):\n        if lst[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == k:\n            break\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,23,"['def funcImp(arg1, arg2):\n\n    def select(lst, l, r, index):\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[pivot_index], lst[r] = (lst[r], lst[pivot_index])\n        j = l\n        for i in range(l, r):\n            if lst[i] < lst[r]:\n                lst[i], lst[j] = (lst[j], lst[i])\n                j += 1\n        lst[r], lst[j] = (lst[j], lst[r])\n        if index == j:\n            return lst[j]\n        elif index < j:\n            return select(lst, l, j - 1, index)\n        else:\n            return select(lst, j + 1, r, index)\n    lst = arg1[:]\n    k = arg2\n    kth_smallest = select(lst, 0, len(lst) - 1, k - 1)\n    indexes = []\n    for i in range(len(lst)):\n        if lst[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == k:\n            break\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,23,"['def funcImp(arg1, arg2):\n\n    def select(lst, l, r, index):\n        if l == r:\n            return lst[l]\n        pivot_index = random.randint(l, r)\n        lst[pivot_index], lst[r] = (lst[r], lst[pivot_index])\n        j = l\n        for i in range(l, r):\n            if lst[i] < lst[r]:\n                lst[i], lst[j] = (lst[j], lst[i])\n                j += 1\n        lst[r], lst[j] = (lst[j], lst[r])\n        if index == j:\n            return lst[j]\n        elif index < j:\n            return select(lst, l, j - 1, index)\n        else:\n            return select(lst, j + 1, r, index)\n    lst = arg1[:]\n    k = arg2\n    kth_smallest = select(lst, 0, len(lst) - 1, k - 1)\n    indexes = []\n    for i in range(len(lst)):\n        if lst[i] <= kth_smallest:\n            indexes.append(i)\n        if len(indexes) == k:\n            break\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_3,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",1000,0.0032639000564813614,0.00361053999979049,0.006219800096005201,N/A
p3_find_n_smallest_number,prompt_3,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",10000,0.08516080002300441,0.08733599199913442,0.09688910003751516,N/A
p3_find_n_smallest_number,prompt_3,24,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",100000,1.2062208000570536,1.2291523949918337,1.2615952999331057,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indices.append(i)\n    return indices']",1000,0.004400799982249737,0.004635797007940709,0.00527750002220273,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indices.append(i)\n    return indices']",10000,0.04327429994009435,0.044257684999611226,0.046751199988648295,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indices.append(i)\n    return indices']",100000,0.4352432999294251,0.44026080400217327,0.45184209989383817,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",1000,0.004549999954178929,0.004852981998119503,0.00783040001988411,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",10000,0.04241839982569218,0.0435481989942491,0.04678290011361241,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",100000,0.4394376000855118,0.4462007420114242,0.4734534998424351,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i, num in enumerate(arg1[arg2:], arg2):\n        if num < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (num, i))\n    res = [idx for num, idx in sorted(min_heap)]\n    return res']",1000,0.0026684000622481108,0.0028370120073668657,0.0036182000767439604,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i, num in enumerate(arg1[arg2:], arg2):\n        if num < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (num, i))\n    res = [idx for num, idx in sorted(min_heap)]\n    return res']",10000,0.027178100077435374,0.028515200989786535,0.03432630002498627,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i, num in enumerate(arg1[arg2:], arg2):\n        if num < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (num, i))\n    res = [idx for num, idx in sorted(min_heap)]\n    return res']",100000,0.2973786999937147,0.3081101129949093,0.3266640999354422,N/A
p3_find_n_smallest_number,prompt_3,28,"['def funcImp(arg1, arg2):\n    index_dict = {val: index for index, val in enumerate(arg1)}\n    smallest_k = sorted(arg1)[:arg2]\n    index_list = []\n    for num in smallest_k:\n        index_list.append(index_dict[num])\n    return index_list']",1000,0.005812200019136071,0.006085580007638782,0.0072015998885035515,N/A
p3_find_n_smallest_number,prompt_3,28,"['def funcImp(arg1, arg2):\n    index_dict = {val: index for index, val in enumerate(arg1)}\n    smallest_k = sorted(arg1)[:arg2]\n    index_list = []\n    for num in smallest_k:\n        index_list.append(index_dict[num])\n    return index_list']",10000,0.10752870002761483,0.11014240100281313,0.12432890012860298,N/A
p3_find_n_smallest_number,prompt_3,28,"['def funcImp(arg1, arg2):\n    index_dict = {val: index for index, val in enumerate(arg1)}\n    smallest_k = sorted(arg1)[:arg2]\n    index_list = []\n    for num in smallest_k:\n        index_list.append(index_dict[num])\n    return index_list']",100000,1.6456965999677777,1.6896981380088254,1.78670040005818,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.007048300001770258,0.0074078829842619594,0.008140200050547719,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.11133569991216063,0.11365920097799971,0.12096400000154972,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.593790699960664,1.6307272339961492,1.707096700090915,N/A
p3_find_n_smallest_number,prompt_3,30,"['def funcImp(arg1, arg2):\n    dict_ = {}\n    for i, num in enumerate(arg1):\n        dict_[i] = num\n    dict_ = sorted(dict_.items(), key=lambda x: x[1])\n    smallest_k = []\n    for i in range(arg2):\n        smallest_k.append(dict_[i][0])\n    return smallest_k']",1000,0.010327399941161275,0.010800651994068176,0.011990500148385763,N/A
p3_find_n_smallest_number,prompt_3,30,"['def funcImp(arg1, arg2):\n    dict_ = {}\n    for i, num in enumerate(arg1):\n        dict_[i] = num\n    dict_ = sorted(dict_.items(), key=lambda x: x[1])\n    smallest_k = []\n    for i in range(arg2):\n        smallest_k.append(dict_[i][0])\n    return smallest_k']",10000,0.16584190004505217,0.17234186098910867,0.1808156999759376,N/A
p3_find_n_smallest_number,prompt_3,30,"['def funcImp(arg1, arg2):\n    dict_ = {}\n    for i, num in enumerate(arg1):\n        dict_[i] = num\n    dict_ = sorted(dict_.items(), key=lambda x: x[1])\n    smallest_k = []\n    for i in range(arg2):\n        smallest_k.append(dict_[i][0])\n    return smallest_k']",100000,2.655878799967468,2.7052991500054486,2.84566089999862,N/A
p3_find_n_smallest_number,prompt_3,31,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",1000,0.00694280001334846,0.008708396996371447,0.034167799865826964,N/A
p3_find_n_smallest_number,prompt_3,31,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",10000,0.1150439998600632,0.11713525800500064,0.12180740013718605,N/A
p3_find_n_smallest_number,prompt_3,31,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices']",100000,1.6120875999331474,1.6373715770011767,1.7131926000583917,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in k_smallest]\n    return indexes']",1000,0.004760799929499626,0.0048430610098876056,0.0050796999130398035,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in k_smallest]\n    return indexes']",10000,0.042616300052031875,0.043912729003932324,0.04647050006315112,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in k_smallest]\n    return indexes']",100000,0.4388329000212252,0.44358508601551877,0.47884880006313324,N/A
p3_find_n_smallest_number,prompt_3,33,"['def funcImp(arg1, arg2):\n    arr_with_index = [(value, index) for index, value in enumerate(arg1)]\n    arr_with_index.sort()\n    return [x[1] for x in arr_with_index[:arg2]]']",1000,0.011540199862793088,0.012077064004261047,0.015958699863404036,N/A
p3_find_n_smallest_number,prompt_3,33,"['def funcImp(arg1, arg2):\n    arr_with_index = [(value, index) for index, value in enumerate(arg1)]\n    arr_with_index.sort()\n    return [x[1] for x in arr_with_index[:arg2]]']",10000,0.17880379990674555,0.18362950798822567,0.2097716999705881,N/A
p3_find_n_smallest_number,prompt_3,33,"['def funcImp(arg1, arg2):\n    arr_with_index = [(value, index) for index, value in enumerate(arg1)]\n    arr_with_index.sort()\n    return [x[1] for x in arr_with_index[:arg2]]']",100000,2.822462300071493,2.8845872589969077,3.027158100157976,N/A
p3_find_n_smallest_number,prompt_3,34,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indices = indices[:arg2]\n    return k_indices']",1000,0.007234599906951189,0.007476126996334642,0.007851000176742673,N/A
p3_find_n_smallest_number,prompt_3,34,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indices = indices[:arg2]\n    return k_indices']",10000,0.11178430006839335,0.11412965800613165,0.1236892999149859,N/A
p3_find_n_smallest_number,prompt_3,34,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    k_indices = indices[:arg2]\n    return k_indices']",100000,1.6124931999947876,1.642980417991057,1.6798878000117838,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",1000,0.004026200156658888,0.004236497010570019,0.004557100124657154,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",10000,0.03967770002782345,0.04084692901233211,0.04382700007408857,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, x in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-x, i))\n        elif x < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-x, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",100000,0.39380550011992455,0.4001043379958719,0.42348509980365634,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for x in heap:\n        index = arg1.index(x)\n        indexes.append(index)\n    return indexes']",1000,0.0069512000773102045,0.007285242998041213,0.009256399935111403,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for x in heap:\n        index = arg1.index(x)\n        indexes.append(index)\n    return indexes']",10000,0.05513980006799102,0.0562622670060955,0.0617793002165854,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indexes = []\n    for x in heap:\n        index = arg1.index(x)\n        indexes.append(index)\n    return indexes']",100000,0.8202356998808682,0.8339494369830937,0.8698638000059873,N/A
p3_find_n_smallest_number,prompt_3,37,"['def funcImp(arg1, arg2):\n    dict_num_index = {}\n    for i in range(len(arg1)):\n        dict_num_index[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(dict_num_index[num])\n    return indexes']",1000,0.005718500120565295,0.0060414190217852595,0.007878199918195605,N/A
p3_find_n_smallest_number,prompt_3,37,"['def funcImp(arg1, arg2):\n    dict_num_index = {}\n    for i in range(len(arg1)):\n        dict_num_index[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(dict_num_index[num])\n    return indexes']",10000,0.10658939997665584,0.10929648500401527,0.1242641001008451,N/A
p3_find_n_smallest_number,prompt_3,37,"['def funcImp(arg1, arg2):\n    dict_num_index = {}\n    for i in range(len(arg1)):\n        dict_num_index[arg1[i]] = i\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(dict_num_index[num])\n    return indexes']",100000,1.621060400037095,1.6824639340001157,1.7223249000962824,N/A
p3_find_n_smallest_number,prompt_3,38,"['def funcImp(arg1, arg2):\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if num not in indexes:\n            indexes[num] = [i]\n        else:\n            indexes[num].append(i)\n    sorted_list = sorted(set(arg1))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(indexes[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.0062327999621629715,0.0066442850115709,0.00707910000346601,N/A
p3_find_n_smallest_number,prompt_3,38,"['def funcImp(arg1, arg2):\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if num not in indexes:\n            indexes[num] = [i]\n        else:\n            indexes[num].append(i)\n    sorted_list = sorted(set(arg1))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(indexes[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.0745739999692887,0.07662426800699905,0.07972369994968176,N/A
p3_find_n_smallest_number,prompt_3,38,"['def funcImp(arg1, arg2):\n    indexes = {}\n    for i, num in enumerate(arg1):\n        if num not in indexes:\n            indexes[num] = [i]\n        else:\n            indexes[num].append(i)\n    sorted_list = sorted(set(arg1))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(indexes[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,1.6167838999535888,1.6669934879872017,1.7162938001565635,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[-1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        indexes.append(index)\n    return indexes']",1000,0.007014499977231026,0.007818216001614928,0.016751500079408288,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[-1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        indexes.append(index)\n    return indexes']",10000,0.054477300029248,0.05688936099410057,0.06495629996061325,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, arg1[i])\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[-1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arg1[i])\n    indexes = []\n    for i in range(arg2):\n        index = arg1.index(heapq.heappop(min_heap))\n        indexes.append(index)\n    return indexes']",100000,0.8198563000187278,0.8346585450088605,0.8598400000482798,N/A
p3_find_n_smallest_number,prompt_3,40,"['def funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Args:\n    arg1: list of integers - the unsorted array to find the k smallest numbers indexes\n    arg2: int - the number of smallest numbers to find\n    \n    Returns:\n    list of integers - the indexes of the k smallest numbers in the unsorted array\n    """"""\n    d = {}\n    for i, num in enumerate(arg1):\n        if num not in d:\n            d[num] = [i]\n        else:\n            d[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(d[num])\n    return result']",1000,0.006330200005322695,0.00663542201044038,0.007915799971669912,N/A
p3_find_n_smallest_number,prompt_3,40,"['def funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Args:\n    arg1: list of integers - the unsorted array to find the k smallest numbers indexes\n    arg2: int - the number of smallest numbers to find\n    \n    Returns:\n    list of integers - the indexes of the k smallest numbers in the unsorted array\n    """"""\n    d = {}\n    for i, num in enumerate(arg1):\n        if num not in d:\n            d[num] = [i]\n        else:\n            d[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(d[num])\n    return result']",10000,0.07640070002526045,0.0786688980134204,0.08108969987370074,N/A
p3_find_n_smallest_number,prompt_3,40,"['def funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Args:\n    arg1: list of integers - the unsorted array to find the k smallest numbers indexes\n    arg2: int - the number of smallest numbers to find\n    \n    Returns:\n    list of integers - the indexes of the k smallest numbers in the unsorted array\n    """"""\n    d = {}\n    for i, num in enumerate(arg1):\n        if num not in d:\n            d[num] = [i]\n        else:\n            d[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(d[num])\n    return result']",100000,1.666300900047645,1.7253716159937904,1.7673651000950485,N/A
p3_find_n_smallest_number,prompt_3,41,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(num_index_dict[num])\n    return result']",1000,0.00558270001783967,0.005905558003578335,0.007669099839404225,N/A
p3_find_n_smallest_number,prompt_3,41,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(num_index_dict[num])\n    return result']",10000,0.10661139991134405,0.1089744219998829,0.11686259997077286,N/A
p3_find_n_smallest_number,prompt_3,41,"['def funcImp(arg1, arg2):\n    num_index_dict = {}\n    for i in range(len(arg1)):\n        num_index_dict[arg1[i]] = i\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.append(num_index_dict[num])\n    return result']",100000,1.636099699884653,1.6725880059879272,1.765063799917698,N/A
p3_find_n_smallest_number,prompt_3,42,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = [0] * k\n    values = [float('inf')] * k\n    for i in range(len(arg1)):\n        if arg1[i] < values[k - 1]:\n            for j in range(k):\n                if arg1[i] < values[j]:\n                    values[j + 1:k] = values[j:k - 1]\n                    indexes[j + 1:k] = indexes[j:k - 1]\n                    values[j] = arg1[i]\n                    indexes[j] = i\n                    break\n    return indexes""]",1000,0.0030587001238018274,0.0032190100103616716,0.0037845999468117952,N/A
p3_find_n_smallest_number,prompt_3,42,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = [0] * k\n    values = [float('inf')] * k\n    for i in range(len(arg1)):\n        if arg1[i] < values[k - 1]:\n            for j in range(k):\n                if arg1[i] < values[j]:\n                    values[j + 1:k] = values[j:k - 1]\n                    indexes[j + 1:k] = indexes[j:k - 1]\n                    values[j] = arg1[i]\n                    indexes[j] = i\n                    break\n    return indexes""]",10000,0.024404400028288364,0.025207014991901814,0.02943309978581965,N/A
p3_find_n_smallest_number,prompt_3,42,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = [0] * k\n    values = [float('inf')] * k\n    for i in range(len(arg1)):\n        if arg1[i] < values[k - 1]:\n            for j in range(k):\n                if arg1[i] < values[j]:\n                    values[j + 1:k] = values[j:k - 1]\n                    indexes[j + 1:k] = indexes[j:k - 1]\n                    values[j] = arg1[i]\n                    indexes[j] = i\n                    break\n    return indexes""]",100000,0.23528879997320473,0.2396234290045686,0.2528909998945892,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n        smallest_indexes.append(i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            smallest_indexes[heap.index(arg1[i])] = i\n    return smallest_indexes']",1000,0.007906399900093675,0.008196363989263773,0.008609500015154481,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n        smallest_indexes.append(i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            smallest_indexes[heap.index(arg1[i])] = i\n    return smallest_indexes']",10000,0.06054030009545386,0.06257706300588324,0.06687580002471805,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_indexes = []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, arg1[i])\n        smallest_indexes.append(i)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            smallest_indexes[heap.index(arg1[i])] = i\n    return smallest_indexes']",100000,0.9357263001147658,0.9481439189985394,0.9842769000679255,N/A
p3_find_n_smallest_number,prompt_3,44,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1 or k > len(arr):\n        return []\n    low, high = (0, len(arr) - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",1000,2.0263680000789464,2.1595456139952875,2.208058499963954,N/A
p3_find_n_smallest_number,prompt_3,44,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1 or k > len(arr):\n        return []\n    low, high = (0, len(arr) - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,44,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest_indexes(arr, k):\n    if k < 1 or k > len(arr):\n        return []\n    low, high = (0, len(arr) - 1)\n    while True:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivot_index > k - 1:\n            high = pivot_index - 1\n        else:\n            low = pivot_index + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest_indexes(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,45,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    return indices""]",1000,0.002164199948310852,0.0023528210003860295,0.007793799974024296,N/A
p3_find_n_smallest_number,prompt_3,45,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    return indices""]",10000,0.0219541999977082,0.03291693901643157,0.08929850021377206,N/A
p3_find_n_smallest_number,prompt_3,45,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indices.append(min_index)\n        arg1[min_index] = float('inf')\n    return indices""]",100000,0.34003099985420704,0.7483314909995533,1.1069228001870215,N/A
p3_find_n_smallest_number,prompt_3,46,"['def funcImp(arg1, arg2):\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    sorted_pairs = sorted(num_index_pairs)[:arg2]\n    return [pair[1] for pair in sorted_pairs]']",1000,0.011300700018182397,0.011959071010351182,0.014252400025725365,N/A
p3_find_n_smallest_number,prompt_3,46,"['def funcImp(arg1, arg2):\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    sorted_pairs = sorted(num_index_pairs)[:arg2]\n    return [pair[1] for pair in sorted_pairs]']",10000,0.1684786998666823,0.17290594800608233,0.19541199994273484,N/A
p3_find_n_smallest_number,prompt_3,46,"['def funcImp(arg1, arg2):\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    sorted_pairs = sorted(num_index_pairs)[:arg2]\n    return [pair[1] for pair in sorted_pairs]']",100000,2.5893691000528634,2.6633428369951435,2.8213438000530005,N/A
p3_find_n_smallest_number,prompt_3,47,"['def funcImp(arg1, arg2):\n    indexes = []\n    values = {}\n    k = arg2\n    for i in range(len(arg1)):\n        val = arg1[i]\n        if val not in values:\n            values[val] = [i]\n        else:\n            values[val].append(i)\n    sorted_values = sorted(values.keys())\n    for val in sorted_values:\n        if k == 0:\n            break\n        val_indexes = values[val]\n        for index in val_indexes:\n            indexes.append(index)\n            k -= 1\n            if k == 0:\n                break\n    return indexes']",1000,0.008395100012421608,0.009051096003968268,0.012003500014543533,N/A
p3_find_n_smallest_number,prompt_3,47,"['def funcImp(arg1, arg2):\n    indexes = []\n    values = {}\n    k = arg2\n    for i in range(len(arg1)):\n        val = arg1[i]\n        if val not in values:\n            values[val] = [i]\n        else:\n            values[val].append(i)\n    sorted_values = sorted(values.keys())\n    for val in sorted_values:\n        if k == 0:\n            break\n        val_indexes = values[val]\n        for index in val_indexes:\n            indexes.append(index)\n            k -= 1\n            if k == 0:\n                break\n    return indexes']",10000,0.13665980007499456,0.14181583700235934,0.16422369983047247,N/A
p3_find_n_smallest_number,prompt_3,47,"['def funcImp(arg1, arg2):\n    indexes = []\n    values = {}\n    k = arg2\n    for i in range(len(arg1)):\n        val = arg1[i]\n        if val not in values:\n            values[val] = [i]\n        else:\n            values[val].append(i)\n    sorted_values = sorted(values.keys())\n    for val in sorted_values:\n        if k == 0:\n            break\n        val_indexes = values[val]\n        for index in val_indexes:\n            indexes.append(index)\n            k -= 1\n            if k == 0:\n                break\n    return indexes']",100000,2.1947225998155773,2.2483131899987345,2.2837646999396384,N/A
p3_find_n_smallest_number,prompt_3,48,"['def funcImp(arg1, arg2):\n    arr = arg1[:]\n    res = []\n    arr.sort()\n    for i in range(arg2):\n        res.append(arg1.index(arr[i]))\n    return res']",1000,0.0032679999712854624,0.0034755169949494302,0.004150300053879619,N/A
p3_find_n_smallest_number,prompt_3,48,"['def funcImp(arg1, arg2):\n    arr = arg1[:]\n    res = []\n    arr.sort()\n    for i in range(arg2):\n        res.append(arg1.index(arr[i]))\n    return res']",10000,0.08256729994900525,0.08616692801238969,0.09259629994630814,N/A
p3_find_n_smallest_number,prompt_3,48,"['def funcImp(arg1, arg2):\n    arr = arg1[:]\n    res = []\n    arr.sort()\n    for i in range(arg2):\n        res.append(arg1.index(arr[i]))\n    return res']",100000,1.2065334001090378,1.240630915989168,1.2904531999956816,N/A
p3_find_n_smallest_number,prompt_3,49,"['def funcImp(arg1, arg2):\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indexes_k = [dict[x] for x in smallest_k]\n    return indexes_k']",1000,0.005393899977207184,0.005890775986481458,0.008237600093707442,N/A
p3_find_n_smallest_number,prompt_3,49,"['def funcImp(arg1, arg2):\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indexes_k = [dict[x] for x in smallest_k]\n    return indexes_k']",10000,0.10449019982479513,0.10878176698461176,0.11815860006026924,N/A
p3_find_n_smallest_number,prompt_3,49,"['def funcImp(arg1, arg2):\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    smallest_k = sorted(arg1)[:arg2]\n    indexes_k = [dict[x] for x in smallest_k]\n    return indexes_k']",100000,1.6168129001744092,1.6457480659964494,1.6790009001269937,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]']",1000,0.0036866001319140196,0.0039201460010372105,0.004268499789759517,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]']",10000,0.03525600000284612,0.03660828799474984,0.039458699990063906,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < k:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]']",100000,0.3578872000798583,0.3667309119994752,0.39462110004387796,N/A
p3_find_n_smallest_number,prompt_3,51,"['def funcImp(arg1, arg2):\n    items = [(value, index) for index, value in enumerate(arg1)]\n    items.sort()\n    result = [index for value, index in items[:arg2]]\n    return result']",1000,0.011735100066289306,0.012263495007064194,0.016798099968582392,N/A
p3_find_n_smallest_number,prompt_3,51,"['def funcImp(arg1, arg2):\n    items = [(value, index) for index, value in enumerate(arg1)]\n    items.sort()\n    result = [index for value, index in items[:arg2]]\n    return result']",10000,0.1778291999362409,0.1860207870020531,0.20336559996940196,N/A
p3_find_n_smallest_number,prompt_3,51,"['def funcImp(arg1, arg2):\n    items = [(value, index) for index, value in enumerate(arg1)]\n    items.sort()\n    result = [index for value, index in items[:arg2]]\n    return result']",100000,2.844600899843499,2.9175238649942914,3.1149256001226604,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k.sort()\n    indices = [t[0] for t in smallest_k]\n    return indices']",1000,0.004521999973803759,0.004781386987306177,0.005288599990308285,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k.sort()\n    indices = [t[0] for t in smallest_k]\n    return indices']",10000,0.04200350004248321,0.043671110006980596,0.04927819990552962,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k.sort()\n    indices = [t[0] for t in smallest_k]\n    return indices']",100000,0.4396427997853607,0.4519539399840869,0.4852871000766754,N/A
p3_find_n_smallest_number,prompt_3,53,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    values_indices = {}\n    for index, value in enumerate(arg1):\n        values_indices[index] = value\n    k_smallest_values = sorted(values_indices.values())[:k]\n    indices = []\n    for index, value in values_indices.items():\n        if value in k_smallest_values:\n            indices.append(index)\n    return indices']",1000,0.008619899861514568,0.009270416013896466,0.011545200133696198,N/A
p3_find_n_smallest_number,prompt_3,53,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    values_indices = {}\n    for index, value in enumerate(arg1):\n        values_indices[index] = value\n    k_smallest_values = sorted(values_indices.values())[:k]\n    indices = []\n    for index, value in values_indices.items():\n        if value in k_smallest_values:\n            indices.append(index)\n    return indices']",10000,0.13509260001592338,0.1387126490031369,0.15238870005123317,N/A
p3_find_n_smallest_number,prompt_3,53,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    values_indices = {}\n    for index, value in enumerate(arg1):\n        values_indices[index] = value\n    k_smallest_values = sorted(values_indices.values())[:k]\n    indices = []\n    for index, value in values_indices.items():\n        if value in k_smallest_values:\n            indices.append(index)\n    return indices']",100000,1.9042229999322444,1.9593568489863538,2.0182794998399913,N/A
p3_find_n_smallest_number,prompt_3,54,"['def funcImp(arg1, arg2):\n    lst = [(elem, i) for i, elem in enumerate(arg1)]\n    lst.sort()\n    indices = []\n    for i in range(arg2):\n        indices.append(lst[i][1])\n    indices.sort()\n    return indices']",1000,0.011445699958130717,0.01201776800211519,0.012725999811664224,N/A
p3_find_n_smallest_number,prompt_3,54,"['def funcImp(arg1, arg2):\n    lst = [(elem, i) for i, elem in enumerate(arg1)]\n    lst.sort()\n    indices = []\n    for i in range(arg2):\n        indices.append(lst[i][1])\n    indices.sort()\n    return indices']",10000,0.17823110008612275,0.1838644789950922,0.19328129990026355,N/A
p3_find_n_smallest_number,prompt_3,54,"['def funcImp(arg1, arg2):\n    lst = [(elem, i) for i, elem in enumerate(arg1)]\n    lst.sort()\n    indices = []\n    for i in range(arg2):\n        indices.append(lst[i][1])\n    indices.sort()\n    return indices']",100000,2.8210849000606686,2.8893058200133965,2.9998555001802742,N/A
p3_find_n_smallest_number,prompt_3,55,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, n in enumerate(arg1):\n        if n in index_dict:\n            index_dict[n].append(i)\n        else:\n            index_dict[n] = [i]\n    nums_sorted = sorted(set(arg1))\n    result = []\n    for i in range(arg2):\n        result.extend(index_dict[nums_sorted[i]])\n        if len(result) >= arg2:\n            break\n    return result']",1000,0.0062003000639379025,0.006502527995035052,0.00682280003093183,N/A
p3_find_n_smallest_number,prompt_3,55,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, n in enumerate(arg1):\n        if n in index_dict:\n            index_dict[n].append(i)\n        else:\n            index_dict[n] = [i]\n    nums_sorted = sorted(set(arg1))\n    result = []\n    for i in range(arg2):\n        result.extend(index_dict[nums_sorted[i]])\n        if len(result) >= arg2:\n            break\n    return result']",10000,0.07359540020115674,0.07649580800905824,0.08420079993084073,N/A
p3_find_n_smallest_number,prompt_3,55,"['def funcImp(arg1, arg2):\n    index_dict = dict()\n    for i, n in enumerate(arg1):\n        if n in index_dict:\n            index_dict[n].append(i)\n        else:\n            index_dict[n] = [i]\n    nums_sorted = sorted(set(arg1))\n    result = []\n    for i in range(arg2):\n        result.extend(index_dict[nums_sorted[i]])\n        if len(result) >= arg2:\n            break\n    return result']",100000,1.5888557999860495,1.6246223429916427,1.6647844000253826,N/A
p3_find_n_smallest_number,prompt_3,56,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indexes']",1000,0.0072188000194728374,0.008024187991395593,0.02748990012332797,N/A
p3_find_n_smallest_number,prompt_3,56,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indexes']",10000,0.11120350006967783,0.11427348100813106,0.12536270008422434,N/A
p3_find_n_smallest_number,prompt_3,56,"['def funcImp(arg1, arg2):\n    k = arg2\n    indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indexes']",100000,1.621989700011909,1.654335416990798,1.7129339000675827,N/A
p3_find_n_smallest_number,prompt_3,57,"['def funcImp(arg1, arg2):\n    pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    pairs.sort(key=lambda x: x[0])\n    return [pair[1] for pair in pairs[:arg2]]']",1000,0.0092291000764817,0.009859130012337118,0.016049500089138746,N/A
p3_find_n_smallest_number,prompt_3,57,"['def funcImp(arg1, arg2):\n    pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    pairs.sort(key=lambda x: x[0])\n    return [pair[1] for pair in pairs[:arg2]]']",10000,0.15490620001219213,0.1599700199905783,0.16521749994717538,N/A
p3_find_n_smallest_number,prompt_3,57,"['def funcImp(arg1, arg2):\n    pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    pairs.sort(key=lambda x: x[0])\n    return [pair[1] for pair in pairs[:arg2]]']",100000,2.2294143000617623,2.2756424170127136,2.3282852000556886,N/A
p3_find_n_smallest_number,prompt_3,58,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    index_list = list(range(k))\n    min_index = index_list[arg1.index(min(arg1[:k]))]\n    for i in range(k, len(arg1)):\n        if arg1[i] < arg1[min_index]:\n            index_list[index_list.index(min_index)] = i\n            min_index = index_list[arg1.index(min(arg1[index_list]))]\n    return sorted(index_list)']",1000,0,0,0,"	 exception: list indices must be integers or slices, not list"
p3_find_n_smallest_number,prompt_3,58,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    index_list = list(range(k))\n    min_index = index_list[arg1.index(min(arg1[:k]))]\n    for i in range(k, len(arg1)):\n        if arg1[i] < arg1[min_index]:\n            index_list[index_list.index(min_index)] = i\n            min_index = index_list[arg1.index(min(arg1[index_list]))]\n    return sorted(index_list)']",10000,0,0,0,"	 exception: list indices must be integers or slices, not list"
p3_find_n_smallest_number,prompt_3,58,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    index_list = list(range(k))\n    min_index = index_list[arg1.index(min(arg1[:k]))]\n    for i in range(k, len(arg1)):\n        if arg1[i] < arg1[min_index]:\n            index_list[index_list.index(min_index)] = i\n            min_index = index_list[arg1.index(min(arg1[index_list]))]\n    return sorted(index_list)']",100000,0,0,0,"	 exception: list indices must be integers or slices, not list"
p3_find_n_smallest_number,prompt_3,59,"['def funcImp(arg1, k):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    smallest_k = sorted_arr[:k]\n    indices = [index_dict[val] for val in smallest_k]\n    return indices']",1000,0.00542379985563457,0.005790917000267654,0.006686100037768483,N/A
p3_find_n_smallest_number,prompt_3,59,"['def funcImp(arg1, k):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    smallest_k = sorted_arr[:k]\n    indices = [index_dict[val] for val in smallest_k]\n    return indices']",10000,0.1024471998680383,0.10727533500175923,0.12258540000766516,N/A
p3_find_n_smallest_number,prompt_3,59,"['def funcImp(arg1, k):\n    index_dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    smallest_k = sorted_arr[:k]\n    indices = [index_dict[val] for val in smallest_k]\n    return indices']",100000,1.6155063000041991,1.653332712983247,1.6914834999479353,N/A
p3_find_n_smallest_number,prompt_3,60,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    k_smallest = [(arg1[i], i) for i in range(arg2)]\n    k_smallest.sort(reverse=True)\n    for i in range(arg2, n):\n        if arg1[i] < k_smallest[0][0]:\n            k_smallest[0] = (arg1[i], i)\n            k_smallest.sort(reverse=True)\n    result = [t[1] for t in k_smallest]\n    return result']",1000,0.0024697999469935894,0.0026427410007454455,0.003683400107547641,N/A
p3_find_n_smallest_number,prompt_3,60,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    k_smallest = [(arg1[i], i) for i in range(arg2)]\n    k_smallest.sort(reverse=True)\n    for i in range(arg2, n):\n        if arg1[i] < k_smallest[0][0]:\n            k_smallest[0] = (arg1[i], i)\n            k_smallest.sort(reverse=True)\n    result = [t[1] for t in k_smallest]\n    return result']",10000,0.022557100048288703,0.023741103999782354,0.02650620019994676,N/A
p3_find_n_smallest_number,prompt_3,60,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    k_smallest = [(arg1[i], i) for i in range(arg2)]\n    k_smallest.sort(reverse=True)\n    for i in range(arg2, n):\n        if arg1[i] < k_smallest[0][0]:\n            k_smallest[0] = (arg1[i], i)\n            k_smallest.sort(reverse=True)\n    result = [t[1] for t in k_smallest]\n    return result']",100000,0.22862179996445775,0.23472846900345756,0.2562039999756962,N/A
p3_find_n_smallest_number,prompt_3,61,"['def funcImp(arg1, arg2):\n    indexed_list = [(elem, index) for index, elem in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest = sorted_list[:arg2]\n    indexes = sorted([index for _, index in k_smallest])\n    return indexes']",1000,0.009467200143262744,0.010105416991282255,0.012908000033348799,N/A
p3_find_n_smallest_number,prompt_3,61,"['def funcImp(arg1, arg2):\n    indexed_list = [(elem, index) for index, elem in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest = sorted_list[:arg2]\n    indexes = sorted([index for _, index in k_smallest])\n    return indexes']",10000,0.15532820019870996,0.16079589998815208,0.1692009000107646,N/A
p3_find_n_smallest_number,prompt_3,61,"['def funcImp(arg1, arg2):\n    indexed_list = [(elem, index) for index, elem in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest = sorted_list[:arg2]\n    indexes = sorted([index for _, index in k_smallest])\n    return indexes']",100000,2.295298100216314,2.3502479829965157,2.4087032000534236,N/A
p3_find_n_smallest_number,prompt_3,62,"['def funcImp(arg1, arg2):\n    index_list = range(len(arg1))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:arg2]']",1000,0,0,0,	 exception: 'range' object has no attribute 'sort'
p3_find_n_smallest_number,prompt_3,62,"['def funcImp(arg1, arg2):\n    index_list = range(len(arg1))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:arg2]']",10000,0,0,0,	 exception: 'range' object has no attribute 'sort'
p3_find_n_smallest_number,prompt_3,62,"['def funcImp(arg1, arg2):\n    index_list = range(len(arg1))\n    index_list.sort(key=lambda i: arg1[i])\n    return index_list[:arg2]']",100000,0,0,0,	 exception: 'range' object has no attribute 'sort'
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuple_list = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(tuple_list)\n    k_smallest = heapq.nsmallest(arg2, tuple_list)\n    result = sorted([(i, val) for val, i in k_smallest])\n    return [i for i, val in result]']",1000,0.007098600035533309,0.007533981008455157,0.009475199971348047,N/A
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuple_list = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(tuple_list)\n    k_smallest = heapq.nsmallest(arg2, tuple_list)\n    result = sorted([(i, val) for val, i in k_smallest])\n    return [i for i, val in result]']",10000,0.08702079998329282,0.0892498920042999,0.09326909994706511,N/A
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuple_list = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(tuple_list)\n    k_smallest = heapq.nsmallest(arg2, tuple_list)\n    result = sorted([(i, val) for val, i in k_smallest])\n    return [i for i, val in result]']",100000,1.074133099988103,1.116884470982477,1.1745916998479515,N/A
p3_find_n_smallest_number,prompt_3,64,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        smallest_num_index = arg1.index(sorted_list[i])\n        indexes.append(smallest_num_index)\n        arg1[smallest_num_index] = float('inf')\n    return indexes""]",1000,0.00034159980714321136,0.0005367440078407526,0.009827099973335862,N/A
p3_find_n_smallest_number,prompt_3,64,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        smallest_num_index = arg1.index(sorted_list[i])\n        indexes.append(smallest_num_index)\n        arg1[smallest_num_index] = float('inf')\n    return indexes""]",10000,0.0030818998347967863,0.02462030400754884,0.1369711000006646,N/A
p3_find_n_smallest_number,prompt_3,64,"[""def funcImp(arg1, arg2):\n    indexes = []\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        smallest_num_index = arg1.index(sorted_list[i])\n        indexes.append(smallest_num_index)\n        arg1[smallest_num_index] = float('inf')\n    return indexes""]",100000,1.5812060001771897,1.7447702899877913,1.9009094999637455,N/A
p3_find_n_smallest_number,prompt_3,65,"['def funcImp(arg1, arg2):\n    sorted_lst = sorted(arg1)\n    smallest_nums = sorted_lst[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0.0032053999602794647,0.0034198509948328137,0.004120600176975131,N/A
p3_find_n_smallest_number,prompt_3,65,"['def funcImp(arg1, arg2):\n    sorted_lst = sorted(arg1)\n    smallest_nums = sorted_lst[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0.08266249997541308,0.08535311800893396,0.089464700082317,N/A
p3_find_n_smallest_number,prompt_3,65,"['def funcImp(arg1, arg2):\n    sorted_lst = sorted(arg1)\n    smallest_nums = sorted_lst[:arg2]\n    indexes = []\n    for num in smallest_nums:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,1.1882833999115974,1.2231088669854215,1.2775586999487132,N/A
p3_find_n_smallest_number,prompt_3,66,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    k_smallest_values = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return [x[0] for x in k_smallest_values]']",1000,0.00983049999922514,0.010347141996026038,0.012392900185659528,N/A
p3_find_n_smallest_number,prompt_3,66,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    k_smallest_values = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return [x[0] for x in k_smallest_values]']",10000,0.15786330006085336,0.16428612399613485,0.17038899986073375,N/A
p3_find_n_smallest_number,prompt_3,66,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    k_smallest_values = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return [x[0] for x in k_smallest_values]']",100000,2.4940853000152856,2.5635982850007712,2.7018893000204116,N/A
p3_find_n_smallest_number,prompt_3,67,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    num_dict = {}\n    for i in range(n):\n        num_dict[i] = arg1[i]\n    sorted_nums = sorted(num_dict.values())\n    result = []\n    for i in range(arg2):\n        val = sorted_nums[i]\n        for key, value in num_dict.items():\n            if value == val:\n                result.append(key)\n                del num_dict[key]\n                break\n    return result']",1000,0.007732299854978919,0.00799389100400731,0.008837299887090921,N/A
p3_find_n_smallest_number,prompt_3,67,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    num_dict = {}\n    for i in range(n):\n        num_dict[i] = arg1[i]\n    sorted_nums = sorted(num_dict.values())\n    result = []\n    for i in range(arg2):\n        val = sorted_nums[i]\n        for key, value in num_dict.items():\n            if value == val:\n                result.append(key)\n                del num_dict[key]\n                break\n    return result']",10000,0.13763330015353858,0.1397325410065241,0.1502926000393927,N/A
p3_find_n_smallest_number,prompt_3,67,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    num_dict = {}\n    for i in range(n):\n        num_dict[i] = arg1[i]\n    sorted_nums = sorted(num_dict.values())\n    result = []\n    for i in range(arg2):\n        val = sorted_nums[i]\n        for key, value in num_dict.items():\n            if value == val:\n                result.append(key)\n                del num_dict[key]\n                break\n    return result']",100000,2.0903655998408794,2.128158531005029,2.1698795000556856,N/A
p3_find_n_smallest_number,prompt_3,68,"['def funcImp(arg1, arg2):\n    values_dict = {}\n    for i, val in enumerate(arg1):\n        if val not in values_dict:\n            values_dict[val] = [i]\n        else:\n            values_dict[val].append(i)\n    sorted_list = sorted(arg1)\n    k_vals = sorted_list[:arg2]\n    result = []\n    for val in k_vals:\n        result.extend(values_dict[val][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.008342900080606341,0.008870310008060187,0.01142040011473,N/A
p3_find_n_smallest_number,prompt_3,68,"['def funcImp(arg1, arg2):\n    values_dict = {}\n    for i, val in enumerate(arg1):\n        if val not in values_dict:\n            values_dict[val] = [i]\n        else:\n            values_dict[val].append(i)\n    sorted_list = sorted(arg1)\n    k_vals = sorted_list[:arg2]\n    result = []\n    for val in k_vals:\n        result.extend(values_dict[val][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.13703080010600388,0.13958102001575753,0.14769300003536046,N/A
p3_find_n_smallest_number,prompt_3,68,"['def funcImp(arg1, arg2):\n    values_dict = {}\n    for i, val in enumerate(arg1):\n        if val not in values_dict:\n            values_dict[val] = [i]\n        else:\n            values_dict[val].append(i)\n    sorted_list = sorted(arg1)\n    k_vals = sorted_list[:arg2]\n    result = []\n    for val in k_vals:\n        result.extend(values_dict[val][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,2.197409800020978,2.2239591130055487,2.3412615000270307,N/A
p3_find_n_smallest_number,prompt_3,69,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    d = {value: index for index, value in enumerate(arg1)}\n    sorted_values = sorted(d.keys())[:k]\n    for value in sorted_values:\n        smallest_indexes.append(d[value])\n    return smallest_indexes']",1000,0.0059559999499469995,0.00622496799333021,0.009373500011861324,N/A
p3_find_n_smallest_number,prompt_3,69,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    d = {value: index for index, value in enumerate(arg1)}\n    sorted_values = sorted(d.keys())[:k]\n    for value in sorted_values:\n        smallest_indexes.append(d[value])\n    return smallest_indexes']",10000,0.10895390016958117,0.11109341401373968,0.12455360009334981,N/A
p3_find_n_smallest_number,prompt_3,69,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    d = {value: index for index, value in enumerate(arg1)}\n    sorted_values = sorted(d.keys())[:k]\n    for value in sorted_values:\n        smallest_indexes.append(d[value])\n    return smallest_indexes']",100000,1.648815899854526,1.7315355920023285,1.8052978999912739,N/A
p3_find_n_smallest_number,prompt_3,70,"['def funcImp(arg1, arg2):\n    idx_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in idx_dict:\n            idx_dict[num] = [i]\n        else:\n            idx_dict[num].append(i)\n    sorted_list = sorted(list(set(arg1)))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(idx_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.006304100155830383,0.0066801210073754195,0.010349299991503358,N/A
p3_find_n_smallest_number,prompt_3,70,"['def funcImp(arg1, arg2):\n    idx_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in idx_dict:\n            idx_dict[num] = [i]\n        else:\n            idx_dict[num].append(i)\n    sorted_list = sorted(list(set(arg1)))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(idx_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.07554970006458461,0.07824250399833545,0.08034239988774061,N/A
p3_find_n_smallest_number,prompt_3,70,"['def funcImp(arg1, arg2):\n    idx_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in idx_dict:\n            idx_dict[num] = [i]\n        else:\n            idx_dict[num].append(i)\n    sorted_list = sorted(list(set(arg1)))\n    k_smallest = sorted_list[:arg2]\n    result = []\n    for num in k_smallest:\n        result.extend(idx_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,1.6777369999326766,1.7401610610238276,1.787973599974066,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            largest = heap[0]\n            if -num > largest[0]:\n                heapq.heapreplace(heap, (-num, i))\n    indexes = [heapq.heappop(heap)[1] for i in range(arg2)]\n    return sorted(indexes)']",1000,0.004681300139054656,0.004794764013495296,0.005644399905577302,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            largest = heap[0]\n            if -num > largest[0]:\n                heapq.heapreplace(heap, (-num, i))\n    indexes = [heapq.heappop(heap)[1] for i in range(arg2)]\n    return sorted(indexes)']",10000,0.045059199910610914,0.04595177300041541,0.048019299982115626,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            largest = heap[0]\n            if -num > largest[0]:\n                heapq.heapreplace(heap, (-num, i))\n    indexes = [heapq.heappop(heap)[1] for i in range(arg2)]\n    return sorted(indexes)']",100000,0.4498203999828547,0.4551863459963352,0.4762236999813467,N/A
p3_find_n_smallest_number,prompt_3,72,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indexes = [i for i, num in enumerate(arg1) if num in smallest_numbers]\n    return indexes']",1000,0.006049100076779723,0.006354150001425296,0.007992199854925275,N/A
p3_find_n_smallest_number,prompt_3,72,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indexes = [i for i, num in enumerate(arg1) if num in smallest_numbers]\n    return indexes']",10000,0.10874549997970462,0.11099776901304721,0.11335879983380437,N/A
p3_find_n_smallest_number,prompt_3,72,"['def funcImp(arg1, arg2):\n    smallest_numbers = sorted(arg1)[:arg2]\n    indexes = [i for i, num in enumerate(arg1) if num in smallest_numbers]\n    return indexes']",100000,1.411662200000137,1.4334850489906967,1.472463000100106,N/A
p3_find_n_smallest_number,prompt_3,73,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_i = arg1.index(min(arg1))\n        indexes.append(min_i)\n        arg1[min_i] = float('inf')\n    return indexes""]",1000,0.0021609999239444733,0.0023435399937443437,0.0077640998642891645,N/A
p3_find_n_smallest_number,prompt_3,73,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_i = arg1.index(min(arg1))\n        indexes.append(min_i)\n        arg1[min_i] = float('inf')\n    return indexes""]",10000,0.02273990004323423,0.03314657700946554,0.08875500014983118,N/A
p3_find_n_smallest_number,prompt_3,73,"[""def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_i = arg1.index(min(arg1))\n        indexes.append(min_i)\n        arg1[min_i] = float('inf')\n    return indexes""]",100000,0.3302217999007553,0.7415654959809035,1.0880541000515223,N/A
p3_find_n_smallest_number,prompt_3,74,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",1000,0.002236400032415986,0.002366095988545567,0.007760999957099557,N/A
p3_find_n_smallest_number,prompt_3,74,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",10000,0.02213339996524155,0.0332294189883396,0.09221490006893873,N/A
p3_find_n_smallest_number,prompt_3,74,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    for i in range(k):\n        min_index = arg1.index(min(arg1))\n        indexes.append(min_index)\n        arg1[min_index] = float('inf')\n    return indexes""]",100000,0.336259099887684,0.7440620060032234,1.117359499912709,N/A
p3_find_n_smallest_number,prompt_3,75,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, start, end, k):\n        while start <= end:\n            pivotIndex = partition(arr, start, end)\n            if pivotIndex == k:\n                return arr[:k]\n            elif pivotIndex < k:\n                start = pivotIndex + 1\n            else:\n                end = pivotIndex - 1\n        return arr[:k]\n\n    def partition(arr, start, end):\n        i = start - 1\n        pivot = arr[end]\n        for j in range(start, end):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        return i + 1\n    k = arg2\n    smallest = quickselect(arg1, 0, len(arg1) - 1, k)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indexes.append(i)\n    return indexes']",1000,2.0357964001595974,2.150738621989731,2.1969556000549346,N/A
p3_find_n_smallest_number,prompt_3,75,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, start, end, k):\n        while start <= end:\n            pivotIndex = partition(arr, start, end)\n            if pivotIndex == k:\n                return arr[:k]\n            elif pivotIndex < k:\n                start = pivotIndex + 1\n            else:\n                end = pivotIndex - 1\n        return arr[:k]\n\n    def partition(arr, start, end):\n        i = start - 1\n        pivot = arr[end]\n        for j in range(start, end):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        return i + 1\n    k = arg2\n    smallest = quickselect(arg1, 0, len(arg1) - 1, k)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indexes.append(i)\n    return indexes']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,75,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, start, end, k):\n        while start <= end:\n            pivotIndex = partition(arr, start, end)\n            if pivotIndex == k:\n                return arr[:k]\n            elif pivotIndex < k:\n                start = pivotIndex + 1\n            else:\n                end = pivotIndex - 1\n        return arr[:k]\n\n    def partition(arr, start, end):\n        i = start - 1\n        pivot = arr[end]\n        for j in range(start, end):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[end] = (arr[end], arr[i + 1])\n        return i + 1\n    k = arg2\n    smallest = quickselect(arg1, 0, len(arg1) - 1, k)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest:\n            indexes.append(i)\n    return indexes']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,76,"['def funcImp(arg1, arg2):\n    values_with_index = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_with_index = sorted(values_with_index)\n    k_smallest_indexes = [tup[1] for tup in sorted_values_with_index[:arg2]]\n    return k_smallest_indexes']",1000,0.011584100080654025,0.012163811004720628,0.013883800012990832,N/A
p3_find_n_smallest_number,prompt_3,76,"['def funcImp(arg1, arg2):\n    values_with_index = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_with_index = sorted(values_with_index)\n    k_smallest_indexes = [tup[1] for tup in sorted_values_with_index[:arg2]]\n    return k_smallest_indexes']",10000,0.17658839980140328,0.18315119999460877,0.20326659991405904,N/A
p3_find_n_smallest_number,prompt_3,76,"['def funcImp(arg1, arg2):\n    values_with_index = [(value, index) for index, value in enumerate(arg1)]\n    sorted_values_with_index = sorted(values_with_index)\n    k_smallest_indexes = [tup[1] for tup in sorted_values_with_index[:arg2]]\n    return k_smallest_indexes']",100000,2.864326999988407,2.946567848997656,3.0765464000869542,N/A
p3_find_n_smallest_number,prompt_3,77,"['def funcImp(arg1, arg2):\n    smallest_nums = []\n    if arg2 <= len(arg1):\n        indexed_list = list(enumerate(arg1))\n        sorted_list = sorted(indexed_list, key=lambda x: x[1])\n        for i in range(arg2):\n            smallest_nums.append(sorted_list[i][0])\n    return smallest_nums']",1000,0.008302999893203378,0.008728162993211299,0.010015900013968349,N/A
p3_find_n_smallest_number,prompt_3,77,"['def funcImp(arg1, arg2):\n    smallest_nums = []\n    if arg2 <= len(arg1):\n        indexed_list = list(enumerate(arg1))\n        sorted_list = sorted(indexed_list, key=lambda x: x[1])\n        for i in range(arg2):\n            smallest_nums.append(sorted_list[i][0])\n    return smallest_nums']",10000,0.13885330012999475,0.14327003701357172,0.14884350006468594,N/A
p3_find_n_smallest_number,prompt_3,77,"['def funcImp(arg1, arg2):\n    smallest_nums = []\n    if arg2 <= len(arg1):\n        indexed_list = list(enumerate(arg1))\n        sorted_list = sorted(indexed_list, key=lambda x: x[1])\n        for i in range(arg2):\n            smallest_nums.append(sorted_list[i][0])\n    return smallest_nums']",100000,2.1381331998854876,2.1963256969838403,2.32814470003359,N/A
p3_find_n_smallest_number,prompt_3,78,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, v in enumerate(arg1):\n        dict_index[i] = v\n    sorted_dict = sorted(dict_index.items(), key=lambda x: x[1])\n    smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return smallest_indexes']",1000,0.010180699871852994,0.010821543000638485,0.01219830010086298,N/A
p3_find_n_smallest_number,prompt_3,78,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, v in enumerate(arg1):\n        dict_index[i] = v\n    sorted_dict = sorted(dict_index.items(), key=lambda x: x[1])\n    smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return smallest_indexes']",10000,0.1576546998694539,0.16864771999418735,0.17616370017640293,N/A
p3_find_n_smallest_number,prompt_3,78,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, v in enumerate(arg1):\n        dict_index[i] = v\n    sorted_dict = sorted(dict_index.items(), key=lambda x: x[1])\n    smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return smallest_indexes']",100000,2.6255062001291662,2.682238597006071,2.838727899827063,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",1000,0.004503700183704495,0.004734116985928267,0.005517899990081787,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",10000,0.04171010013669729,0.04296817800262943,0.04929370013996959,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest]\n    return indexes']",100000,0.43026020005345345,0.44078713699709626,0.45643340004608035,N/A
p3_find_n_smallest_number,prompt_3,80,"['def funcImp(arg1, arg2):\n    lst = [(val, i) for i, val in enumerate(arg1)]\n    lst.sort()\n    indexes = [t[1] for t in lst[:arg2]]\n    return indexes']",1000,0.011597299948334694,0.01216540401102975,0.015116499969735742,N/A
p3_find_n_smallest_number,prompt_3,80,"['def funcImp(arg1, arg2):\n    lst = [(val, i) for i, val in enumerate(arg1)]\n    lst.sort()\n    indexes = [t[1] for t in lst[:arg2]]\n    return indexes']",10000,0.17386490013450384,0.17875498200766743,0.1881295999046415,N/A
p3_find_n_smallest_number,prompt_3,80,"['def funcImp(arg1, arg2):\n    lst = [(val, i) for i, val in enumerate(arg1)]\n    lst.sort()\n    indexes = [t[1] for t in lst[:arg2]]\n    return indexes']",100000,2.8078857001382858,2.8935449039982633,3.123003900051117,N/A
p3_find_n_smallest_number,prompt_3,81,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    index_dict = {}\n    for i in range(n):\n        index_dict.setdefault(arg1[i], []).append(i)\n    sorted_arr = sorted(arg1)\n    indexes = []\n    for i in range(k):\n        indexes.extend(index_dict[sorted_arr[i]])\n    return sorted(indexes)']",1000,0.008298200089484453,0.008834741017781199,0.011228500166907907,N/A
p3_find_n_smallest_number,prompt_3,81,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    index_dict = {}\n    for i in range(n):\n        index_dict.setdefault(arg1[i], []).append(i)\n    sorted_arr = sorted(arg1)\n    indexes = []\n    for i in range(k):\n        indexes.extend(index_dict[sorted_arr[i]])\n    return sorted(indexes)']",10000,0.1323490000795573,0.1372398019954562,0.14783699996769428,N/A
p3_find_n_smallest_number,prompt_3,81,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    index_dict = {}\n    for i in range(n):\n        index_dict.setdefault(arg1[i], []).append(i)\n    sorted_arr = sorted(arg1)\n    indexes = []\n    for i in range(k):\n        indexes.extend(index_dict[sorted_arr[i]])\n    return sorted(indexes)']",100000,2.240369899896905,2.277279501990415,2.3395181000232697,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    result = [item[1] for item in sorted(min_heap, key=lambda x: x[1])]\n    return result']",1000,0.0023231999948620796,0.0024107930017635225,0.0026831000577658415,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    result = [item[1] for item in sorted(min_heap, key=lambda x: x[1])]\n    return result']",10000,0.02260309993289411,0.02365342397708446,0.024913499830290675,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    result = [item[1] for item in sorted(min_heap, key=lambda x: x[1])]\n    return result']",100000,0.2267108999658376,0.23229011499090121,0.24728069989942014,N/A
p3_find_n_smallest_number,prompt_3,83,"['def funcImp(arg1, arg2):\n    dict = {}\n    for i in range(len(arg1)):\n        dict.setdefault(arg1[i], []).append(i)\n    k_smallest = sorted(dict.keys())[:arg2]\n    k_smallest_indexes = [i for sublist in [dict[k] for k in k_smallest] for i in sublist]\n    return k_smallest_indexes']",1000,0.008297100197523832,0.00884641200536862,0.009545900160446763,N/A
p3_find_n_smallest_number,prompt_3,83,"['def funcImp(arg1, arg2):\n    dict = {}\n    for i in range(len(arg1)):\n        dict.setdefault(arg1[i], []).append(i)\n    k_smallest = sorted(dict.keys())[:arg2]\n    k_smallest_indexes = [i for sublist in [dict[k] for k in k_smallest] for i in sublist]\n    return k_smallest_indexes']",10000,0.13461180008016527,0.13879397600190713,0.15276250010356307,N/A
p3_find_n_smallest_number,prompt_3,83,"['def funcImp(arg1, arg2):\n    dict = {}\n    for i in range(len(arg1)):\n        dict.setdefault(arg1[i], []).append(i)\n    k_smallest = sorted(dict.keys())[:arg2]\n    k_smallest_indexes = [i for sublist in [dict[k] for k in k_smallest] for i in sublist]\n    return k_smallest_indexes']",100000,2.2143468998838216,2.268230472984724,2.3847958999685943,N/A
p3_find_n_smallest_number,prompt_3,84,"['def funcImp(arg1, arg2):\n    index_dict = {val: [] for val in set(arg1)}\n    for i, val in enumerate(arg1):\n        index_dict[val].append(i)\n    sorted_unique = sorted(set(arg1))\n    k_smallest = []\n    k_smallest_indexes = []\n    for val in sorted_unique:\n        k_smallest += index_dict[val]\n        k_smallest_indexes += index_dict[val]\n        if len(k_smallest) >= arg2:\n            break\n    k_smallest_indexes = sorted(k_smallest_indexes)[:arg2]\n    return k_smallest_indexes']",1000,0.007616400020197034,0.008009329992346466,0.009049700107425451,N/A
p3_find_n_smallest_number,prompt_3,84,"['def funcImp(arg1, arg2):\n    index_dict = {val: [] for val in set(arg1)}\n    for i, val in enumerate(arg1):\n        index_dict[val].append(i)\n    sorted_unique = sorted(set(arg1))\n    k_smallest = []\n    k_smallest_indexes = []\n    for val in sorted_unique:\n        k_smallest += index_dict[val]\n        k_smallest_indexes += index_dict[val]\n        if len(k_smallest) >= arg2:\n            break\n    k_smallest_indexes = sorted(k_smallest_indexes)[:arg2]\n    return k_smallest_indexes']",10000,0.10473729996010661,0.115154599994421,0.12703750003129244,N/A
p3_find_n_smallest_number,prompt_3,84,"['def funcImp(arg1, arg2):\n    index_dict = {val: [] for val in set(arg1)}\n    for i, val in enumerate(arg1):\n        index_dict[val].append(i)\n    sorted_unique = sorted(set(arg1))\n    k_smallest = []\n    k_smallest_indexes = []\n    for val in sorted_unique:\n        k_smallest += index_dict[val]\n        k_smallest_indexes += index_dict[val]\n        if len(k_smallest) >= arg2:\n            break\n    k_smallest_indexes = sorted(k_smallest_indexes)[:arg2]\n    return k_smallest_indexes']",100000,2.847964100074023,3.0249233310017734,3.1847717999480665,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",1000,0.0022634000051766634,0.0024095019861124457,0.00253499997779727,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",10000,0.022561500081792474,0.02344120799563825,0.027615000028163195,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",100000,0.22792560001835227,0.23323030900210143,0.24418439995497465,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [num_idx[1] for num_idx in heap]\n    return sorted(res)']",1000,0.0037853000685572624,0.004024484006222338,0.005876500159502029,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [num_idx[1] for num_idx in heap]\n    return sorted(res)']",10000,0.03590260003693402,0.03726017098873854,0.04379540006630123,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [num_idx[1] for num_idx in heap]\n    return sorted(res)']",100000,0.3566140001639724,0.3667653419869021,0.39268100005574524,N/A
p3_find_n_smallest_number,prompt_3,87,"['import random\n\ndef quickselect(lst, k):\n    if len(lst) == 1:\n        return lst[0]\n    pivot = random.choice(lst)\n    lows = [el for el in lst if el < pivot]\n    highs = [el for el in lst if el > pivot]\n    pivots = [el for el in lst if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        k_smallest = quickselect(arg1, i)\n        index = arg1.index(k_smallest)\n        indexes.append(index)\n    return indexes']",1000,0.04572600009851158,0.04990712599828839,0.06311269989237189,N/A
p3_find_n_smallest_number,prompt_3,87,"['import random\n\ndef quickselect(lst, k):\n    if len(lst) == 1:\n        return lst[0]\n    pivot = random.choice(lst)\n    lows = [el for el in lst if el < pivot]\n    highs = [el for el in lst if el > pivot]\n    pivots = [el for el in lst if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        k_smallest = quickselect(arg1, i)\n        index = arg1.index(k_smallest)\n        indexes.append(index)\n    return indexes']",10000,0.4160076999105513,0.4419291199953295,0.46915889997035265,N/A
p3_find_n_smallest_number,prompt_3,87,"['import random\n\ndef quickselect(lst, k):\n    if len(lst) == 1:\n        return lst[0]\n    pivot = random.choice(lst)\n    lows = [el for el in lst if el < pivot]\n    highs = [el for el in lst if el > pivot]\n    pivots = [el for el in lst if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        k_smallest = quickselect(arg1, i)\n        index = arg1.index(k_smallest)\n        indexes.append(index)\n    return indexes']",100000,4.342485999921337,4.559281956027262,4.838350800098851,N/A
p3_find_n_smallest_number,prompt_3,88,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[i] = val\n    sorted_d = sorted(d.items(), key=lambda x: x[1])\n    return [sorted_d[i][0] for i in range(arg2)]']",1000,0.01008519995957613,0.010620444985106588,0.012523700017482042,N/A
p3_find_n_smallest_number,prompt_3,88,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[i] = val\n    sorted_d = sorted(d.items(), key=lambda x: x[1])\n    return [sorted_d[i][0] for i in range(arg2)]']",10000,0.15774190006777644,0.16701582900248468,0.17395070008933544,N/A
p3_find_n_smallest_number,prompt_3,88,"['def funcImp(arg1, arg2):\n    d = {}\n    for i, val in enumerate(arg1):\n        d[i] = val\n    sorted_d = sorted(d.items(), key=lambda x: x[1])\n    return [sorted_d[i][0] for i in range(arg2)]']",100000,2.6154978999402374,2.7090295729925855,3.0196343001443893,N/A
p3_find_n_smallest_number,prompt_3,89,"[""def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot_value:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n\n    def quickselect(arr, left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k_smallest == pivot_index:\n            return k_smallest\n        elif k_smallest < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k_smallest)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k_smallest)\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Error: k is larger than the length of the array.'\n    indices = []\n    k_smallest = k - 1\n    for i in range(k):\n        index = quickselect(arg1, 0, n - 1, k_smallest)\n        indices.append(index)\n        k_smallest += 1\n    return indices""]",1000,0.029194600181654096,0.030003519994206727,0.032327899942174554,N/A
p3_find_n_smallest_number,prompt_3,89,"[""def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot_value:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n\n    def quickselect(arr, left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k_smallest == pivot_index:\n            return k_smallest\n        elif k_smallest < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k_smallest)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k_smallest)\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Error: k is larger than the length of the array.'\n    indices = []\n    k_smallest = k - 1\n    for i in range(k):\n        index = quickselect(arg1, 0, n - 1, k_smallest)\n        indices.append(index)\n        k_smallest += 1\n    return indices""]",10000,0.30158869992010295,0.30756202100077645,0.3461051997728646,N/A
p3_find_n_smallest_number,prompt_3,89,"[""def funcImp(arg1, arg2):\n\n    def partition(arr, left, right, pivot_index):\n        pivot_value = arr[pivot_index]\n        arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot_value:\n                arr[i], arr[store_index] = (arr[store_index], arr[i])\n                store_index += 1\n        arr[right], arr[store_index] = (arr[store_index], arr[right])\n        return store_index\n\n    def quickselect(arr, left, right, k_smallest):\n        if left == right:\n            return left\n        pivot_index = left + (right - left) // 2\n        pivot_index = partition(arr, left, right, pivot_index)\n        if k_smallest == pivot_index:\n            return k_smallest\n        elif k_smallest < pivot_index:\n            return quickselect(arr, left, pivot_index - 1, k_smallest)\n        else:\n            return quickselect(arr, pivot_index + 1, right, k_smallest)\n    n = len(arg1)\n    k = arg2\n    if k > n:\n        return 'Error: k is larger than the length of the array.'\n    indices = []\n    k_smallest = k - 1\n    for i in range(k):\n        index = quickselect(arg1, 0, n - 1, k_smallest)\n        indices.append(index)\n        k_smallest += 1\n    return indices""]",100000,3.455724900122732,3.5534295420069246,3.6233699999284,N/A
p3_find_n_smallest_number,prompt_3,90,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        min_index = None\n        for j in range(len(arg1)):\n            if j not in smallest_indexes:\n                if min_index == None or arg1[j] < arg1[min_index]:\n                    min_index = j\n        smallest_indexes.append(min_index)\n    return smallest_indexes']",1000,0.019023299915716052,0.01979617799865082,0.02277949987910688,N/A
p3_find_n_smallest_number,prompt_3,90,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        min_index = None\n        for j in range(len(arg1)):\n            if j not in smallest_indexes:\n                if min_index == None or arg1[j] < arg1[min_index]:\n                    min_index = j\n        smallest_indexes.append(min_index)\n    return smallest_indexes']",10000,0.1957662000786513,0.19986164700239897,0.21139139984734356,N/A
p3_find_n_smallest_number,prompt_3,90,"['def funcImp(arg1, arg2):\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        min_index = None\n        for j in range(len(arg1)):\n            if j not in smallest_indexes:\n                if min_index == None or arg1[j] < arg1[min_index]:\n                    min_index = j\n        smallest_indexes.append(min_index)\n    return smallest_indexes']",100000,1.9904874998610467,2.0192048480012454,2.0510219000279903,N/A
p3_find_n_smallest_number,prompt_3,91,"['def funcImp(arg1, k):\n    heap = [(arg1[i], i) for i in range(k)]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_3,91,"['def funcImp(arg1, k):\n    heap = [(arg1[i], i) for i in range(k)]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_3,91,"['def funcImp(arg1, k):\n    heap = [(arg1[i], i) for i in range(k)]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_3,92,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, number in enumerate(arg1):\n        index_dict[i] = number\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    return [sorted_dict[i][0] for i in range(arg2)]']",1000,0.010371800046414137,0.010832057010848075,0.01163950003683567,N/A
p3_find_n_smallest_number,prompt_3,92,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, number in enumerate(arg1):\n        index_dict[i] = number\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    return [sorted_dict[i][0] for i in range(arg2)]']",10000,0.15878980001434684,0.17053629099857062,0.18019980005919933,N/A
p3_find_n_smallest_number,prompt_3,92,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, number in enumerate(arg1):\n        index_dict[i] = number\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    return [sorted_dict[i][0] for i in range(arg2)]']",100000,2.621303799794987,2.712253242987208,2.7843439001590014,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [x[1] for x in heap]\n    return result']",1000,0.003390700090676546,0.003660322013311088,0.005997099913656712,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [x[1] for x in heap]\n    return result']",10000,0.03235340001992881,0.03410897099878639,0.03612589999102056,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [x[1] for x in heap]\n    return result']",100000,0.32809749990701675,0.33386399999959393,0.3523589000105858,N/A
p3_find_n_smallest_number,prompt_3,94,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]']",1000,0.007134600076824427,0.007471152008511126,0.008670599898323417,N/A
p3_find_n_smallest_number,prompt_3,94,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]']",10000,0.11110949981957674,0.11402774000074714,0.12608830002136528,N/A
p3_find_n_smallest_number,prompt_3,94,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]']",100000,1.6054358000401407,1.6409401719970629,1.697619799990207,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indices']",1000,0.004536000080406666,0.004812763996887952,0.006370699964463711,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indices']",10000,0.043596699833869934,0.045311227003112436,0.049639200093224645,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return k_smallest_indices']",100000,0.4499443999957293,0.45817657398991285,0.4728291998617351,N/A
p3_find_n_smallest_number,prompt_3,96,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers arg1 and an integer arg2 as input parameters.\n    The function returns the indexes of the k smallest numbers in the list.\n\n    :param arg1: list of integers, unsorted\n    :param arg2: integer, number of smallest indexes to return\n    :return: list of integers, indexes of the k smallest numbers in the list\n    """"""\n    dict_num_idx = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    k_smallest_idx = [dict_num_idx[num] for num in k_smallest]\n    return k_smallest_idx']",1000,0.005782500142231584,0.0060490820021368566,0.007913999957963824,N/A
p3_find_n_smallest_number,prompt_3,96,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers arg1 and an integer arg2 as input parameters.\n    The function returns the indexes of the k smallest numbers in the list.\n\n    :param arg1: list of integers, unsorted\n    :param arg2: integer, number of smallest indexes to return\n    :return: list of integers, indexes of the k smallest numbers in the list\n    """"""\n    dict_num_idx = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    k_smallest_idx = [dict_num_idx[num] for num in k_smallest]\n    return k_smallest_idx']",10000,0.10801970004104078,0.11087502201786265,0.14589620009064674,N/A
p3_find_n_smallest_number,prompt_3,96,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers arg1 and an integer arg2 as input parameters.\n    The function returns the indexes of the k smallest numbers in the list.\n\n    :param arg1: list of integers, unsorted\n    :param arg2: integer, number of smallest indexes to return\n    :return: list of integers, indexes of the k smallest numbers in the list\n    """"""\n    dict_num_idx = {num: i for i, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest = sorted_list[:arg2]\n    k_smallest_idx = [dict_num_idx[num] for num in k_smallest]\n    return k_smallest_idx']",100000,1.6459798000287265,1.6772312720073388,1.7187346999999136,N/A
p3_find_n_smallest_number,prompt_3,97,"['def funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",1000,0.011631399858742952,0.01225204200251028,0.015798999927937984,N/A
p3_find_n_smallest_number,prompt_3,97,"['def funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",10000,0.1804001999553293,0.1839510199893266,0.1911217998713255,N/A
p3_find_n_smallest_number,prompt_3,97,"['def funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort()\n    return [indexed_list[i][1] for i in range(arg2)]']",100000,2.8427247998770326,2.9122140690055676,3.02859769994393,N/A
p3_find_n_smallest_number,prompt_3,98,"['def funcImp(arg1, arg2):\n    element_dict = {}\n    for i, elem in enumerate(arg1):\n        element_dict[elem] = i\n    sorted_elements = sorted(element_dict.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_elements[i][1])\n    return result']",1000,0.012802199926227331,0.013383474012371152,0.016690100077539682,N/A
p3_find_n_smallest_number,prompt_3,98,"['def funcImp(arg1, arg2):\n    element_dict = {}\n    for i, elem in enumerate(arg1):\n        element_dict[elem] = i\n    sorted_elements = sorted(element_dict.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_elements[i][1])\n    return result']",10000,0.19494469999335706,0.20186823301017284,0.2115641999989748,N/A
p3_find_n_smallest_number,prompt_3,98,"['def funcImp(arg1, arg2):\n    element_dict = {}\n    for i, elem in enumerate(arg1):\n        element_dict[elem] = i\n    sorted_elements = sorted(element_dict.items())\n    result = []\n    for i in range(arg2):\n        result.append(sorted_elements[i][1])\n    return result']",100000,3.3822310001123697,3.470591660994105,3.7289410999510437,N/A
p3_find_n_smallest_number,prompt_3,99,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    n = len(arr)\n    if arg2 >= n:\n        return [i for i in range(n)]\n    indexes = [i for i in range(arg2)]\n    for i in range(arg2):\n        for j in range(i + 1, arg2):\n            if arr[indexes[i]] < arr[indexes[j]]:\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n    for i in range(arg2, n):\n        max_index = 0\n        for j in range(1, arg2):\n            if arr[indexes[max_index]] < arr[indexes[j]]:\n                max_index = j\n        if arr[i] < arr[indexes[max_index]]:\n            indexes[max_index] = i\n    return sorted(indexes)']",1000,0.018741799984127283,0.019353567988146095,0.02868560003116727,N/A
p3_find_n_smallest_number,prompt_3,99,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    n = len(arr)\n    if arg2 >= n:\n        return [i for i in range(n)]\n    indexes = [i for i in range(arg2)]\n    for i in range(arg2):\n        for j in range(i + 1, arg2):\n            if arr[indexes[i]] < arr[indexes[j]]:\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n    for i in range(arg2, n):\n        max_index = 0\n        for j in range(1, arg2):\n            if arr[indexes[max_index]] < arr[indexes[j]]:\n                max_index = j\n        if arr[i] < arr[indexes[max_index]]:\n            indexes[max_index] = i\n    return sorted(indexes)']",10000,0.18189100013114512,0.1843792370078154,0.19270229991525412,N/A
p3_find_n_smallest_number,prompt_3,99,"['def funcImp(arg1, arg2):\n    arr = arg1.copy()\n    n = len(arr)\n    if arg2 >= n:\n        return [i for i in range(n)]\n    indexes = [i for i in range(arg2)]\n    for i in range(arg2):\n        for j in range(i + 1, arg2):\n            if arr[indexes[i]] < arr[indexes[j]]:\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n    for i in range(arg2, n):\n        max_index = 0\n        for j in range(1, arg2):\n            if arr[indexes[max_index]] < arr[indexes[j]]:\n                max_index = j\n        if arr[i] < arr[indexes[max_index]]:\n            indexes[max_index] = i\n    return sorted(indexes)']",100000,1.8771272001322359,1.8978606509952807,1.9324892000295222,N/A
p3_find_n_smallest_number,prompt_3,100,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_ = {i: arg1[i] for i in range(n)}\n    sorted_dict = sorted(dict_.items(), key=lambda x: x[1])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(sorted_dict[i][0])\n    return indexes']",1000,0.01031220005825162,0.01063502799719572,0.011895299889147282,N/A
p3_find_n_smallest_number,prompt_3,100,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_ = {i: arg1[i] for i in range(n)}\n    sorted_dict = sorted(dict_.items(), key=lambda x: x[1])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(sorted_dict[i][0])\n    return indexes']",10000,0.1606393998954445,0.16862705499632283,0.18711469997651875,N/A
p3_find_n_smallest_number,prompt_3,100,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    dict_ = {i: arg1[i] for i in range(n)}\n    sorted_dict = sorted(dict_.items(), key=lambda x: x[1])\n    indexes = []\n    for i in range(arg2):\n        indexes.append(sorted_dict[i][0])\n    return indexes']",100000,2.61614549998194,2.664252660004422,2.746009499998763,N/A
p3_find_n_smallest_number,prompt_4,1,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    elif k >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    heap = list(arg1[:k])\n    for i in range(k // 2 - 1, -1, -1):\n        sift_down(heap, i, k - 1, arg1)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    result = sorted(range(len(heap)), key=lambda i: heap[i])\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            result.append(i)\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    return sorted(result)\n\ndef sift_down(heap, i, end, values):\n    child = i * 2 + 1\n    while child <= end:\n        if child + 1 <= end and values[heap[child + 1]] > values[heap[child]]:\n            child += 1\n        if values[heap[child]] > values[heap[i]]:\n            heap[child], heap[i] = (heap[i], heap[child])\n            i = child\n            child = i * 2 + 1\n        else:\n            break']",1000,0.004435000009834766,0.004564678000751883,0.004737100098282099,N/A
p3_find_n_smallest_number,prompt_4,1,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    elif k >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    heap = list(arg1[:k])\n    for i in range(k // 2 - 1, -1, -1):\n        sift_down(heap, i, k - 1, arg1)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    result = sorted(range(len(heap)), key=lambda i: heap[i])\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            result.append(i)\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    return sorted(result)\n\ndef sift_down(heap, i, end, values):\n    child = i * 2 + 1\n    while child <= end:\n        if child + 1 <= end and values[heap[child + 1]] > values[heap[child]]:\n            child += 1\n        if values[heap[child]] > values[heap[i]]:\n            heap[child], heap[i] = (heap[i], heap[child])\n            i = child\n            child = i * 2 + 1\n        else:\n            break']",10000,0.039373100036755204,0.040434231008403,0.04190739989280701,N/A
p3_find_n_smallest_number,prompt_4,1,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    elif k >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    heap = list(arg1[:k])\n    for i in range(k // 2 - 1, -1, -1):\n        sift_down(heap, i, k - 1, arg1)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[0]:\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    result = sorted(range(len(heap)), key=lambda i: heap[i])\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            result.append(i)\n            heap[0] = arg1[i]\n            sift_down(heap, 0, k - 1, arg1)\n    return sorted(result)\n\ndef sift_down(heap, i, end, values):\n    child = i * 2 + 1\n    while child <= end:\n        if child + 1 <= end and values[heap[child + 1]] > values[heap[child]]:\n            child += 1\n        if values[heap[child]] > values[heap[i]]:\n            heap[child], heap[i] = (heap[i], heap[child])\n            i = child\n            child = i * 2 + 1\n        else:\n            break']",100000,0.39865770004689693,0.40388496600324286,0.41563880001194775,N/A
p3_find_n_smallest_number,prompt_4,2,"['def partition(arr, left, right, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot_value:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_index = (left + right) // 2\n    pivot_index = partition(arr, left, right, pivot_index)\n    if k == pivot_index:\n        return k\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, k):\n    kth_smallest = arg1[quickselect(arg1, 0, len(arg1) - 1, k - 1)]\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest]']",1000,0.007461200002580881,0.007902001999318599,0.010469199856743217,N/A
p3_find_n_smallest_number,prompt_4,2,"['def partition(arr, left, right, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot_value:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_index = (left + right) // 2\n    pivot_index = partition(arr, left, right, pivot_index)\n    if k == pivot_index:\n        return k\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, k):\n    kth_smallest = arg1[quickselect(arg1, 0, len(arg1) - 1, k - 1)]\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest]']",10000,0.07862880011089146,0.08048293599393219,0.08445800002664328,N/A
p3_find_n_smallest_number,prompt_4,2,"['def partition(arr, left, right, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot_value:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[right], arr[store_index] = (arr[store_index], arr[right])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return left\n    pivot_index = (left + right) // 2\n    pivot_index = partition(arr, left, right, pivot_index)\n    if k == pivot_index:\n        return k\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, k):\n    kth_smallest = arg1[quickselect(arg1, 0, len(arg1) - 1, k - 1)]\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest]']",100000,0.8554364000447094,0.944166628990788,0.9964183000847697,N/A
p3_find_n_smallest_number,prompt_4,3,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is larger than the size of the array.'\n    idx = [i for i in range(n)]\n    idx.sort(key=lambda x: arg1[x])\n    return idx[:arg2]""]",1000,0.007888100109994411,0.008401913999114186,0.010392599971964955,N/A
p3_find_n_smallest_number,prompt_4,3,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is larger than the size of the array.'\n    idx = [i for i in range(n)]\n    idx.sort(key=lambda x: arg1[x])\n    return idx[:arg2]""]",10000,0.11773640010505915,0.12054908401332795,0.1405859999358654,N/A
p3_find_n_smallest_number,prompt_4,3,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is larger than the size of the array.'\n    idx = [i for i in range(n)]\n    idx.sort(key=lambda x: arg1[x])\n    return idx[:arg2]""]",100000,1.6601422999519855,1.7003162019979208,1.7582241999916732,N/A
p3_find_n_smallest_number,prompt_4,4,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.007015699986368418,0.007367490991018712,0.007859000004827976,N/A
p3_find_n_smallest_number,prompt_4,4,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.1098720000591129,0.11241970802191645,0.12022679997608066,N/A
p3_find_n_smallest_number,prompt_4,4,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.5779357999563217,1.6147369330050423,1.681962399976328,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_heap = []\n    for i, num in enumerate(arg1):\n        if len(indices_heap) < arg2:\n            heapq.heappush(indices_heap, (-num, i))\n        elif -num > indices_heap[0][0]:\n            heapq.heappop(indices_heap)\n            heapq.heappush(indices_heap, (-num, i))\n    result = [heapq.heappop(indices_heap)[1] for _ in range(arg2)]\n    return result']",1000,0.004535899963229895,0.004860010982956737,0.015891999937593937,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_heap = []\n    for i, num in enumerate(arg1):\n        if len(indices_heap) < arg2:\n            heapq.heappush(indices_heap, (-num, i))\n        elif -num > indices_heap[0][0]:\n            heapq.heappop(indices_heap)\n            heapq.heappush(indices_heap, (-num, i))\n    result = [heapq.heappop(indices_heap)[1] for _ in range(arg2)]\n    return result']",10000,0.04329390008933842,0.044446019006427376,0.04681379999965429,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_heap = []\n    for i, num in enumerate(arg1):\n        if len(indices_heap) < arg2:\n            heapq.heappush(indices_heap, (-num, i))\n        elif -num > indices_heap[0][0]:\n            heapq.heappop(indices_heap)\n            heapq.heappush(indices_heap, (-num, i))\n    result = [heapq.heappop(indices_heap)[1] for _ in range(arg2)]\n    return result']",100000,0.44106290000490844,0.44931413400685416,0.47121259989216924,N/A
p3_find_n_smallest_number,prompt_4,6,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict.setdefault(val, []).append(i)\n    unique_vals = sorted(set(arg1))\n    smallest_vals = unique_vals[:arg2]\n    smallest_indexes = []\n    for val in smallest_vals:\n        smallest_indexes.extend(index_dict[val][:arg2])\n        arg2 -= len(index_dict[val])\n        if arg2 == 0:\n            break\n    return smallest_indexes']",1000,0.0065334998071193695,0.006980541008524597,0.01080689998343587,N/A
p3_find_n_smallest_number,prompt_4,6,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict.setdefault(val, []).append(i)\n    unique_vals = sorted(set(arg1))\n    smallest_vals = unique_vals[:arg2]\n    smallest_indexes = []\n    for val in smallest_vals:\n        smallest_indexes.extend(index_dict[val][:arg2])\n        arg2 -= len(index_dict[val])\n        if arg2 == 0:\n            break\n    return smallest_indexes']",10000,0.07366609992459416,0.07826262798160315,0.08123190002515912,N/A
p3_find_n_smallest_number,prompt_4,6,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, val in enumerate(arg1):\n        index_dict.setdefault(val, []).append(i)\n    unique_vals = sorted(set(arg1))\n    smallest_vals = unique_vals[:arg2]\n    smallest_indexes = []\n    for val in smallest_vals:\n        smallest_indexes.extend(index_dict[val][:arg2])\n        arg2 -= len(index_dict[val])\n        if arg2 == 0:\n            break\n    return smallest_indexes']",100000,1.61973339994438,1.6758127359999344,1.7188743997830898,N/A
p3_find_n_smallest_number,prompt_4,7,"['def funcImp(arg1, arg2):\n    kthSmallest = quickSelect(arg1, 0, len(arg1) - 1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes.append(i)\n            if len(indexes) == arg2:\n                break\n    return indexes\n\ndef quickSelect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivotIndex = partition(arr, left, right)\n    if pivotIndex == k:\n        return arr[pivotIndex]\n    elif k < pivotIndex:\n        return quickSelect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickSelect(arr, pivotIndex + 1, right, k)\n\ndef partition(arr, left, right):\n    pivotValue = arr[right]\n    pivotIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            swap(arr, i, pivotIndex)\n            pivotIndex += 1\n    swap(arr, right, pivotIndex)\n    return pivotIndex\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,7,"['def funcImp(arg1, arg2):\n    kthSmallest = quickSelect(arg1, 0, len(arg1) - 1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes.append(i)\n            if len(indexes) == arg2:\n                break\n    return indexes\n\ndef quickSelect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivotIndex = partition(arr, left, right)\n    if pivotIndex == k:\n        return arr[pivotIndex]\n    elif k < pivotIndex:\n        return quickSelect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickSelect(arr, pivotIndex + 1, right, k)\n\ndef partition(arr, left, right):\n    pivotValue = arr[right]\n    pivotIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            swap(arr, i, pivotIndex)\n            pivotIndex += 1\n    swap(arr, right, pivotIndex)\n    return pivotIndex\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,7,"['def funcImp(arg1, arg2):\n    kthSmallest = quickSelect(arg1, 0, len(arg1) - 1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kthSmallest:\n            indexes.append(i)\n            if len(indexes) == arg2:\n                break\n    return indexes\n\ndef quickSelect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivotIndex = partition(arr, left, right)\n    if pivotIndex == k:\n        return arr[pivotIndex]\n    elif k < pivotIndex:\n        return quickSelect(arr, left, pivotIndex - 1, k)\n    else:\n        return quickSelect(arr, pivotIndex + 1, right, k)\n\ndef partition(arr, left, right):\n    pivotValue = arr[right]\n    pivotIndex = left\n    for i in range(left, right):\n        if arr[i] < pivotValue:\n            swap(arr, i, pivotIndex)\n            pivotIndex += 1\n    swap(arr, right, pivotIndex)\n    return pivotIndex\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,8,"['def partition(arr, l, r):\n    x = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= x:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    q = partition(arr, l, r)\n    if q == k:\n        return arr[q]\n    elif q > k:\n        return quickselect(arr, l, q - 1, k)\n    else:\n        return quickselect(arr, q + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    kth = quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth]\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,8,"['def partition(arr, l, r):\n    x = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= x:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    q = partition(arr, l, r)\n    if q == k:\n        return arr[q]\n    elif q > k:\n        return quickselect(arr, l, q - 1, k)\n    else:\n        return quickselect(arr, q + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    kth = quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth]\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,8,"['def partition(arr, l, r):\n    x = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= x:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    q = partition(arr, l, r)\n    if q == k:\n        return arr[q]\n    elif q > k:\n        return quickselect(arr, l, q - 1, k)\n    else:\n        return quickselect(arr, q + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    kth = quickselect(arg1, 0, len(arg1) - 1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth]\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,9,"['def partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [(arr[left], left)]\n    pivot_idx = partition(arr, left, right)\n    if k == pivot_idx:\n        return [(arr[pivot_idx], pivot_idx)]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    idxs = []\n    for k in range(arg2):\n        res = quickselect(arg1, 0, len(arg1) - 1, k)\n        idxs.append(res[0][1])\n    return idxs']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,9,"['def partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [(arr[left], left)]\n    pivot_idx = partition(arr, left, right)\n    if k == pivot_idx:\n        return [(arr[pivot_idx], pivot_idx)]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    idxs = []\n    for k in range(arg2):\n        res = quickselect(arg1, 0, len(arg1) - 1, k)\n        idxs.append(res[0][1])\n    return idxs']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,9,"['def partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return [(arr[left], left)]\n    pivot_idx = partition(arr, left, right)\n    if k == pivot_idx:\n        return [(arr[pivot_idx], pivot_idx)]\n    elif k < pivot_idx:\n        return quickselect(arr, left, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    idxs = []\n    for k in range(arg2):\n        res = quickselect(arg1, 0, len(arg1) - 1, k)\n        idxs.append(res[0][1])\n    return idxs']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,10,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(n):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n            k_smallest.remove(arg1[i])\n            if not k_smallest:\n                break\n    return indexes']",1000,0.003874999936670065,0.004096064993645996,0.004869400057941675,N/A
p3_find_n_smallest_number,prompt_4,10,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(n):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n            k_smallest.remove(arg1[i])\n            if not k_smallest:\n                break\n    return indexes']",10000,0.09383339993655682,0.09603651799727231,0.10022670007310808,N/A
p3_find_n_smallest_number,prompt_4,10,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = []\n    for i in range(n):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n            k_smallest.remove(arg1[i])\n            if not k_smallest:\n                break\n    return indexes']",100000,1.3275540000759065,1.3631549659930169,1.4024489999283105,N/A
p3_find_n_smallest_number,prompt_4,11,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return indexes']",1000,0.03878589998930693,0.04041642298223451,0.04816260002553463,N/A
p3_find_n_smallest_number,prompt_4,11,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return indexes']",10000,0.66007039998658,0.6697257230058312,0.7070561998989433,N/A
p3_find_n_smallest_number,prompt_4,11,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indexes = [i for i in range(len(arg1)) if arg1[i] in k_smallest]\n    return indexes']",100000,4.681196699850261,4.752784263000358,4.870280999923125,N/A
p3_find_n_smallest_number,prompt_4,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'k cannot be larger than the length of the list.'\n    else:\n        indices = []\n        for i in range(k):\n            min_index = arg1.index(min(arg1))\n            indices.append(min_index)\n            arg1[min_index] = float('inf')\n        return indices""]",1000,0.0022372999228537083,0.0023658329946920275,0.007834000047296286,N/A
p3_find_n_smallest_number,prompt_4,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'k cannot be larger than the length of the list.'\n    else:\n        indices = []\n        for i in range(k):\n            min_index = arg1.index(min(arg1))\n            indices.append(min_index)\n            arg1[min_index] = float('inf')\n        return indices""]",10000,0.02266369992867112,0.03400212898151949,0.09961089980788529,N/A
p3_find_n_smallest_number,prompt_4,12,"[""def funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        return 'k cannot be larger than the length of the list.'\n    else:\n        indices = []\n        for i in range(k):\n            min_index = arg1.index(min(arg1))\n            indices.append(min_index)\n            arg1[min_index] = float('inf')\n        return indices""]",100000,0.33595259999856353,0.7437869149981998,1.0915518999099731,N/A
p3_find_n_smallest_number,prompt_4,13,"[""def funcImp(arg1, arg2):\n    smallest_k = [float('inf')] * arg2\n    for i in range(len(arg1)):\n        if arg1[i] < max(smallest_k):\n            smallest_k[smallest_k.index(max(smallest_k))] = arg1[i]\n    indexes = []\n    for j in range(len(arg1)):\n        if arg1[j] in smallest_k:\n            indexes.append(j)\n    return indexes""]",1000,0.010841399896889925,0.011080733987037093,0.011494799982756376,N/A
p3_find_n_smallest_number,prompt_4,13,"[""def funcImp(arg1, arg2):\n    smallest_k = [float('inf')] * arg2\n    for i in range(len(arg1)):\n        if arg1[i] < max(smallest_k):\n            smallest_k[smallest_k.index(max(smallest_k))] = arg1[i]\n    indexes = []\n    for j in range(len(arg1)):\n        if arg1[j] in smallest_k:\n            indexes.append(j)\n    return indexes""]",10000,0.10538349999114871,0.10770600799005478,0.1162058999761939,N/A
p3_find_n_smallest_number,prompt_4,13,"[""def funcImp(arg1, arg2):\n    smallest_k = [float('inf')] * arg2\n    for i in range(len(arg1)):\n        if arg1[i] < max(smallest_k):\n            smallest_k[smallest_k.index(max(smallest_k))] = arg1[i]\n    indexes = []\n    for j in range(len(arg1)):\n        if arg1[j] in smallest_k:\n            indexes.append(j)\n    return indexes""]",100000,1.0644531999714673,1.0776614540116862,1.1137680001556873,N/A
p3_find_n_smallest_number,prompt_4,14,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        """"""\n        Return the kth smallest element in lst via quickselect\n        """"""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes[:arg2]']",1000,0.007863800041377544,0.008194522000849247,0.010637599974870682,N/A
p3_find_n_smallest_number,prompt_4,14,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        """"""\n        Return the kth smallest element in lst via quickselect\n        """"""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes[:arg2]']",10000,0.09617380006238818,0.09788996000308543,0.10242610005661845,N/A
p3_find_n_smallest_number,prompt_4,14,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        """"""\n        Return the kth smallest element in lst via quickselect\n        """"""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x == kth_smallest]\n    return indexes[:arg2]']",100000,1.126163500128314,1.1687913609924727,1.2309962001163512,N/A
p3_find_n_smallest_number,prompt_4,15,"['def funcImp(arg1, arg2):\n\n    def partition(lst, pivot):\n        """"""Partition the list into three parts: < pivot, == pivot, and > pivot.""""""\n        smaller = []\n        larger = []\n        pivots = []\n        for elem in lst:\n            if elem < pivot:\n                smaller.append(elem)\n            elif elem == pivot:\n                pivots.append(elem)\n            else:\n                larger.append(elem)\n        return (smaller, pivots, larger)\n\n    def select(lst, k):\n        """"""Select the k-th smallest element in lst (0-based index).""""""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        left, mid, right = partition(lst, pivot)\n        if k < len(left):\n            return select(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return select(right, k - len(left) - len(mid))\n    kth_smallest = select(arg1, arg2 - 1)\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",1000,0.00663030007854104,0.006987212998792529,0.008311899844557047,N/A
p3_find_n_smallest_number,prompt_4,15,"['def funcImp(arg1, arg2):\n\n    def partition(lst, pivot):\n        """"""Partition the list into three parts: < pivot, == pivot, and > pivot.""""""\n        smaller = []\n        larger = []\n        pivots = []\n        for elem in lst:\n            if elem < pivot:\n                smaller.append(elem)\n            elif elem == pivot:\n                pivots.append(elem)\n            else:\n                larger.append(elem)\n        return (smaller, pivots, larger)\n\n    def select(lst, k):\n        """"""Select the k-th smallest element in lst (0-based index).""""""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        left, mid, right = partition(lst, pivot)\n        if k < len(left):\n            return select(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return select(right, k - len(left) - len(mid))\n    kth_smallest = select(arg1, arg2 - 1)\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",10000,0.091764000011608,0.09307669898262247,0.10143160005100071,N/A
p3_find_n_smallest_number,prompt_4,15,"['def funcImp(arg1, arg2):\n\n    def partition(lst, pivot):\n        """"""Partition the list into three parts: < pivot, == pivot, and > pivot.""""""\n        smaller = []\n        larger = []\n        pivots = []\n        for elem in lst:\n            if elem < pivot:\n                smaller.append(elem)\n            elif elem == pivot:\n                pivots.append(elem)\n            else:\n                larger.append(elem)\n        return (smaller, pivots, larger)\n\n    def select(lst, k):\n        """"""Select the k-th smallest element in lst (0-based index).""""""\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[len(lst) // 2]\n        left, mid, right = partition(lst, pivot)\n        if k < len(left):\n            return select(left, k)\n        elif k < len(left) + len(mid):\n            return mid[0]\n        else:\n            return select(right, k - len(left) - len(mid))\n    kth_smallest = select(arg1, arg2 - 1)\n    indices = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indices']",100000,0.7299498000647873,0.7388794940081425,0.7678467999212444,N/A
p3_find_n_smallest_number,prompt_4,16,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def quick_select(lst, k):\n        if not lst:\n            return []\n        pivot = random.choice(lst)\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        mid = [x for x in lst if x == pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quick_select(right, k - len(left) - len(mid))\n    k = arg2\n    smallest_vals = quick_select(arg1, k)\n    smallest_idxs = []\n    for i, val in enumerate(arg1):\n        if val in smallest_vals:\n            smallest_idxs.append(i)\n    return smallest_idxs']",1000,0.011176900006830692,0.012048146002925933,0.013192499987781048,N/A
p3_find_n_smallest_number,prompt_4,16,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def quick_select(lst, k):\n        if not lst:\n            return []\n        pivot = random.choice(lst)\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        mid = [x for x in lst if x == pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quick_select(right, k - len(left) - len(mid))\n    k = arg2\n    smallest_vals = quick_select(arg1, k)\n    smallest_idxs = []\n    for i, val in enumerate(arg1):\n        if val in smallest_vals:\n            smallest_idxs.append(i)\n    return smallest_idxs']",10000,0.10284500010311604,0.10859556800452992,0.11659009987488389,N/A
p3_find_n_smallest_number,prompt_4,16,"['import random\n\ndef funcImp(arg1, arg2):\n\n    def quick_select(lst, k):\n        if not lst:\n            return []\n        pivot = random.choice(lst)\n        left = [x for x in lst if x < pivot]\n        right = [x for x in lst if x > pivot]\n        mid = [x for x in lst if x == pivot]\n        if k < len(left):\n            return quick_select(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quick_select(right, k - len(left) - len(mid))\n    k = arg2\n    smallest_vals = quick_select(arg1, k)\n    smallest_idxs = []\n    for i, val in enumerate(arg1):\n        if val in smallest_vals:\n            smallest_idxs.append(i)\n    return smallest_idxs']",100000,1.0379731999710202,1.1274651200068184,1.232435799902305,N/A
p3_find_n_smallest_number,prompt_4,17,"['def funcImp(arg1, k):\n    value_index = {value: index for index, value in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:k]\n    result = [value_index[value] for value in k_smallest]\n    return result']",1000,0.005617800168693066,0.005997732994146645,0.006969800218939781,N/A
p3_find_n_smallest_number,prompt_4,17,"['def funcImp(arg1, k):\n    value_index = {value: index for index, value in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:k]\n    result = [value_index[value] for value in k_smallest]\n    return result']",10000,0.10734119988046587,0.11095962198916823,0.1283418999519199,N/A
p3_find_n_smallest_number,prompt_4,17,"['def funcImp(arg1, k):\n    value_index = {value: index for index, value in enumerate(arg1)}\n    k_smallest = sorted(arg1)[:k]\n    result = [value_index[value] for value in k_smallest]\n    return result']",100000,1.6406230998691171,1.676113344989717,1.7380836000666022,N/A
p3_find_n_smallest_number,prompt_4,18,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices_k_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices_k_smallest']",1000,0.0070668000262230635,0.007457897998392582,0.008660600055009127,N/A
p3_find_n_smallest_number,prompt_4,18,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices_k_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices_k_smallest']",10000,0.11075189989060163,0.11377907399320975,0.12532239989377558,N/A
p3_find_n_smallest_number,prompt_4,18,"['def funcImp(arg1, arg2):\n    k = arg2\n    indices_k_smallest = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return indices_k_smallest']",100000,1.589366199914366,1.6374374789954163,1.6992446000222117,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-arr[i], i))\n        elif -heap[0][0] > arr[i]:\n            heapq.heappushpop(heap, (-arr[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(k)]\n    result.sort()\n    return result']",1000,0.003840699791908264,0.003969770986586809,0.004777299938723445,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-arr[i], i))\n        elif -heap[0][0] > arr[i]:\n            heapq.heappushpop(heap, (-arr[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(k)]\n    result.sort()\n    return result']",10000,0.03664930001832545,0.03799937000032514,0.0440328000113368,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arr, k):\n    heap = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-arr[i], i))\n        elif -heap[0][0] > arr[i]:\n            heapq.heappushpop(heap, (-arr[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(k)]\n    result.sort()\n    return result']",100000,0.36545690009370446,0.3763932329951786,0.4021570000331849,N/A
p3_find_n_smallest_number,prompt_4,20,"['def funcImp(arg1, arg2):\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_indexes = [t[1] for t in sorted_tuples[:arg2]]\n    return k_indexes']",1000,0.00945560005493462,0.009975468991324305,0.010815500048920512,N/A
p3_find_n_smallest_number,prompt_4,20,"['def funcImp(arg1, arg2):\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_indexes = [t[1] for t in sorted_tuples[:arg2]]\n    return k_indexes']",10000,0.15681850002147257,0.16308135399827733,0.1715226999949664,N/A
p3_find_n_smallest_number,prompt_4,20,"['def funcImp(arg1, arg2):\n    tuples = [(element, index) for index, element in enumerate(arg1)]\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    k_indexes = [t[1] for t in sorted_tuples[:arg2]]\n    return k_indexes']",100000,2.2983014001511037,2.374651056998409,2.46165470010601,N/A
p3_find_n_smallest_number,prompt_4,21,"['def funcImp(arg1, arg2):\n    """"""\n    Takes a list of integers \'arg1\' and an integer \'arg2\'\n    Returns a list containing the indices of the k smallest elements in \'arg1\'\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    kSmallest = arr[:arg2]\n    indexDict = {}\n    for i, num in enumerate(arg1):\n        indexDict[num] = i\n    kSmallestIndices = [indexDict[num] for num in kSmallest]\n    return kSmallestIndices']",1000,0.005950799910351634,0.006355937006883323,0.007594799855723977,N/A
p3_find_n_smallest_number,prompt_4,21,"['def funcImp(arg1, arg2):\n    """"""\n    Takes a list of integers \'arg1\' and an integer \'arg2\'\n    Returns a list containing the indices of the k smallest elements in \'arg1\'\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    kSmallest = arr[:arg2]\n    indexDict = {}\n    for i, num in enumerate(arg1):\n        indexDict[num] = i\n    kSmallestIndices = [indexDict[num] for num in kSmallest]\n    return kSmallestIndices']",10000,0.10908820014446974,0.11352079499280081,0.13272069999948144,N/A
p3_find_n_smallest_number,prompt_4,21,"['def funcImp(arg1, arg2):\n    """"""\n    Takes a list of integers \'arg1\' and an integer \'arg2\'\n    Returns a list containing the indices of the k smallest elements in \'arg1\'\n    """"""\n    arr = arg1.copy()\n    arr.sort()\n    kSmallest = arr[:arg2]\n    indexDict = {}\n    for i, num in enumerate(arg1):\n        indexDict[num] = i\n    kSmallestIndices = [indexDict[num] for num in kSmallest]\n    return kSmallestIndices']",100000,1.699924800079316,1.7510056509892455,1.7915070001035929,N/A
p3_find_n_smallest_number,prompt_4,22,"['def funcImp(arg1, arg2):\n    indices = []\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(dict[sorted_arr[i]])\n    return indices']",1000,0.00553980004042387,0.005894284003879875,0.006452500121667981,N/A
p3_find_n_smallest_number,prompt_4,22,"['def funcImp(arg1, arg2):\n    indices = []\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(dict[sorted_arr[i]])\n    return indices']",10000,0.10532099986448884,0.10885047100950032,0.1159777999855578,N/A
p3_find_n_smallest_number,prompt_4,22,"['def funcImp(arg1, arg2):\n    indices = []\n    dict = {arg1[i]: i for i in range(len(arg1))}\n    sorted_arr = sorted(arg1)\n    for i in range(arg2):\n        indices.append(dict[sorted_arr[i]])\n    return indices']",100000,1.6073501000646502,1.6483607600047252,1.7089288998395205,N/A
p3_find_n_smallest_number,prompt_4,23,"['def funcImp(arg1, arg2):\n    temp = arg1.copy()\n    k = arg2\n    res = []\n    temp.sort()\n    for i in range(k):\n        index = arg1.index(temp[i])\n        res.append(index)\n    return res']",1000,0.003300500102341175,0.003547134003601968,0.0043358998373150826,N/A
p3_find_n_smallest_number,prompt_4,23,"['def funcImp(arg1, arg2):\n    temp = arg1.copy()\n    k = arg2\n    res = []\n    temp.sort()\n    for i in range(k):\n        index = arg1.index(temp[i])\n        res.append(index)\n    return res']",10000,0.08429770008660853,0.08765320800477638,0.09641969995573163,N/A
p3_find_n_smallest_number,prompt_4,23,"['def funcImp(arg1, arg2):\n    temp = arg1.copy()\n    k = arg2\n    res = []\n    temp.sort()\n    for i in range(k):\n        index = arg1.index(temp[i])\n        res.append(index)\n    return res']",100000,1.2090054999571294,1.23657486400567,1.2713721001055092,N/A
p3_find_n_smallest_number,prompt_4,24,"['def funcImp(arg1, arg2):\n    k = arg2\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    res = [idx for val, idx in lst[:k]]\n    return res']",1000,0.011602599872276187,0.012258102977648377,0.01466159988194704,N/A
p3_find_n_smallest_number,prompt_4,24,"['def funcImp(arg1, arg2):\n    k = arg2\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    res = [idx for val, idx in lst[:k]]\n    return res']",10000,0.17324079992249608,0.1818728860002011,0.19653590000234544,N/A
p3_find_n_smallest_number,prompt_4,24,"['def funcImp(arg1, arg2):\n    k = arg2\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    res = [idx for val, idx in lst[:k]]\n    return res']",100000,2.851507200160995,2.9487932530092076,3.099372000200674,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",1000,0.004186500096693635,0.004370578993111849,0.005205400055274367,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",10000,0.04010379989631474,0.04168307299492881,0.04443200002424419,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    return [heapq.heappop(heap)[1] for i in range(arg2)][::-1]']",100000,0.4038556998129934,0.41536877400940286,0.43657059990800917,N/A
p3_find_n_smallest_number,prompt_4,26,"['def funcImp(arg1, arg2):\n    mapping = {val: i for i, val in enumerate(arg1)}\n    smallest = sorted(arg1)[:arg2]\n    indices = [mapping[val] for val in smallest]\n    return indices']",1000,0.005880200071260333,0.006114933013450354,0.006612800061702728,N/A
p3_find_n_smallest_number,prompt_4,26,"['def funcImp(arg1, arg2):\n    mapping = {val: i for i, val in enumerate(arg1)}\n    smallest = sorted(arg1)[:arg2]\n    indices = [mapping[val] for val in smallest]\n    return indices']",10000,0.10633410001173615,0.11061540500959381,0.1721916999667883,N/A
p3_find_n_smallest_number,prompt_4,26,"['def funcImp(arg1, arg2):\n    mapping = {val: i for i, val in enumerate(arg1)}\n    smallest = sorted(arg1)[:arg2]\n    indices = [mapping[val] for val in smallest]\n    return indices']",100000,1.6339605001267046,1.6810385429975576,1.7314311999361962,N/A
p3_find_n_smallest_number,prompt_4,27,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return range(n)\n    k_smallest_indexes = []\n    k_smallest = [float('inf')] * arg2\n    for i in range(n):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            j = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(j, arg1[i])\n            k_smallest_indexes.insert(j, i)\n    return k_smallest_indexes""]",1000,0,0,0,	 exception: name 'bisect_left' is not defined
p3_find_n_smallest_number,prompt_4,27,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return range(n)\n    k_smallest_indexes = []\n    k_smallest = [float('inf')] * arg2\n    for i in range(n):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            j = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(j, arg1[i])\n            k_smallest_indexes.insert(j, i)\n    return k_smallest_indexes""]",10000,0,0,0,	 exception: name 'bisect_left' is not defined
p3_find_n_smallest_number,prompt_4,27,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 >= n:\n        return range(n)\n    k_smallest_indexes = []\n    k_smallest = [float('inf')] * arg2\n    for i in range(n):\n        if arg1[i] < k_smallest[-1]:\n            k_smallest.pop()\n            j = bisect_left(k_smallest, arg1[i])\n            k_smallest.insert(j, arg1[i])\n            k_smallest_indexes.insert(j, i)\n    return k_smallest_indexes""]",100000,0,0,0,	 exception: name 'bisect_left' is not defined
p3_find_n_smallest_number,prompt_4,28,"['def funcImp(arr, k):\n    values = dict(zip(arr, range(len(arr))))\n    smallest = sorted(values.keys())[:k]\n    indices = [values[val] for val in smallest]\n    return indices']",1000,0.005176899954676628,0.005397307008970529,0.0060351998545229435,N/A
p3_find_n_smallest_number,prompt_4,28,"['def funcImp(arr, k):\n    values = dict(zip(arr, range(len(arr))))\n    smallest = sorted(values.keys())[:k]\n    indices = [values[val] for val in smallest]\n    return indices']",10000,0.09938020003028214,0.10225019300123676,0.11401069979183376,N/A
p3_find_n_smallest_number,prompt_4,28,"['def funcImp(arr, k):\n    values = dict(zip(arr, range(len(arr))))\n    smallest = sorted(values.keys())[:k]\n    indices = [values[val] for val in smallest]\n    return indices']",100000,1.548683000029996,1.5996955850021914,1.6671768000815064,N/A
p3_find_n_smallest_number,prompt_4,29,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(indices[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.008270699996501207,0.00882691900478676,0.013132699998095632,N/A
p3_find_n_smallest_number,prompt_4,29,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(indices[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.1353192999958992,0.1398954820050858,0.1665517999790609,N/A
p3_find_n_smallest_number,prompt_4,29,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(indices[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,2.1722375999670476,2.232411493996624,2.292412299895659,N/A
p3_find_n_smallest_number,prompt_4,30,"['def funcImp(arg1, arg2):\n    frequency_dict = {}\n    for ind, num in enumerate(arg1):\n        if num not in frequency_dict:\n            frequency_dict[num] = [0, ind]\n        else:\n            frequency_dict[num][0] += 1\n    distinct_nums = sorted(list(frequency_dict.keys()))\n    k_smallest = []\n    for num in distinct_nums:\n        freq = frequency_dict[num][0]\n        ind = frequency_dict[num][1]\n        if len(k_smallest) < arg2:\n            for i in range(freq + 1):\n                k_smallest.append(ind)\n                if len(k_smallest) == arg2:\n                    return k_smallest\n        else:\n            for i in range(freq + 1):\n                k_smallest[-1] = ind\n                k_smallest.sort()\n                if len(k_smallest) == arg2:\n                    return k_smallest\n    return k_smallest']",1000,0.008838600013405085,0.009442312978208064,0.016079199966043234,N/A
p3_find_n_smallest_number,prompt_4,30,"['def funcImp(arg1, arg2):\n    frequency_dict = {}\n    for ind, num in enumerate(arg1):\n        if num not in frequency_dict:\n            frequency_dict[num] = [0, ind]\n        else:\n            frequency_dict[num][0] += 1\n    distinct_nums = sorted(list(frequency_dict.keys()))\n    k_smallest = []\n    for num in distinct_nums:\n        freq = frequency_dict[num][0]\n        ind = frequency_dict[num][1]\n        if len(k_smallest) < arg2:\n            for i in range(freq + 1):\n                k_smallest.append(ind)\n                if len(k_smallest) == arg2:\n                    return k_smallest\n        else:\n            for i in range(freq + 1):\n                k_smallest[-1] = ind\n                k_smallest.sort()\n                if len(k_smallest) == arg2:\n                    return k_smallest\n    return k_smallest']",10000,0.13912410009652376,0.1446205169800669,0.1542410000693053,N/A
p3_find_n_smallest_number,prompt_4,30,"['def funcImp(arg1, arg2):\n    frequency_dict = {}\n    for ind, num in enumerate(arg1):\n        if num not in frequency_dict:\n            frequency_dict[num] = [0, ind]\n        else:\n            frequency_dict[num][0] += 1\n    distinct_nums = sorted(list(frequency_dict.keys()))\n    k_smallest = []\n    for num in distinct_nums:\n        freq = frequency_dict[num][0]\n        ind = frequency_dict[num][1]\n        if len(k_smallest) < arg2:\n            for i in range(freq + 1):\n                k_smallest.append(ind)\n                if len(k_smallest) == arg2:\n                    return k_smallest\n        else:\n            for i in range(freq + 1):\n                k_smallest[-1] = ind\n                k_smallest.sort()\n                if len(k_smallest) == arg2:\n                    return k_smallest\n    return k_smallest']",100000,2.2770420000888407,2.3241279480000956,2.413674999959767,N/A
p3_find_n_smallest_number,prompt_4,31,"[""def funcImp(arg1, arg2):\n    k = arg2\n    index_list = []\n    for i in range(k):\n        min_idx = arg1.index(min(arg1))\n        index_list.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return index_list""]",1000,0.0021526999771595,0.002434937998186797,0.007866600062698126,N/A
p3_find_n_smallest_number,prompt_4,31,"[""def funcImp(arg1, arg2):\n    k = arg2\n    index_list = []\n    for i in range(k):\n        min_idx = arg1.index(min(arg1))\n        index_list.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return index_list""]",10000,0.022002500016242266,0.03289216697914526,0.08821430010721087,N/A
p3_find_n_smallest_number,prompt_4,31,"[""def funcImp(arg1, arg2):\n    k = arg2\n    index_list = []\n    for i in range(k):\n        min_idx = arg1.index(min(arg1))\n        index_list.append(min_idx)\n        arg1[min_idx] = float('inf')\n    return index_list""]",100000,0.33697229996323586,0.7469041340053082,1.1069341998081654,N/A
p3_find_n_smallest_number,prompt_4,32,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        index = arg1.index(sorted_arr[i])\n        smallest_indexes.append(index)\n    return smallest_indexes']",1000,0.0031832000240683556,0.003499386003240943,0.004245799966156483,N/A
p3_find_n_smallest_number,prompt_4,32,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        index = arg1.index(sorted_arr[i])\n        smallest_indexes.append(index)\n    return smallest_indexes']",10000,0.08261709986254573,0.08572267100447789,0.08977189986035228,N/A
p3_find_n_smallest_number,prompt_4,32,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    k = arg2\n    smallest_indexes = []\n    for i in range(k):\n        index = arg1.index(sorted_arr[i])\n        smallest_indexes.append(index)\n    return smallest_indexes']",100000,1.2104516001418233,1.2392492660018615,1.2773298001848161,N/A
p3_find_n_smallest_number,prompt_4,33,"['def funcImp(arg1, arg2):\n    values = {}\n    for i in range(len(arg1)):\n        values[i] = arg1[i]\n    sorted_values = sorted(values.items(), key=lambda x: x[1])\n    result = [index for index, value in sorted_values[:arg2]]\n    return result']",1000,0.009983700001612306,0.010726706990972161,0.01650670007802546,N/A
p3_find_n_smallest_number,prompt_4,33,"['def funcImp(arg1, arg2):\n    values = {}\n    for i in range(len(arg1)):\n        values[i] = arg1[i]\n    sorted_values = sorted(values.items(), key=lambda x: x[1])\n    result = [index for index, value in sorted_values[:arg2]]\n    return result']",10000,0.1566445000935346,0.16872614100808278,0.17806780012324452,N/A
p3_find_n_smallest_number,prompt_4,33,"['def funcImp(arg1, arg2):\n    values = {}\n    for i in range(len(arg1)):\n        values[i] = arg1[i]\n    sorted_values = sorted(values.items(), key=lambda x: x[1])\n    result = [index for index, value in sorted_values[:arg2]]\n    return result']",100000,2.6291035001631826,2.692730103000067,2.821016099769622,N/A
p3_find_n_smallest_number,prompt_4,34,"['def funcImp(arg1, arg2):\n    k = arg2 if arg2 <= len(arg1) else len(arg1)\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        index = arg1.index(num)\n        indices.append(index)\n    indices.sort()\n    return indices']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,34,"['def funcImp(arg1, arg2):\n    k = arg2 if arg2 <= len(arg1) else len(arg1)\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        index = arg1.index(num)\n        indices.append(index)\n    indices.sort()\n    return indices']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,34,"['def funcImp(arg1, arg2):\n    k = arg2 if arg2 <= len(arg1) else len(arg1)\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    indices = []\n    for num in heap:\n        index = arg1.index(num)\n        indices.append(index)\n    indices.sort()\n    return indices']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,35,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [x for x in nums if x < pivot]\n        right = [x for x in nums if x > pivot]\n        mid = [x for x in nums if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    k_smallest = quickselect(arg1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_4,35,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [x for x in nums if x < pivot]\n        right = [x for x in nums if x > pivot]\n        mid = [x for x in nums if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    k_smallest = quickselect(arg1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_4,35,"['def funcImp(arg1, arg2):\n\n    def quickselect(nums, k):\n        if not nums:\n            return []\n        pivot = random.choice(nums)\n        left = [x for x in nums if x < pivot]\n        right = [x for x in nums if x > pivot]\n        mid = [x for x in nums if x == pivot]\n        if k < len(left):\n            return quickselect(left, k)\n        elif k < len(left) + len(mid):\n            return mid\n        else:\n            return quickselect(right, k - len(left) - len(mid))\n    k_smallest = quickselect(arg1, arg2)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in k_smallest:\n            indexes.append(i)\n    return indexes']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_4,36,"['def funcImp(arr, k):\n    heap = arr[:k]\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapreplace(heap, arr[i])\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices']",1000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_4,36,"['def funcImp(arr, k):\n    heap = arr[:k]\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapreplace(heap, arr[i])\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices']",10000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_4,36,"['def funcImp(arr, k):\n    heap = arr[:k]\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapreplace(heap, arr[i])\n    indices = []\n    for i in heap:\n        indices.append(arr.index(i))\n    return indices']",100000,0,0,0,	 exception: name 'heapify' is not defined
p3_find_n_smallest_number,prompt_4,37,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [x[1] for x in lst[:arg2]]']",1000,0.01152239996008575,0.012157405011821538,0.014379900181666017,N/A
p3_find_n_smallest_number,prompt_4,37,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [x[1] for x in lst[:arg2]]']",10000,0.1743189999833703,0.1816548540024087,0.19773990008980036,N/A
p3_find_n_smallest_number,prompt_4,37,"['def funcImp(arg1, arg2):\n    lst = [(val, idx) for idx, val in enumerate(arg1)]\n    lst.sort()\n    return [x[1] for x in lst[:arg2]]']",100000,2.858201399911195,2.9189474839996548,3.068473400082439,N/A
p3_find_n_smallest_number,prompt_4,38,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [-i for i in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heapreplace(heap, -arg1[i])\n    indices = []\n    for i in range(arg2):\n        indices.append(arg1.index(-heapq.heappop(heap)))\n    return indices']",1000,0.0030357998330146074,0.003218510993756354,0.004049899987876415,N/A
p3_find_n_smallest_number,prompt_4,38,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [-i for i in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heapreplace(heap, -arg1[i])\n    indices = []\n    for i in range(arg2):\n        indices.append(arg1.index(-heapq.heappop(heap)))\n    return indices']",10000,0.03441060008481145,0.03581457799999043,0.041497099911794066,N/A
p3_find_n_smallest_number,prompt_4,38,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [-i for i in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heapreplace(heap, -arg1[i])\n    indices = []\n    for i in range(arg2):\n        indices.append(arg1.index(-heapq.heappop(heap)))\n    return indices']",100000,0.39174579991959035,0.40471391899511217,0.445371099980548,N/A
p3_find_n_smallest_number,prompt_4,39,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n\n    def quickselect(lst, k):\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1[:], arg2 - 1)\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]']",1000,0.00930330017581582,0.009789017015136778,0.012123200111091137,N/A
p3_find_n_smallest_number,prompt_4,39,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n\n    def quickselect(lst, k):\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1[:], arg2 - 1)\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]']",10000,0.14353480003774166,0.1475537480134517,0.16121470020152628,N/A
p3_find_n_smallest_number,prompt_4,39,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n\n    def quickselect(lst, k):\n        pivot = lst[len(lst) // 2]\n        lows = [el for el in lst if el < pivot]\n        highs = [el for el in lst if el > pivot]\n        pivots = [el for el in lst if el == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    kth_smallest = quickselect(arg1[:], arg2 - 1)\n    return [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]']",100000,1.1033439999446273,1.1297930850088596,1.1720412999857217,N/A
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_dict = {num: idx for idx, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest_indices = []\n    for num in sorted_list[:arg2]:\n        k_smallest_indices.append(num_dict[num])\n    return k_smallest_indices']",1000,0.005823199870064855,0.0060668769921176134,0.00803350005298853,N/A
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_dict = {num: idx for idx, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest_indices = []\n    for num in sorted_list[:arg2]:\n        k_smallest_indices.append(num_dict[num])\n    return k_smallest_indices']",10000,0.10582960001192987,0.10943213999038562,0.11825719987973571,N/A
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_dict = {num: idx for idx, num in enumerate(arg1)}\n    sorted_list = sorted(arg1)\n    k_smallest_indices = []\n    for num in sorted_list[:arg2]:\n        k_smallest_indices.append(num_dict[num])\n    return k_smallest_indices']",100000,1.6292371000163257,1.676768792993389,1.7498238999396563,N/A
p3_find_n_smallest_number,prompt_4,41,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 < 1 or arg2 > n:\n        return []\n    indices = range(n)\n    k_smallest_indices = sorted(indices, key=lambda i: arg1[i])[:arg2]\n    return k_smallest_indices']",1000,0.007061399985104799,0.007473216990474612,0.007918999996036291,N/A
p3_find_n_smallest_number,prompt_4,41,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 < 1 or arg2 > n:\n        return []\n    indices = range(n)\n    k_smallest_indices = sorted(indices, key=lambda i: arg1[i])[:arg2]\n    return k_smallest_indices']",10000,0.1106908000074327,0.11373744799522684,0.1257561999373138,N/A
p3_find_n_smallest_number,prompt_4,41,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 < 1 or arg2 > n:\n        return []\n    indices = range(n)\n    k_smallest_indices = sorted(indices, key=lambda i: arg1[i])[:arg2]\n    return k_smallest_indices']",100000,1.6011566000524908,1.6485499899904243,1.718356299912557,N/A
p3_find_n_smallest_number,prompt_4,42,"['def funcImp(arg1, k):\n    n = len(arg1)\n    if k < 1 or k > n:\n        return []\n    indices = list(range(n))\n    indices.sort(key=lambda i: arg1[i])\n    return indices[:k]']",1000,0.007037600036710501,0.0074370659771375355,0.010601900052279234,N/A
p3_find_n_smallest_number,prompt_4,42,"['def funcImp(arg1, k):\n    n = len(arg1)\n    if k < 1 or k > n:\n        return []\n    indices = list(range(n))\n    indices.sort(key=lambda i: arg1[i])\n    return indices[:k]']",10000,0.1149057000875473,0.11875267999712377,0.1312855000142008,N/A
p3_find_n_smallest_number,prompt_4,42,"['def funcImp(arg1, k):\n    n = len(arg1)\n    if k < 1 or k > n:\n        return []\n    indices = list(range(n))\n    indices.sort(key=lambda i: arg1[i])\n    return indices[:k]']",100000,1.617591500049457,1.6592441620049068,1.7174170999787748,N/A
p3_find_n_smallest_number,prompt_4,43,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Invalid input'\n    nums = arg1\n    k = arg2\n    index_dict = {}\n    heap = nums[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, len(nums)):\n        if nums[i] < heap[0]:\n            heap[0] = nums[i]\n            heapify(heap, k, 0)\n        if nums[i] in heap:\n            index_dict[nums[i]] = index_dict.get(nums[i], []) + [i]\n    result = []\n    for num in heap:\n        if num in index_dict:\n            result.extend(sorted(index_dict[num]))\n    return result\n\ndef heapify(heap, n, i):\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and heap[left] < heap[smallest]:\n        smallest = left\n    if right < n and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != i:\n        heap[i], heap[smallest] = (heap[smallest], heap[i])\n        heapify(heap, n, smallest)""]",1000,0,0,0,	 exception: cannot access local variable 'k' where it is not associated with a value
p3_find_n_smallest_number,prompt_4,43,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Invalid input'\n    nums = arg1\n    k = arg2\n    index_dict = {}\n    heap = nums[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, len(nums)):\n        if nums[i] < heap[0]:\n            heap[0] = nums[i]\n            heapify(heap, k, 0)\n        if nums[i] in heap:\n            index_dict[nums[i]] = index_dict.get(nums[i], []) + [i]\n    result = []\n    for num in heap:\n        if num in index_dict:\n            result.extend(sorted(index_dict[num]))\n    return result\n\ndef heapify(heap, n, i):\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and heap[left] < heap[smallest]:\n        smallest = left\n    if right < n and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != i:\n        heap[i], heap[smallest] = (heap[smallest], heap[i])\n        heapify(heap, n, smallest)""]",10000,0,0,0,	 exception: cannot access local variable 'k' where it is not associated with a value
p3_find_n_smallest_number,prompt_4,43,"[""def funcImp(arg1, arg2):\n    if k > len(arg1):\n        return 'Invalid input'\n    nums = arg1\n    k = arg2\n    index_dict = {}\n    heap = nums[:k]\n    for i in range(k // 2 - 1, -1, -1):\n        heapify(heap, k, i)\n    for i in range(k, len(nums)):\n        if nums[i] < heap[0]:\n            heap[0] = nums[i]\n            heapify(heap, k, 0)\n        if nums[i] in heap:\n            index_dict[nums[i]] = index_dict.get(nums[i], []) + [i]\n    result = []\n    for num in heap:\n        if num in index_dict:\n            result.extend(sorted(index_dict[num]))\n    return result\n\ndef heapify(heap, n, i):\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and heap[left] < heap[smallest]:\n        smallest = left\n    if right < n and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != i:\n        heap[i], heap[smallest] = (heap[smallest], heap[i])\n        heapify(heap, n, smallest)""]",100000,0,0,0,	 exception: cannot access local variable 'k' where it is not associated with a value
p3_find_n_smallest_number,prompt_4,44,"['def funcImp(arg1, arg2):\n    d = {i: arg1[i] for i in range(len(arg1))}\n    k_values = sorted(d.values())[:arg2]\n    result = [k for k, v in d.items() if v in k_values]\n    return result']",1000,0.00828789989463985,0.008803610983304679,0.009869599947705865,N/A
p3_find_n_smallest_number,prompt_4,44,"['def funcImp(arg1, arg2):\n    d = {i: arg1[i] for i in range(len(arg1))}\n    k_values = sorted(d.values())[:arg2]\n    result = [k for k, v in d.items() if v in k_values]\n    return result']",10000,0.13012099987827241,0.134032420986332,0.14232420013286173,N/A
p3_find_n_smallest_number,prompt_4,44,"['def funcImp(arg1, arg2):\n    d = {i: arg1[i] for i in range(len(arg1))}\n    k_values = sorted(d.values())[:arg2]\n    result = [k for k, v in d.items() if v in k_values]\n    return result']",100000,1.881967900088057,1.9244225689978338,1.977554599987343,N/A
p3_find_n_smallest_number,prompt_4,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict.setdefault(n, []).append(i)\n    sorted_arr = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.extend(index_dict[sorted_arr[i]])\n    return k_smallest_indexes']",1000,0.008570800069719553,0.00914961600676179,0.010186100145801902,N/A
p3_find_n_smallest_number,prompt_4,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict.setdefault(n, []).append(i)\n    sorted_arr = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.extend(index_dict[sorted_arr[i]])\n    return k_smallest_indexes']",10000,0.1382406000047922,0.14233074299059809,0.15863560000434518,N/A
p3_find_n_smallest_number,prompt_4,45,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, n in enumerate(arg1):\n        index_dict.setdefault(n, []).append(i)\n    sorted_arr = sorted(arg1)\n    k_smallest_indexes = []\n    for i in range(arg2):\n        k_smallest_indexes.extend(index_dict[sorted_arr[i]])\n    return k_smallest_indexes']",100000,2.264359900029376,2.3182055210019463,2.3888515001162887,N/A
p3_find_n_smallest_number,prompt_4,46,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(sorted_indices)']",1000,0.0069951999466866255,0.007374122007749975,0.007760999957099557,N/A
p3_find_n_smallest_number,prompt_4,46,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(sorted_indices)']",10000,0.11073040007613599,0.11343360199360177,0.12335949996486306,N/A
p3_find_n_smallest_number,prompt_4,46,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return sorted(sorted_indices)']",100000,1.6104328001383692,1.6416609180020167,1.7357864999212325,N/A
p3_find_n_smallest_number,prompt_4,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n or arg2 == 0:\n        return []\n    dict1 = {}\n    for i in range(n):\n        dict1[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for j in range(arg2):\n        result.append(dict1[arg1[j]])\n    return result']",1000,0.002765699988231063,0.0030641679954715073,0.004878199892118573,N/A
p3_find_n_smallest_number,prompt_4,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n or arg2 == 0:\n        return []\n    dict1 = {}\n    for i in range(n):\n        dict1[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for j in range(arg2):\n        result.append(dict1[arg1[j]])\n    return result']",10000,0.027733399998396635,0.028881475990638138,0.031820699805393815,N/A
p3_find_n_smallest_number,prompt_4,47,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n or arg2 == 0:\n        return []\n    dict1 = {}\n    for i in range(n):\n        dict1[arg1[i]] = i\n    arg1.sort()\n    result = []\n    for j in range(arg2):\n        result.append(dict1[arg1[j]])\n    return result']",100000,0.6338043001014739,0.6676851929933764,0.7050185999833047,N/A
p3_find_n_smallest_number,prompt_4,48,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_index = partition(arr, l, r)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, l, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            indexes.append(i)\n            if len(indexes) == k:\n                break\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,48,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_index = partition(arr, l, r)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, l, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            indexes.append(i)\n            if len(indexes) == k:\n                break\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,48,"['def partition(arr, l, r):\n    pivot = arr[r]\n    i = l - 1\n    for j in range(l, r):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[r] = (arr[r], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, l, r, k):\n    if l == r:\n        return arr[l]\n    pivot_index = partition(arr, l, r)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, l, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, r, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] == kth_smallest:\n            indexes.append(i)\n            if len(indexes) == k:\n                break\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,49,"['from random import randint\n\ndef partition(arr, left, right):\n    pivot_index = randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[right] = (arr[right], arr[store_index])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",1000,0.007214399985969067,0.008053178996779025,0.009312600130215287,N/A
p3_find_n_smallest_number,prompt_4,49,"['from random import randint\n\ndef partition(arr, left, right):\n    pivot_index = randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[right] = (arr[right], arr[store_index])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",10000,0.0703366999514401,0.07866658298531547,0.09725749981589615,N/A
p3_find_n_smallest_number,prompt_4,49,"['from random import randint\n\ndef partition(arr, left, right):\n    pivot_index = randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    store_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[store_index] = (arr[store_index], arr[i])\n            store_index += 1\n    arr[store_index], arr[right] = (arr[right], arr[store_index])\n    return store_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            indexes.append(i)\n    return indexes']",100000,0.8723659999668598,0.9569109590002336,1.0552413000259548,N/A
p3_find_n_smallest_number,prompt_4,50,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [index for value, index in sorted(heap)]']",1000,0.009450900135561824,0.009845964005216956,0.011088799918070436,N/A
p3_find_n_smallest_number,prompt_4,50,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [index for value, index in sorted(heap)]']",10000,0.07038690010085702,0.07199030298739671,0.07418100000359118,N/A
p3_find_n_smallest_number,prompt_4,50,"['def funcImp(arg1, arg2):\n    import heapq\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [index for value, index in sorted(heap)]']",100000,1.1279263000469655,1.1449394490011036,1.2115704000461847,N/A
p3_find_n_smallest_number,prompt_4,51,"['def funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    result = [t[0] for t in sorted_list[:arg2]]\n    return result']",1000,0.00853120000101626,0.00878507299348712,0.009873100090771914,N/A
p3_find_n_smallest_number,prompt_4,51,"['def funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    result = [t[0] for t in sorted_list[:arg2]]\n    return result']",10000,0.13751389994286,0.14512341300724074,0.14999569999054074,N/A
p3_find_n_smallest_number,prompt_4,51,"['def funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    result = [t[0] for t in sorted_list[:arg2]]\n    return result']",100000,2.1430764999240637,2.208297455019783,2.3261080000083894,N/A
p3_find_n_smallest_number,prompt_4,52,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    k_smallest = list(sorted_dict.items())[:arg2]\n    k_smallest_sorted = sorted(k_smallest, key=lambda x: x[0])\n    indexes = [tup[0] for tup in k_smallest_sorted]\n    return indexes']",1000,0.013653600122779608,0.014474930001888424,0.020858400035649538,N/A
p3_find_n_smallest_number,prompt_4,52,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    k_smallest = list(sorted_dict.items())[:arg2]\n    k_smallest_sorted = sorted(k_smallest, key=lambda x: x[0])\n    indexes = [tup[0] for tup in k_smallest_sorted]\n    return indexes']",10000,0.21124039986170828,0.22339630499947816,0.23819539998658001,N/A
p3_find_n_smallest_number,prompt_4,52,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i, num in enumerate(arg1):\n        dict_nums[i] = num\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    k_smallest = list(sorted_dict.items())[:arg2]\n    k_smallest_sorted = sorted(k_smallest, key=lambda x: x[0])\n    indexes = [tup[0] for tup in k_smallest_sorted]\n    return indexes']",100000,4.058277900097892,4.181916246030014,4.389003599993885,N/A
p3_find_n_smallest_number,prompt_4,53,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.010047500021755695,0.010614391996059567,0.011747899930924177,N/A
p3_find_n_smallest_number,prompt_4,53,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.16026560007594526,0.16617587798973546,0.17446589982137084,N/A
p3_find_n_smallest_number,prompt_4,53,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[i] = arg1[i]\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    k_smallest_indexes = [sorted_dict[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.595897499937564,2.6926728329923937,2.824515499873087,N/A
p3_find_n_smallest_number,prompt_4,54,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(index_dict[num])\n    return indexes']",1000,0.005822600098326802,0.006059024001006037,0.007293700007721782,N/A
p3_find_n_smallest_number,prompt_4,54,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(index_dict[num])\n    return indexes']",10000,0.10775920003652573,0.10943323398940265,0.11579370009712875,N/A
p3_find_n_smallest_number,prompt_4,54,"['def funcImp(arg1, arg2):\n    index_dict = {val: i for i, val in enumerate(arg1)}\n    sorted_arr = sorted(arg1)\n    k_smallest = sorted_arr[:arg2]\n    indexes = []\n    for num in k_smallest:\n        indexes.append(index_dict[num])\n    return indexes']",100000,1.6465152001474053,1.6808196260081605,1.7479778998531401,N/A
p3_find_n_smallest_number,prompt_4,55,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes a list of integers ""arg1"" and an integer ""arg2"" as input,\n    and returns a list of the first ""arg2"" smallest elements in ""arg1"".\n    """"""\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n\n    def quicksort(arr, left, right, k):\n        if left <= right:\n            pivot_index = partition(arr, left, right)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda i: arr[i])\n            if pivot_index > k - 1:\n                return quicksort(arr, left, pivot_index - 1, k)\n            else:\n                return quicksort(arr, pivot_index + 1, right, k)\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,55,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes a list of integers ""arg1"" and an integer ""arg2"" as input,\n    and returns a list of the first ""arg2"" smallest elements in ""arg1"".\n    """"""\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n\n    def quicksort(arr, left, right, k):\n        if left <= right:\n            pivot_index = partition(arr, left, right)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda i: arr[i])\n            if pivot_index > k - 1:\n                return quicksort(arr, left, pivot_index - 1, k)\n            else:\n                return quicksort(arr, pivot_index + 1, right, k)\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,55,"['def funcImp(arg1, arg2):\n    """"""\n    This function takes a list of integers ""arg1"" and an integer ""arg2"" as input,\n    and returns a list of the first ""arg2"" smallest elements in ""arg1"".\n    """"""\n\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[right] = (arr[right], arr[i + 1])\n        return i + 1\n\n    def quicksort(arr, left, right, k):\n        if left <= right:\n            pivot_index = partition(arr, left, right)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda i: arr[i])\n            if pivot_index > k - 1:\n                return quicksort(arr, left, pivot_index - 1, k)\n            else:\n                return quicksort(arr, pivot_index + 1, right, k)\n    return quicksort(arg1, 0, len(arg1) - 1, arg2)']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [tup[1] for tup in sorted(heap)]']",1000,0.00341400015167892,0.0036059449915774168,0.0039963999297469854,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [tup[1] for tup in sorted(heap)]']",10000,0.032402200158685446,0.03374266898725182,0.03633520007133484,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [tup[1] for tup in sorted(heap)]']",100000,0.3262831000611186,0.3320689329947345,0.3492597001604736,N/A
p3_find_n_smallest_number,prompt_4,57,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: list of integers\n    :param arg2: integer - k value\n    :return: list of indexes of the k smallest numbers\n    """"""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heap.append((num, i))\n            if i == arg2 - 1:\n                heap = sorted(heap, reverse=True)\n        elif num < heap[0][0]:\n            heap[0] = (num, i)\n            heap = sorted(heap, reverse=True)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(heap[i][1])\n    return indexes']",1000,0.003248599823564291,0.003417435004375875,0.004137000069022179,N/A
p3_find_n_smallest_number,prompt_4,57,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: list of integers\n    :param arg2: integer - k value\n    :return: list of indexes of the k smallest numbers\n    """"""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heap.append((num, i))\n            if i == arg2 - 1:\n                heap = sorted(heap, reverse=True)\n        elif num < heap[0][0]:\n            heap[0] = (num, i)\n            heap = sorted(heap, reverse=True)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(heap[i][1])\n    return indexes']",10000,0.0305806000251323,0.03150633901823312,0.032892700051888824,N/A
p3_find_n_smallest_number,prompt_4,57,"['def funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in an unsorted array.\n    :param arg1: list of integers\n    :param arg2: integer - k value\n    :return: list of indexes of the k smallest numbers\n    """"""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heap.append((num, i))\n            if i == arg2 - 1:\n                heap = sorted(heap, reverse=True)\n        elif num < heap[0][0]:\n            heap[0] = (num, i)\n            heap = sorted(heap, reverse=True)\n    indexes = []\n    for i in range(arg2):\n        indexes.append(heap[i][1])\n    return indexes']",100000,0.30648350017145276,0.3124071120051667,0.32576019992120564,N/A
p3_find_n_smallest_number,prompt_4,58,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return index_list']",1000,0.0070222001522779465,0.007434728997759521,0.00869280006736517,N/A
p3_find_n_smallest_number,prompt_4,58,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return index_list']",10000,0.11391569999977946,0.11617691101972014,0.13161240005865693,N/A
p3_find_n_smallest_number,prompt_4,58,"['def funcImp(arg1, arg2):\n    n = len(arg1)\n    index_list = sorted(range(n), key=lambda i: arg1[i])[:arg2]\n    return index_list']",100000,1.61282779998146,1.6509051170013844,1.7259712000377476,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, n in enumerate(arg1):\n        if i < k:\n            heap.append((-n, i))\n            if i == k - 1:\n                heapq.heapify(heap)\n        elif n < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-n, i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",1000,0.003508599940687418,0.0037363080214709043,0.0038954000920057297,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, n in enumerate(arg1):\n        if i < k:\n            heap.append((-n, i))\n            if i == k - 1:\n                heapq.heapify(heap)\n        elif n < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-n, i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",10000,0.03481380012817681,0.03562468101037666,0.040252799866721034,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = []\n    for i, n in enumerate(arg1):\n        if i < k:\n            heap.append((-n, i))\n            if i == k - 1:\n                heapq.heapify(heap)\n        elif n < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-n, i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(k)]\n    return indexes']",100000,0.33958909986540675,0.3459208539943211,0.3700230000540614,N/A
p3_find_n_smallest_number,prompt_4,60,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heap = sorted(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heap[-1] = i\n            heap = sorted(heap)\n    indexes = [arg1.index(elem) for elem in heap]\n    return indexes']",1000,0.002455399837344885,0.0025061449944041667,0.002649199916049838,N/A
p3_find_n_smallest_number,prompt_4,60,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heap = sorted(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heap[-1] = i\n            heap = sorted(heap)\n    indexes = [arg1.index(elem) for elem in heap]\n    return indexes']",10000,0.026522800093516707,0.02722385501721874,0.030266699846833944,N/A
p3_find_n_smallest_number,prompt_4,60,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heap = sorted(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heap[-1] = i\n            heap = sorted(heap)\n    indexes = [arg1.index(elem) for elem in heap]\n    return indexes']",100000,0.3229892000090331,0.3369694110075943,0.3653229000046849,N/A
p3_find_n_smallest_number,prompt_4,61,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is greater than the length of array arg1'\n    dict1 = {}\n    for i in range(n):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda item: item[1])\n    smallest_k = sorted_dict[:arg2]\n    smallest_k_indices = [x[0] for x in smallest_k]\n    return smallest_k_indices""]",1000,0.010263500036671758,0.010623218019027263,0.011816499987617135,N/A
p3_find_n_smallest_number,prompt_4,61,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is greater than the length of array arg1'\n    dict1 = {}\n    for i in range(n):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda item: item[1])\n    smallest_k = sorted_dict[:arg2]\n    smallest_k_indices = [x[0] for x in smallest_k]\n    return smallest_k_indices""]",10000,0.1594851000700146,0.168531323003117,0.1912587999831885,N/A
p3_find_n_smallest_number,prompt_4,61,"[""def funcImp(arg1, arg2):\n    n = len(arg1)\n    if arg2 > n:\n        return 'Error: k is greater than the length of array arg1'\n    dict1 = {}\n    for i in range(n):\n        dict1[i] = arg1[i]\n    sorted_dict = sorted(dict1.items(), key=lambda item: item[1])\n    smallest_k = sorted_dict[:arg2]\n    smallest_k_indices = [x[0] for x in smallest_k]\n    return smallest_k_indices""]",100000,2.6363973000552505,2.694292984986678,2.7942920001223683,N/A
p3_find_n_smallest_number,prompt_4,62,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    return [arg1.index(sorted_arr[i]) for i in range(arg2)]']",1000,0.0033672000281512737,0.003518503999803215,0.0038920999504625797,N/A
p3_find_n_smallest_number,prompt_4,62,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    return [arg1.index(sorted_arr[i]) for i in range(arg2)]']",10000,0.08432960021309555,0.0863994170143269,0.0922250000294298,N/A
p3_find_n_smallest_number,prompt_4,62,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    return [arg1.index(sorted_arr[i]) for i in range(arg2)]']",100000,1.2124179999809712,1.232342474986799,1.2713518999516964,N/A
p3_find_n_smallest_number,prompt_4,63,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(num_dict[num])\n    return sorted(result)[:arg2]']",1000,0.00644939998164773,0.0067195659992285075,0.008128900080919266,N/A
p3_find_n_smallest_number,prompt_4,63,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(num_dict[num])\n    return sorted(result)[:arg2]']",10000,0.07562900008633733,0.07790656100492925,0.08522809995338321,N/A
p3_find_n_smallest_number,prompt_4,63,"['def funcImp(arg1, arg2):\n    num_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in num_dict:\n            num_dict[num] = [i]\n        else:\n            num_dict[num].append(i)\n    unique_nums = sorted(list(set(arg1)))\n    result = []\n    for num in unique_nums[:arg2]:\n        result.extend(num_dict[num])\n    return sorted(result)[:arg2]']",100000,1.7200684000272304,1.7594746649963782,1.8215240000281483,N/A
p3_find_n_smallest_number,prompt_4,64,"['def funcImp(arg1, arg2):\n\n    def select(arr, k):\n        if len(arr) == 1:\n            return 0\n        pivot = arr[-1]\n        i, j = (0, len(arr) - 1)\n        while i < j:\n            if arr[i] < pivot:\n                i += 1\n            else:\n                arr[i], arr[j - 1], arr[j] = (arr[j - 1], arr[j], arr[i])\n                j -= 1\n        if arr[j] > pivot:\n            j -= 1\n        arr[j], arr[-1] = (arr[-1], arr[j])\n        if k == j:\n            return j\n        elif k < j:\n            return select(arr[:j], k)\n        else:\n            return j + 1 + select(arr[j + 1:], k - j - 1)\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",1000,0.008490300038829446,0.00883963299682364,0.014943599933758378,N/A
p3_find_n_smallest_number,prompt_4,64,"['def funcImp(arg1, arg2):\n\n    def select(arr, k):\n        if len(arr) == 1:\n            return 0\n        pivot = arr[-1]\n        i, j = (0, len(arr) - 1)\n        while i < j:\n            if arr[i] < pivot:\n                i += 1\n            else:\n                arr[i], arr[j - 1], arr[j] = (arr[j - 1], arr[j], arr[i])\n                j -= 1\n        if arr[j] > pivot:\n            j -= 1\n        arr[j], arr[-1] = (arr[-1], arr[j])\n        if k == j:\n            return j\n        elif k < j:\n            return select(arr[:j], k)\n        else:\n            return j + 1 + select(arr[j + 1:], k - j - 1)\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",10000,0.13784590014256537,0.14288433100562542,0.1500438000075519,N/A
p3_find_n_smallest_number,prompt_4,64,"['def funcImp(arg1, arg2):\n\n    def select(arr, k):\n        if len(arr) == 1:\n            return 0\n        pivot = arr[-1]\n        i, j = (0, len(arr) - 1)\n        while i < j:\n            if arr[i] < pivot:\n                i += 1\n            else:\n                arr[i], arr[j - 1], arr[j] = (arr[j - 1], arr[j], arr[i])\n                j -= 1\n        if arr[j] > pivot:\n            j -= 1\n        arr[j], arr[-1] = (arr[-1], arr[j])\n        if k == j:\n            return j\n        elif k < j:\n            return select(arr[:j], k)\n        else:\n            return j + 1 + select(arr[j + 1:], k - j - 1)\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",100000,2.1117767998948693,2.153263388008345,2.237934999866411,N/A
p3_find_n_smallest_number,prompt_4,65,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, x in enumerate(arg1):\n        index_dict[i] = x\n    sorted_dict = sorted(index_dict.items(), key=lambda item: item[1])\n    result = [(i, val) for i, val in sorted_dict[:arg2]]\n    result = sorted(result, key=lambda item: item[0])\n    return result']",1000,0.010350900003686547,0.010865086996927857,0.013113499851897359,N/A
p3_find_n_smallest_number,prompt_4,65,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, x in enumerate(arg1):\n        index_dict[i] = x\n    sorted_dict = sorted(index_dict.items(), key=lambda item: item[1])\n    result = [(i, val) for i, val in sorted_dict[:arg2]]\n    result = sorted(result, key=lambda item: item[0])\n    return result']",10000,0.16022420022636652,0.1696453140093945,0.17710620001889765,N/A
p3_find_n_smallest_number,prompt_4,65,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, x in enumerate(arg1):\n        index_dict[i] = x\n    sorted_dict = sorted(index_dict.items(), key=lambda item: item[1])\n    result = [(i, val) for i, val in sorted_dict[:arg2]]\n    result = sorted(result, key=lambda item: item[0])\n    return result']",100000,2.6702632000669837,2.720883921990171,2.7958440999500453,N/A
p3_find_n_smallest_number,prompt_4,66,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(indices.keys())\n    smallest_indices = []\n    for num in sorted_nums:\n        smallest_indices += indices[num]\n        if len(smallest_indices) >= arg2:\n            break\n    return smallest_indices[:arg2]']",1000,0.008542699972167611,0.00901282899081707,0.011581699829548597,N/A
p3_find_n_smallest_number,prompt_4,66,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(indices.keys())\n    smallest_indices = []\n    for num in sorted_nums:\n        smallest_indices += indices[num]\n        if len(smallest_indices) >= arg2:\n            break\n    return smallest_indices[:arg2]']",10000,0.13740119989961386,0.14034262199886144,0.14710130007006228,N/A
p3_find_n_smallest_number,prompt_4,66,"['def funcImp(arg1, arg2):\n    indices = {}\n    for i, num in enumerate(arg1):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n    sorted_nums = sorted(indices.keys())\n    smallest_indices = []\n    for num in sorted_nums:\n        smallest_indices += indices[num]\n        if len(smallest_indices) >= arg2:\n            break\n    return smallest_indices[:arg2]']",100000,2.2001116001047194,2.2499355749972163,2.2960887998342514,N/A
p3_find_n_smallest_number,prompt_4,67,"['def funcImp(arg1, arg2):\n    index_dict = dict(zip(range(len(arg1)), arg1))\n    k_smallest = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in k_smallest])']",1000,0.009277099976316094,0.009693579990416765,0.01041140011511743,N/A
p3_find_n_smallest_number,prompt_4,67,"['def funcImp(arg1, arg2):\n    index_dict = dict(zip(range(len(arg1)), arg1))\n    k_smallest = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in k_smallest])']",10000,0.14919609995558858,0.15763927198946476,0.16898189997300506,N/A
p3_find_n_smallest_number,prompt_4,67,"['def funcImp(arg1, arg2):\n    index_dict = dict(zip(range(len(arg1)), arg1))\n    k_smallest = sorted(index_dict.items(), key=lambda x: x[1])[:arg2]\n    return sorted([pair[0] for pair in k_smallest])']",100000,2.4614132000133395,2.539729834005702,2.6954888999462128,N/A
p3_find_n_smallest_number,prompt_4,68,"['def funcImp(arg1, arg2):\n    indices = []\n    for i, num in enumerate(arg1):\n        if len(indices) < arg2:\n            indices.append(i)\n        else:\n            largest_index = indices[arg2 - 1]\n            if num < arg1[largest_index]:\n                indices[arg2 - 1] = i\n                for j in reversed(range(arg2 - 1)):\n                    if arg1[indices[j + 1]] < arg1[indices[j]]:\n                        indices[j], indices[j + 1] = (indices[j + 1], indices[j])\n                    else:\n                        break\n    return indices']",1000,0.004810099955648184,0.005057107985485345,0.005517400102689862,N/A
p3_find_n_smallest_number,prompt_4,68,"['def funcImp(arg1, arg2):\n    indices = []\n    for i, num in enumerate(arg1):\n        if len(indices) < arg2:\n            indices.append(i)\n        else:\n            largest_index = indices[arg2 - 1]\n            if num < arg1[largest_index]:\n                indices[arg2 - 1] = i\n                for j in reversed(range(arg2 - 1)):\n                    if arg1[indices[j + 1]] < arg1[indices[j]]:\n                        indices[j], indices[j + 1] = (indices[j + 1], indices[j])\n                    else:\n                        break\n    return indices']",10000,0.04348629992455244,0.045429357995744796,0.051139699993655086,N/A
p3_find_n_smallest_number,prompt_4,68,"['def funcImp(arg1, arg2):\n    indices = []\n    for i, num in enumerate(arg1):\n        if len(indices) < arg2:\n            indices.append(i)\n        else:\n            largest_index = indices[arg2 - 1]\n            if num < arg1[largest_index]:\n                indices[arg2 - 1] = i\n                for j in reversed(range(arg2 - 1)):\n                    if arg1[indices[j + 1]] < arg1[indices[j]]:\n                        indices[j], indices[j + 1] = (indices[j + 1], indices[j])\n                    else:\n                        break\n    return indices']",100000,0.43640220002271235,0.44710019499994813,0.47586370003409684,N/A
p3_find_n_smallest_number,prompt_4,69,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[i] = num\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    index_list = [i for i, v in sorted_dict]\n    return index_list']",1000,0.010067599825561047,0.010679223996121437,0.013404199853539467,N/A
p3_find_n_smallest_number,prompt_4,69,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[i] = num\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    index_list = [i for i, v in sorted_dict]\n    return index_list']",10000,0.15695129986852407,0.16697727001504972,0.17960819997824728,N/A
p3_find_n_smallest_number,prompt_4,69,"['def funcImp(arg1, arg2):\n    k = int(arg2)\n    index_dict = dict()\n    for i, num in enumerate(arg1):\n        index_dict[i] = num\n    sorted_dict = sorted(index_dict.items(), key=lambda x: x[1])[:k]\n    index_list = [i for i, v in sorted_dict]\n    return index_list']",100000,2.617583000101149,2.708983496008441,2.8206674000248313,N/A
p3_find_n_smallest_number,prompt_4,70,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    idx = []\n    if k > len(arg1):\n        return idx\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest:\n            idx.append(i)\n    return idx[:k]']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,70,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    idx = []\n    if k > len(arg1):\n        return idx\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest:\n            idx.append(i)\n    return idx[:k]']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,70,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    idx = []\n    if k > len(arg1):\n        return idx\n    kth_smallest = quickselect(arg1, 0, len(arg1) - 1, k - 1)\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest:\n            idx.append(i)\n    return idx[:k]']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_arr = list(range(len(arg1)))\n    index_arr.sort(key=lambda x: arg1[x])\n    return index_arr[:k]']",1000,0.006995300063863397,0.007416942010167986,0.009620300028473139,N/A
p3_find_n_smallest_number,prompt_4,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_arr = list(range(len(arg1)))\n    index_arr.sort(key=lambda x: arg1[x])\n    return index_arr[:k]']",10000,0.11142429988831282,0.11576317899394781,0.12485040002502501,N/A
p3_find_n_smallest_number,prompt_4,71,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_arr = list(range(len(arg1)))\n    index_arr.sort(key=lambda x: arg1[x])\n    return index_arr[:k]']",100000,1.60220060008578,1.645538592999801,1.7911404001060873,N/A
p3_find_n_smallest_number,prompt_4,72,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[arg2 - 1]\n    k_smallest_indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",1000,0.0033611999824643135,0.003609851992223412,0.003917499911040068,N/A
p3_find_n_smallest_number,prompt_4,72,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[arg2 - 1]\n    k_smallest_indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",10000,0.08648600010201335,0.08947360001504422,0.09391549997963011,N/A
p3_find_n_smallest_number,prompt_4,72,"['def funcImp(arg1, arg2):\n    kth_smallest = sorted(arg1)[arg2 - 1]\n    k_smallest_indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] <= kth_smallest:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",100000,1.2185162000823766,1.2552361240098253,1.2852630000561476,N/A
p3_find_n_smallest_number,prompt_4,73,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",1000,0.03393849986605346,0.035306287002749744,0.03902100003324449,N/A
p3_find_n_smallest_number,prompt_4,73,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",10000,0.42396720009855926,0.43266189200105143,0.4477300001308322,N/A
p3_find_n_smallest_number,prompt_4,73,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k < len(lows):\n            return quickselect(lows, k)\n        elif k < len(lows) + len(pivots):\n            return pivots[0]\n        else:\n            return quickselect(highs, k - len(lows) - len(pivots))\n    k_smallest = [quickselect(arg1, i) for i in range(arg2)]\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",100000,5.087475399952382,5.155329373988788,5.411497300025076,N/A
p3_find_n_smallest_number,prompt_4,74,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_array:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",1000,0.008383899927139282,0.008981657000258565,0.010929899988695979,N/A
p3_find_n_smallest_number,prompt_4,74,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_array:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",10000,0.1360769998282194,0.14087611299008132,0.155556800076738,N/A
p3_find_n_smallest_number,prompt_4,74,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        if arg1[i] in index_dict:\n            index_dict[arg1[i]].append(i)\n        else:\n            index_dict[arg1[i]] = [i]\n    sorted_array = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_array:\n        result.extend(index_dict[num][:arg2 - len(result)])\n        if len(result) == arg2:\n            break\n    return result']",100000,2.189174799947068,2.2413694849982857,2.3064645000267774,N/A
p3_find_n_smallest_number,prompt_4,75,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Value of k cannot be greater than length of the array'\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",1000,0.006002799840644002,0.006371178987901658,0.007615499896928668,N/A
p3_find_n_smallest_number,prompt_4,75,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Value of k cannot be greater than length of the array'\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",10000,0.10840849997475743,0.11111732500372455,0.11836840002797544,N/A
p3_find_n_smallest_number,prompt_4,75,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Value of k cannot be greater than length of the array'\n    k_smallest = sorted(arg1)[:arg2]\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",100000,1.4200128999073058,1.4470027599972672,1.502931599970907,N/A
p3_find_n_smallest_number,prompt_4,76,"[""import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    swap_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[swap_index] = (arr[swap_index], arr[i])\n            swap_index += 1\n    arr[right], arr[swap_index] = (arr[swap_index], arr[right])\n    return swap_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return 'Error: k is larger than the length of the array.'\n    elif k == len(arr):\n        return list(range(len(arr)))\n    result = []\n    for i in range(k):\n        index = quickselect(arr, 0, len(arr) - 1, i)\n        result.append(index)\n    return sorted(result)""]",1000,0.029160700039938092,0.03203100400278345,0.04215570003725588,N/A
p3_find_n_smallest_number,prompt_4,76,"[""import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    swap_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[swap_index] = (arr[swap_index], arr[i])\n            swap_index += 1\n    arr[right], arr[swap_index] = (arr[swap_index], arr[right])\n    return swap_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return 'Error: k is larger than the length of the array.'\n    elif k == len(arr):\n        return list(range(len(arr)))\n    result = []\n    for i in range(k):\n        index = quickselect(arr, 0, len(arr) - 1, i)\n        result.append(index)\n    return sorted(result)""]",10000,0.2898490000516176,0.3129644190031104,0.3436888998840004,N/A
p3_find_n_smallest_number,prompt_4,76,"[""import random\n\ndef partition(arr, left, right):\n    pivot_index = random.randint(left, right)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = (arr[right], arr[pivot_index])\n    swap_index = left\n    for i in range(left, right):\n        if arr[i] < pivot:\n            arr[i], arr[swap_index] = (arr[swap_index], arr[i])\n            swap_index += 1\n    arr[right], arr[swap_index] = (arr[swap_index], arr[right])\n    return swap_index\n\ndef quickselect(arr, left, right, k):\n    if left == right:\n        return arr[left]\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, left, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, right, k)\n\ndef funcImp(arr, k):\n    if k > len(arr):\n        return 'Error: k is larger than the length of the array.'\n    elif k == len(arr):\n        return list(range(len(arr)))\n    result = []\n    for i in range(k):\n        index = quickselect(arr, 0, len(arr) - 1, i)\n        result.append(index)\n    return sorted(result)""]",100000,3.579698999878019,3.7920767099852672,4.01367780007422,N/A
p3_find_n_smallest_number,prompt_4,77,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    sorted_nums = sorted(set(arg1))\n    indexes = []\n    for num in sorted_nums[:arg2]:\n        indexes.extend(index_dict[num][:arg2 - len(indexes)])\n    return indexes']",1000,0.006310499971732497,0.006684221005998552,0.009626499842852354,N/A
p3_find_n_smallest_number,prompt_4,77,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    sorted_nums = sorted(set(arg1))\n    indexes = []\n    for num in sorted_nums[:arg2]:\n        indexes.extend(index_dict[num][:arg2 - len(indexes)])\n    return indexes']",10000,0.07382509997114539,0.0762801010068506,0.0789964001160115,N/A
p3_find_n_smallest_number,prompt_4,77,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n    sorted_nums = sorted(set(arg1))\n    indexes = []\n    for num in sorted_nums[:arg2]:\n        indexes.extend(index_dict[num][:arg2 - len(indexes)])\n    return indexes']",100000,1.5738707000855356,1.6266173680010252,1.6740779001265764,N/A
p3_find_n_smallest_number,prompt_4,78,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while True:\n        pivotIndex = partition(arr, low, high)\n        if pivotIndex == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivotIndex > k - 1:\n            high = pivotIndex - 1\n        else:\n            low = pivotIndex + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",1000,2.033749300055206,2.1570039449981415,2.2213447000831366,N/A
p3_find_n_smallest_number,prompt_4,78,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while True:\n        pivotIndex = partition(arr, low, high)\n        if pivotIndex == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivotIndex > k - 1:\n            high = pivotIndex - 1\n        else:\n            low = pivotIndex + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_4,78,"['def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef k_smallest(arr, k):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while True:\n        pivotIndex = partition(arr, low, high)\n        if pivotIndex == k - 1:\n            return sorted(range(len(arr)), key=lambda i: arr[i])[:k]\n        elif pivotIndex > k - 1:\n            high = pivotIndex - 1\n        else:\n            low = pivotIndex + 1\n\ndef funcImp(arg1, arg2):\n    return k_smallest(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_4,79,"['def funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,79,"['def funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,79,"['def funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    indexes = []\n    for num in heap:\n        index = arg1.index(num)\n        indexes.append(index)\n    return indexes']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in heap:\n        result[arg1.index(i)] = i\n    return result""]",1000,0.006074599921703339,0.006237031994387508,0.006650600116699934,N/A
p3_find_n_smallest_number,prompt_4,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in heap:\n        result[arg1.index(i)] = i\n    return result""]",10000,0.06604399997740984,0.06752352400217206,0.0742865998763591,N/A
p3_find_n_smallest_number,prompt_4,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input'\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    result = {}\n    for i in heap:\n        result[arg1.index(i)] = i\n    return result""]",100000,0.6392103000544012,0.6490344489971176,0.6765912000555545,N/A
p3_find_n_smallest_number,prompt_4,81,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",1000,0.003251400077715516,0.0035197689896449445,0.0049450998194515705,N/A
p3_find_n_smallest_number,prompt_4,81,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",10000,0.08486899989657104,0.08644936098251492,0.09829719993285835,N/A
p3_find_n_smallest_number,prompt_4,81,"['def funcImp(arg1, arg2):\n    k_smallest = sorted(arg1)[:arg2]\n    result = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",100000,1.210802000015974,1.2297498589963651,1.2584361999761313,N/A
p3_find_n_smallest_number,prompt_4,82,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",1000,0.005689600016921759,0.006052885986864567,0.00666579999960959,N/A
p3_find_n_smallest_number,prompt_4,82,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",10000,0.10681209992617369,0.10893095400184392,0.11568660009652376,N/A
p3_find_n_smallest_number,prompt_4,82,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i in range(len(arg1)):\n        index_dict[arg1[i]] = i\n    arg1 = sorted(arg1)\n    result = []\n    for i in range(arg2):\n        result.append(index_dict[arg1[i]])\n    return result']",100000,1.6291579001117498,1.6658859079959802,1.7090421998873353,N/A
p3_find_n_smallest_number,prompt_4,83,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return low\n    pivot_idx = partition(arr, low, high)\n    if k == pivot_idx:\n        return pivot_idx\n    elif k < pivot_idx:\n        return quickselect(arr, low, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    k_smallest = []\n    for i in range(k):\n        idx = quickselect(arg1, i, len(arg1) - 1, i)\n        k_smallest.append(idx)\n    return k_smallest']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,83,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return low\n    pivot_idx = partition(arr, low, high)\n    if k == pivot_idx:\n        return pivot_idx\n    elif k < pivot_idx:\n        return quickselect(arr, low, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    k_smallest = []\n    for i in range(k):\n        idx = quickselect(arg1, i, len(arg1) - 1, i)\n        k_smallest.append(idx)\n    return k_smallest']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,83,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return low\n    pivot_idx = partition(arr, low, high)\n    if k == pivot_idx:\n        return pivot_idx\n    elif k < pivot_idx:\n        return quickselect(arr, low, pivot_idx - 1, k)\n    else:\n        return quickselect(arr, pivot_idx + 1, high, k)\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    k_smallest = []\n    for i in range(k):\n        idx = quickselect(arg1, i, len(arg1) - 1, i)\n        k_smallest.append(idx)\n    return k_smallest']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_4,84,"['import random\n\ndef partition(lst, pivot):\n    lst1, lst2, lst3 = ([], [], [])\n    for elem in lst:\n        if elem < pivot:\n            lst1.append(elem)\n        elif elem == pivot:\n            lst2.append(elem)\n        else:\n            lst3.append(elem)\n    return (lst1, lst2, lst3)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    lst1, lst2, lst3 = partition(lst, pivot)\n    if len(lst1) >= k:\n        return quickselect(lst1, k)\n    elif len(lst1) + len(lst2) >= k:\n        return pivot\n    else:\n        return quickselect(lst3, k - len(lst1) - len(lst2))\n\ndef funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(arg2):\n        kth_smallest = quickselect(arg1, i + 1)\n        k_smallest.append(arg1.index(kth_smallest))\n    return sorted(k_smallest)']",1000,0.02807780005969107,0.029691535998135805,0.03896080004051328,N/A
p3_find_n_smallest_number,prompt_4,84,"['import random\n\ndef partition(lst, pivot):\n    lst1, lst2, lst3 = ([], [], [])\n    for elem in lst:\n        if elem < pivot:\n            lst1.append(elem)\n        elif elem == pivot:\n            lst2.append(elem)\n        else:\n            lst3.append(elem)\n    return (lst1, lst2, lst3)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    lst1, lst2, lst3 = partition(lst, pivot)\n    if len(lst1) >= k:\n        return quickselect(lst1, k)\n    elif len(lst1) + len(lst2) >= k:\n        return pivot\n    else:\n        return quickselect(lst3, k - len(lst1) - len(lst2))\n\ndef funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(arg2):\n        kth_smallest = quickselect(arg1, i + 1)\n        k_smallest.append(arg1.index(kth_smallest))\n    return sorted(k_smallest)']",10000,0.2559307001065463,0.2640596160013229,0.2940980000421405,N/A
p3_find_n_smallest_number,prompt_4,84,"['import random\n\ndef partition(lst, pivot):\n    lst1, lst2, lst3 = ([], [], [])\n    for elem in lst:\n        if elem < pivot:\n            lst1.append(elem)\n        elif elem == pivot:\n            lst2.append(elem)\n        else:\n            lst3.append(elem)\n    return (lst1, lst2, lst3)\n\ndef quickselect(lst, k):\n    pivot = random.choice(lst)\n    lst1, lst2, lst3 = partition(lst, pivot)\n    if len(lst1) >= k:\n        return quickselect(lst1, k)\n    elif len(lst1) + len(lst2) >= k:\n        return pivot\n    else:\n        return quickselect(lst3, k - len(lst1) - len(lst2))\n\ndef funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(arg2):\n        kth_smallest = quickselect(arg1, i + 1)\n        k_smallest.append(arg1.index(kth_smallest))\n    return sorted(k_smallest)']",100000,2.7368080001324415,2.8524220669898206,2.9989907001145184,N/A
p3_find_n_smallest_number,prompt_4,85,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:k]']",1000,0.007096300134435296,0.007452602982521057,0.008001700043678284,N/A
p3_find_n_smallest_number,prompt_4,85,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:k]']",10000,0.11216599983163178,0.11432999399956316,0.12708200002089143,N/A
p3_find_n_smallest_number,prompt_4,85,"['def funcImp(arg1, k):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return indices[:k]']",100000,1.6087933001108468,1.6396725580003113,1.6838126999791712,N/A
p3_find_n_smallest_number,prompt_4,86,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    smallest_k = sorted(heap)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",1000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,86,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    smallest_k = sorted(heap)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",10000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,86,"['def funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n    smallest_k = sorted(heap)\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in smallest_k:\n            indexes.append(i)\n    return indexes']",100000,0,0,0,	 exception: name 'heapq' is not defined
p3_find_n_smallest_number,prompt_4,87,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_val = float('inf')\n        min_index = -1\n        for j in range(len(arg1)):\n            if arg1[j] < min_val and j not in indices:\n                min_val = arg1[j]\n                min_index = j\n        indices.append(min_index)\n    return indices""]",1000,0.007861000020056963,0.008229120997712017,0.009848800022155046,N/A
p3_find_n_smallest_number,prompt_4,87,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_val = float('inf')\n        min_index = -1\n        for j in range(len(arg1)):\n            if arg1[j] < min_val and j not in indices:\n                min_val = arg1[j]\n                min_index = j\n        indices.append(min_index)\n    return indices""]",10000,0.07963709998875856,0.081598911001347,0.0853075000923127,N/A
p3_find_n_smallest_number,prompt_4,87,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indices = []\n    for i in range(k):\n        min_val = float('inf')\n        min_index = -1\n        for j in range(len(arg1)):\n            if arg1[j] < min_val and j not in indices:\n                min_val = arg1[j]\n                min_index = j\n        indices.append(min_index)\n    return indices""]",100000,0.8237071000039577,0.8368651700089685,0.888033099938184,N/A
p3_find_n_smallest_number,prompt_4,88,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if n <= k:\n        return list(range(n))\n    index_list = list(range(k))\n    for i in range(k, n):\n        max_index = max(range(k), key=lambda j: arg1[index_list[j]])\n        if arg1[i] < arg1[index_list[max_index]]:\n            index_list[max_index] = i\n    return sorted(index_list)']",1000,0.041709700133651495,0.04293838399695232,0.048150100046768785,N/A
p3_find_n_smallest_number,prompt_4,88,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if n <= k:\n        return list(range(n))\n    index_list = list(range(k))\n    for i in range(k, n):\n        max_index = max(range(k), key=lambda j: arg1[index_list[j]])\n        if arg1[i] < arg1[index_list[max_index]]:\n            index_list[max_index] = i\n    return sorted(index_list)']",10000,0.4190738000907004,0.4260672420077026,0.44286309997551143,N/A
p3_find_n_smallest_number,prompt_4,88,"['def funcImp(arg1, k):\n    if k <= 0:\n        return []\n    n = len(arg1)\n    if n <= k:\n        return list(range(n))\n    index_list = list(range(k))\n    for i in range(k, n):\n        max_index = max(range(k), key=lambda j: arg1[index_list[j]])\n        if arg1[i] < arg1[index_list[max_index]]:\n            index_list[max_index] = i\n    return sorted(index_list)']",100000,4.167034299811348,4.220541935986839,4.2721559999044985,N/A
p3_find_n_smallest_number,prompt_4,89,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_list = sorted(range(len(arg1)), key=lambda x: arg1[x])[:k]\n    return index_list']",1000,0.007140500005334616,0.007480582990683615,0.008981799939647317,N/A
p3_find_n_smallest_number,prompt_4,89,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_list = sorted(range(len(arg1)), key=lambda x: arg1[x])[:k]\n    return index_list']",10000,0.11132829985581338,0.1139058159920387,0.12269379990175366,N/A
p3_find_n_smallest_number,prompt_4,89,"['def funcImp(arg1, arg2):\n    k = arg2\n    index_list = sorted(range(len(arg1)), key=lambda x: arg1[x])[:k]\n    return index_list']",100000,1.6089832000434399,1.6373005990078673,1.6956040998920798,N/A
p3_find_n_smallest_number,prompt_4,90,"['def funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            k_smallest.append((arg1[i], i))\n        elif arg1[i] < k_smallest[arg2 - 1][0]:\n            k_smallest[arg2 - 1] = (arg1[i], i)\n        k_smallest.sort()\n    return [i[1] for i in k_smallest[:arg2]]']",1000,0.0072206000331789255,0.007518944013863802,0.007918300107121468,N/A
p3_find_n_smallest_number,prompt_4,90,"['def funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            k_smallest.append((arg1[i], i))\n        elif arg1[i] < k_smallest[arg2 - 1][0]:\n            k_smallest[arg2 - 1] = (arg1[i], i)\n        k_smallest.sort()\n    return [i[1] for i in k_smallest[:arg2]]']",10000,0.07293889997527003,0.07484964500181376,0.081721399910748,N/A
p3_find_n_smallest_number,prompt_4,90,"['def funcImp(arg1, arg2):\n    k_smallest = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            k_smallest.append((arg1[i], i))\n        elif arg1[i] < k_smallest[arg2 - 1][0]:\n            k_smallest[arg2 - 1] = (arg1[i], i)\n        k_smallest.sort()\n    return [i[1] for i in k_smallest[:arg2]]']",100000,0.7372868999373168,0.7515049239899964,0.790317399892956,N/A
p3_find_n_smallest_number,prompt_4,91,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",1000,0.007091899868100882,0.007544705003965646,0.009251800132915378,N/A
p3_find_n_smallest_number,prompt_4,91,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",10000,0.11114309984259307,0.11445707099279388,0.12563869985751808,N/A
p3_find_n_smallest_number,prompt_4,91,"['def funcImp(arg1, arg2):\n    indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]\n    return indices']",100000,1.6131716999225318,1.6481718459865078,1.7120916999410838,N/A
p3_find_n_smallest_number,prompt_4,92,"['def funcImp(arg1, arg2):\n    indices = dict()\n    for i, x in enumerate(arg1):\n        indices[x] = i\n    k_smallest_indexes = []\n    for x in sorted(arg1)[:arg2]:\n        k_smallest_indexes.append(indices[x])\n    return k_smallest_indexes']",1000,0.00593110010959208,0.0062128009903244675,0.009143700124695897,N/A
p3_find_n_smallest_number,prompt_4,92,"['def funcImp(arg1, arg2):\n    indices = dict()\n    for i, x in enumerate(arg1):\n        indices[x] = i\n    k_smallest_indexes = []\n    for x in sorted(arg1)[:arg2]:\n        k_smallest_indexes.append(indices[x])\n    return k_smallest_indexes']",10000,0.10889599984511733,0.11086511100875214,0.11728799995034933,N/A
p3_find_n_smallest_number,prompt_4,92,"['def funcImp(arg1, arg2):\n    indices = dict()\n    for i, x in enumerate(arg1):\n        indices[x] = i\n    k_smallest_indexes = []\n    for x in sorted(arg1)[:arg2]:\n        k_smallest_indexes.append(indices[x])\n    return k_smallest_indexes']",100000,1.643611100036651,1.7203292760020121,1.7886594999581575,N/A
p3_find_n_smallest_number,prompt_4,93,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i in range(len(arg1)):\n        dict_nums[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    smallest_indexes = list(sorted_dict.keys())[:arg2]\n    return smallest_indexes']",1000,0.01279069995507598,0.013561257012188434,0.018159300088882446,N/A
p3_find_n_smallest_number,prompt_4,93,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i in range(len(arg1)):\n        dict_nums[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    smallest_indexes = list(sorted_dict.keys())[:arg2]\n    return smallest_indexes']",10000,0.19357519992627203,0.21221062400611118,0.2440496999770403,N/A
p3_find_n_smallest_number,prompt_4,93,"['def funcImp(arg1, arg2):\n    dict_nums = {}\n    for i in range(len(arg1)):\n        dict_nums[i] = arg1[i]\n    sorted_dict = {k: v for k, v in sorted(dict_nums.items(), key=lambda item: item[1])}\n    smallest_indexes = list(sorted_dict.keys())[:arg2]\n    return smallest_indexes']",100000,3.8878379999659956,3.9617516970052384,4.105900000082329,N/A
p3_find_n_smallest_number,prompt_4,94,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    n = len(arg1)\n    if k > n:\n        return 'Error: k is greater than the length of the array!'\n    indices = range(n)\n    arg1_with_indices = list(zip(arg1, indices))\n    arg1_with_indices.sort()\n    for i in range(k):\n        indexes.append(arg1_with_indices[i][1])\n    return indexes""]",1000,0.010514500085264444,0.010974181992933154,0.012567699886858463,N/A
p3_find_n_smallest_number,prompt_4,94,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    n = len(arg1)\n    if k > n:\n        return 'Error: k is greater than the length of the array!'\n    indices = range(n)\n    arg1_with_indices = list(zip(arg1, indices))\n    arg1_with_indices.sort()\n    for i in range(k):\n        indexes.append(arg1_with_indices[i][1])\n    return indexes""]",10000,0.16552969999611378,0.1714268320193514,0.1808734000660479,N/A
p3_find_n_smallest_number,prompt_4,94,"[""def funcImp(arg1, arg2):\n    k = arg2\n    indexes = []\n    n = len(arg1)\n    if k > n:\n        return 'Error: k is greater than the length of the array!'\n    indices = range(n)\n    arg1_with_indices = list(zip(arg1, indices))\n    arg1_with_indices.sort()\n    for i in range(k):\n        indexes.append(arg1_with_indices[i][1])\n    return indexes""]",100000,2.7216336999554187,2.785143735986203,2.9350020999554545,N/A
p3_find_n_smallest_number,prompt_4,95,"[""def funcImp(arr, k):\n    idxList = []\n    kSmallest = sorted(arr)[:k]\n    for num in kSmallest:\n        idx = arr.index(num)\n        idxList.append(idx)\n        arr[idx] = float('inf')\n    return idxList""]",1000,0.00033810012973845005,0.0005243379948660731,0.010030800011008978,N/A
p3_find_n_smallest_number,prompt_4,95,"[""def funcImp(arr, k):\n    idxList = []\n    kSmallest = sorted(arr)[:k]\n    for num in kSmallest:\n        idx = arr.index(num)\n        idxList.append(idx)\n        arr[idx] = float('inf')\n    return idxList""]",10000,0.0030841000843793154,0.024884791001677512,0.14166289987042546,N/A
p3_find_n_smallest_number,prompt_4,95,"[""def funcImp(arr, k):\n    idxList = []\n    kSmallest = sorted(arr)[:k]\n    for num in kSmallest:\n        idx = arr.index(num)\n        idxList.append(idx)\n        arr[idx] = float('inf')\n    return idxList""]",100000,1.6176704000681639,1.7597734099905937,1.842816999880597,N/A
p3_find_n_smallest_number,prompt_4,96,"['def funcImp(arg1, arg2):\n    indices = list(range(arg2))\n    indices.sort(key=lambda i: arg1[i])\n    for i in range(arg2, len(arg1)):\n        val = arg1[i]\n        if val < arg1[indices[-1]]:\n            pos = arg2 - 1\n            while pos > 0 and val < arg1[indices[pos - 1]]:\n                pos -= 1\n            for j in range(arg2 - 1, pos, -1):\n                indices[j] = indices[j - 1]\n            indices[pos] = i\n    return sorted(indices)']",1000,0.0032871998846530914,0.003423057997133583,0.00410750019364059,N/A
p3_find_n_smallest_number,prompt_4,96,"['def funcImp(arg1, arg2):\n    indices = list(range(arg2))\n    indices.sort(key=lambda i: arg1[i])\n    for i in range(arg2, len(arg1)):\n        val = arg1[i]\n        if val < arg1[indices[-1]]:\n            pos = arg2 - 1\n            while pos > 0 and val < arg1[indices[pos - 1]]:\n                pos -= 1\n            for j in range(arg2 - 1, pos, -1):\n                indices[j] = indices[j - 1]\n            indices[pos] = i\n    return sorted(indices)']",10000,0.028697599889710546,0.029288916981313376,0.03373629995621741,N/A
p3_find_n_smallest_number,prompt_4,96,"['def funcImp(arg1, arg2):\n    indices = list(range(arg2))\n    indices.sort(key=lambda i: arg1[i])\n    for i in range(arg2, len(arg1)):\n        val = arg1[i]\n        if val < arg1[indices[-1]]:\n            pos = arg2 - 1\n            while pos > 0 and val < arg1[indices[pos - 1]]:\n                pos -= 1\n            for j in range(arg2 - 1, pos, -1):\n                indices[j] = indices[j - 1]\n            indices[pos] = i\n    return sorted(indices)']",100000,0.2768301998730749,0.28174795700469984,0.29717370006255805,N/A
p3_find_n_smallest_number,prompt_4,97,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx = list(range(len(arg1)))\n    idx_k_smallest = sorted(idx, key=lambda i: arg1[i])[:arg2]\n    return idx_k_smallest']",1000,0.006772400112822652,0.007161036999896168,0.009002300212159753,N/A
p3_find_n_smallest_number,prompt_4,97,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx = list(range(len(arg1)))\n    idx_k_smallest = sorted(idx, key=lambda i: arg1[i])[:arg2]\n    return idx_k_smallest']",10000,0.11122650001198053,0.1140747969946824,0.1204226000700146,N/A
p3_find_n_smallest_number,prompt_4,97,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    idx = list(range(len(arg1)))\n    idx_k_smallest = sorted(idx, key=lambda i: arg1[i])[:arg2]\n    return idx_k_smallest']",100000,1.6072989001404494,1.6368187780119479,1.68417640007101,N/A
p3_find_n_smallest_number,prompt_4,98,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    unique_nums = sorted(set(arg1))\n    k_smallest_nums = unique_nums[:arg2]\n    result = []\n    for num in k_smallest_nums:\n        result += index_dict[num][:arg2 - len(result)]\n        if len(result) == arg2:\n            break\n    return result']",1000,0.006245100172236562,0.006527871002908796,0.006854099920019507,N/A
p3_find_n_smallest_number,prompt_4,98,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    unique_nums = sorted(set(arg1))\n    k_smallest_nums = unique_nums[:arg2]\n    result = []\n    for num in k_smallest_nums:\n        result += index_dict[num][:arg2 - len(result)]\n        if len(result) == arg2:\n            break\n    return result']",10000,0.07406200002878904,0.07652377298101783,0.0790901998989284,N/A
p3_find_n_smallest_number,prompt_4,98,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    unique_nums = sorted(set(arg1))\n    k_smallest_nums = unique_nums[:arg2]\n    result = []\n    for num in k_smallest_nums:\n        result += index_dict[num][:arg2 - len(result)]\n        if len(result) == arg2:\n            break\n    return result']",100000,1.5815922999754548,1.6300412150099874,1.6881374998483807,N/A
p3_find_n_smallest_number,prompt_4,99,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(set(arg1))\n    count = 0\n    index = 0\n    k_smallest_indexes = []\n    while count < arg2 and index < len(sorted_list):\n        current = sorted_list[index]\n        current_indexes = index_dict[current]\n        if count + len(current_indexes) > arg2:\n            k_smallest_indexes.extend(current_indexes[:arg2 - count])\n            count = arg2\n            break\n        else:\n            k_smallest_indexes.extend(current_indexes)\n            count += len(current_indexes)\n            index += 1\n    return k_smallest_indexes']",1000,0.006195300025865436,0.006612124009989202,0.00977399991825223,N/A
p3_find_n_smallest_number,prompt_4,99,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(set(arg1))\n    count = 0\n    index = 0\n    k_smallest_indexes = []\n    while count < arg2 and index < len(sorted_list):\n        current = sorted_list[index]\n        current_indexes = index_dict[current]\n        if count + len(current_indexes) > arg2:\n            k_smallest_indexes.extend(current_indexes[:arg2 - count])\n            count = arg2\n            break\n        else:\n            k_smallest_indexes.extend(current_indexes)\n            count += len(current_indexes)\n            index += 1\n    return k_smallest_indexes']",10000,0.07306899991817772,0.07626748198177666,0.08769680000841618,N/A
p3_find_n_smallest_number,prompt_4,99,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_list = sorted(set(arg1))\n    count = 0\n    index = 0\n    k_smallest_indexes = []\n    while count < arg2 and index < len(sorted_list):\n        current = sorted_list[index]\n        current_indexes = index_dict[current]\n        if count + len(current_indexes) > arg2:\n            k_smallest_indexes.extend(current_indexes[:arg2 - count])\n            count = arg2\n            break\n        else:\n            k_smallest_indexes.extend(current_indexes)\n            count += len(current_indexes)\n            index += 1\n    return k_smallest_indexes']",100000,1.5853319000452757,1.6366609680000692,1.7102642999961972,N/A
p3_find_n_smallest_number,prompt_4,100,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:k]']",1000,0.007162900175899267,0.007542616997379809,0.008292400045320392,N/A
p3_find_n_smallest_number,prompt_4,100,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:k]']",10000,0.1099624999333173,0.1135963839944452,0.12406439986079931,N/A
p3_find_n_smallest_number,prompt_4,100,"['def funcImp(arg1, arg2):\n    k = arg2\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_idx = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_idx[:k]']",100000,1.6103207999840379,1.650322560989298,1.7110327000264078,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",1000,0.002775099826976657,0.0029923089989461003,0.004819800145924091,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",10000,0.026240300154313445,0.0272884720005095,0.029550000093877316,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",100000,0.2609647000208497,0.26874113600235433,0.3084688000380993,N/A
p3_find_n_smallest_number,prompt_5,2,"['def funcImp(arg1, arg2):\n    arg1.sort()\n    k_smallest = arg1[:arg2]\n    indexes = {}\n    for i, elem in enumerate(arg1):\n        indexes[elem] = i\n    result = []\n    for elem in k_smallest:\n        if elem in k_smallest:\n            result.append(indexes[elem])\n    return result']",1000,0.0029925000853836536,0.003143066007178277,0.004996099974960089,N/A
p3_find_n_smallest_number,prompt_5,2,"['def funcImp(arg1, arg2):\n    arg1.sort()\n    k_smallest = arg1[:arg2]\n    indexes = {}\n    for i, elem in enumerate(arg1):\n        indexes[elem] = i\n    result = []\n    for elem in k_smallest:\n        if elem in k_smallest:\n            result.append(indexes[elem])\n    return result']",10000,0.03001399990171194,0.03111740499502048,0.03544340003281832,N/A
p3_find_n_smallest_number,prompt_5,2,"['def funcImp(arg1, arg2):\n    arg1.sort()\n    k_smallest = arg1[:arg2]\n    indexes = {}\n    for i, elem in enumerate(arg1):\n        indexes[elem] = i\n    result = []\n    for elem in k_smallest:\n        if elem in k_smallest:\n            result.append(indexes[elem])\n    return result']",100000,0.6862129999790341,0.741902129992377,0.7994482999201864,N/A
p3_find_n_smallest_number,prompt_5,3,"['import random\n\ndef partition(arr, left, right, k):\n    pivot_index = random.randint(left, right)\n    pivot_value = arr[pivot_index]\n    left_index = left\n    for i in range(left, right + 1):\n        if arr[i] < pivot_value:\n            arr[left_index], arr[i] = (arr[i], arr[left_index])\n            left_index += 1\n    right_index = left_index\n    for i in range(left_index, right + 1):\n        if arr[i] == pivot_value:\n            arr[right_index], arr[i] = (arr[i], arr[right_index])\n            right_index += 1\n    if k < left_index - left:\n        return partition(arr, left, left_index - 1, k)\n    elif k < right_index - left:\n        return [left + i for i in range(k)]\n    else:\n        return partition(arr, right_index, right, k - (right_index - left))\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        return partition(arg1, 0, len(arg1) - 1, arg2)']",1000,0.007362900068983436,0.008247469980269671,0.009732299949973822,N/A
p3_find_n_smallest_number,prompt_5,3,"['import random\n\ndef partition(arr, left, right, k):\n    pivot_index = random.randint(left, right)\n    pivot_value = arr[pivot_index]\n    left_index = left\n    for i in range(left, right + 1):\n        if arr[i] < pivot_value:\n            arr[left_index], arr[i] = (arr[i], arr[left_index])\n            left_index += 1\n    right_index = left_index\n    for i in range(left_index, right + 1):\n        if arr[i] == pivot_value:\n            arr[right_index], arr[i] = (arr[i], arr[right_index])\n            right_index += 1\n    if k < left_index - left:\n        return partition(arr, left, left_index - 1, k)\n    elif k < right_index - left:\n        return [left + i for i in range(k)]\n    else:\n        return partition(arr, right_index, right, k - (right_index - left))\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        return partition(arg1, 0, len(arg1) - 1, arg2)']",10000,0.07075100019574165,0.08068763099610805,0.0961905000731349,N/A
p3_find_n_smallest_number,prompt_5,3,"['import random\n\ndef partition(arr, left, right, k):\n    pivot_index = random.randint(left, right)\n    pivot_value = arr[pivot_index]\n    left_index = left\n    for i in range(left, right + 1):\n        if arr[i] < pivot_value:\n            arr[left_index], arr[i] = (arr[i], arr[left_index])\n            left_index += 1\n    right_index = left_index\n    for i in range(left_index, right + 1):\n        if arr[i] == pivot_value:\n            arr[right_index], arr[i] = (arr[i], arr[right_index])\n            right_index += 1\n    if k < left_index - left:\n        return partition(arr, left, left_index - 1, k)\n    elif k < right_index - left:\n        return [left + i for i in range(k)]\n    else:\n        return partition(arr, right_index, right, k - (right_index - left))\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        return partition(arg1, 0, len(arg1) - 1, arg2)']",100000,0.8877359998878092,0.9598970279749482,1.0555265999864787,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",1000,0.009915400063619018,0.010134646010119468,0.010628200136125088,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",10000,0.07327499985694885,0.07485900999046863,0.07671379996463656,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",100000,1.143043200019747,1.1717897520191036,1.2599964998662472,N/A
p3_find_n_smallest_number,prompt_5,5,"['def partition(arr, start, end, pivot_index):\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[end] = (arr[end], arr[pivot_index])\n    left = start\n    right = end - 1\n    while left <= right:\n        while left <= right and arr[left] <= pivot:\n            left += 1\n        while left <= right and arr[right] > pivot:\n            right -= 1\n        if left <= right:\n            arr[left], arr[right] = (arr[right], arr[left])\n            left += 1\n            right -= 1\n    arr[left], arr[end] = (arr[end], arr[left])\n    return left\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k <= 0:\n        return []\n    if len(arr) == 0 or k > len(arr):\n        return []\n    start = 0\n    end = len(arr) - 1\n    while True:\n        pivot_index = start\n        pivot_index = partition(arr, start, end, pivot_index)\n        if pivot_index == k - 1:\n            break\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1\n    res = []\n    for i in range(k):\n        res.append([arr[i], i])\n    return res']",1000,0.010118300095200539,0.010602833009324969,0.012232000008225441,N/A
p3_find_n_smallest_number,prompt_5,5,"['def partition(arr, start, end, pivot_index):\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[end] = (arr[end], arr[pivot_index])\n    left = start\n    right = end - 1\n    while left <= right:\n        while left <= right and arr[left] <= pivot:\n            left += 1\n        while left <= right and arr[right] > pivot:\n            right -= 1\n        if left <= right:\n            arr[left], arr[right] = (arr[right], arr[left])\n            left += 1\n            right -= 1\n    arr[left], arr[end] = (arr[end], arr[left])\n    return left\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k <= 0:\n        return []\n    if len(arr) == 0 or k > len(arr):\n        return []\n    start = 0\n    end = len(arr) - 1\n    while True:\n        pivot_index = start\n        pivot_index = partition(arr, start, end, pivot_index)\n        if pivot_index == k - 1:\n            break\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1\n    res = []\n    for i in range(k):\n        res.append([arr[i], i])\n    return res']",10000,0.10402899980545044,0.10767079799668863,0.11702309991233051,N/A
p3_find_n_smallest_number,prompt_5,5,"['def partition(arr, start, end, pivot_index):\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[end] = (arr[end], arr[pivot_index])\n    left = start\n    right = end - 1\n    while left <= right:\n        while left <= right and arr[left] <= pivot:\n            left += 1\n        while left <= right and arr[right] > pivot:\n            right -= 1\n        if left <= right:\n            arr[left], arr[right] = (arr[right], arr[left])\n            left += 1\n            right -= 1\n    arr[left], arr[end] = (arr[end], arr[left])\n    return left\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k <= 0:\n        return []\n    if len(arr) == 0 or k > len(arr):\n        return []\n    start = 0\n    end = len(arr) - 1\n    while True:\n        pivot_index = start\n        pivot_index = partition(arr, start, end, pivot_index)\n        if pivot_index == k - 1:\n            break\n        elif pivot_index < k - 1:\n            start = pivot_index + 1\n        else:\n            end = pivot_index - 1\n    res = []\n    for i in range(k):\n        res.append([arr[i], i])\n    return res']",100000,1.1202612000051886,1.1472047539800405,1.1910682001616806,N/A
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arr, k):\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] < heapq.nlargest(1, pq, reverse=True)[0]:\n            heapq.heappushpop(pq, arr[i])\n    indexes = {}\n    for i in range(k):\n        indexes[arr.index(pq[i])] = i\n    return indexes']",1000,0,0,0,	 exception: nlargest() got an unexpected keyword argument 'reverse'
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arr, k):\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] < heapq.nlargest(1, pq, reverse=True)[0]:\n            heapq.heappushpop(pq, arr[i])\n    indexes = {}\n    for i in range(k):\n        indexes[arr.index(pq[i])] = i\n    return indexes']",10000,0,0,0,	 exception: nlargest() got an unexpected keyword argument 'reverse'
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arr, k):\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] < heapq.nlargest(1, pq, reverse=True)[0]:\n            heapq.heappushpop(pq, arr[i])\n    indexes = {}\n    for i in range(k):\n        indexes[arr.index(pq[i])] = i\n    return indexes']",100000,0,0,0,	 exception: nlargest() got an unexpected keyword argument 'reverse'
p3_find_n_smallest_number,prompt_5,7,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        index_dict[sorted_list[i]] = arg1.index(sorted_list[i])\n    result_list = []\n    for key in index_dict.keys():\n        if len(result_list) == arg2:\n            break\n        result_list.append(index_dict[key])\n    return result_list']",1000,0.00337349995970726,0.003539438000880182,0.00432629999704659,N/A
p3_find_n_smallest_number,prompt_5,7,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        index_dict[sorted_list[i]] = arg1.index(sorted_list[i])\n    result_list = []\n    for key in index_dict.keys():\n        if len(result_list) == arg2:\n            break\n        result_list.append(index_dict[key])\n    return result_list']",10000,0.08273310004733503,0.08667294102022424,0.09701590007171035,N/A
p3_find_n_smallest_number,prompt_5,7,"['def funcImp(arg1, arg2):\n    index_dict = {}\n    sorted_list = sorted(arg1)\n    for i in range(arg2):\n        index_dict[sorted_list[i]] = arg1.index(sorted_list[i])\n    result_list = []\n    for key in index_dict.keys():\n        if len(result_list) == arg2:\n            break\n        result_list.append(index_dict[key])\n    return result_list']",100000,1.2122481998521835,1.2398478500079364,1.323682100046426,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for i, num in enumerate(arg1):\n        if num in heap:\n            result.append(i)\n    return result']",1000,0.007334700087085366,0.007708680997602642,0.008279900066554546,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for i, num in enumerate(arg1):\n        if num in heap:\n            result.append(i)\n    return result']",10000,0.07658999995328486,0.07845110098598525,0.08400579984299839,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, k):\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heappushpop(heap, arg1[i])\n    result = []\n    for i, num in enumerate(arg1):\n        if num in heap:\n            result.append(i)\n    return result']",100000,0.7567636000458151,0.7760669780173339,0.8131323999259621,N/A
p3_find_n_smallest_number,prompt_5,9,"['def funcImp(arg1, k):\n    if len(arg1) < k:\n        return []\n    indices = [(index, value) for index, value in enumerate(arg1)]\n    indices = sorted(indices, key=lambda x: x[1])\n    smallest_indices = [index for index, value in indices[:k]]\n    return smallest_indices']",1000,0.009391400031745434,0.010016690003685652,0.011752699967473745,N/A
p3_find_n_smallest_number,prompt_5,9,"['def funcImp(arg1, k):\n    if len(arg1) < k:\n        return []\n    indices = [(index, value) for index, value in enumerate(arg1)]\n    indices = sorted(indices, key=lambda x: x[1])\n    smallest_indices = [index for index, value in indices[:k]]\n    return smallest_indices']",10000,0.14777819998562336,0.15649170397082343,0.1689307999331504,N/A
p3_find_n_smallest_number,prompt_5,9,"['def funcImp(arg1, k):\n    if len(arg1) < k:\n        return []\n    indices = [(index, value) for index, value in enumerate(arg1)]\n    indices = sorted(indices, key=lambda x: x[1])\n    smallest_indices = [index for index, value in indices[:k]]\n    return smallest_indices']",100000,2.3112183997873217,2.3763157099997625,2.549437299836427,N/A
p3_find_n_smallest_number,prompt_5,10,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, left, right, k):\n        if left == right:\n            return ([lst[left]], [left])\n        pivotIndex = partition(lst, left, right)\n        if k == pivotIndex - left + 1:\n            return (lst[left:pivotIndex + 1], list(range(left, pivotIndex + 1)))\n        elif k < pivotIndex - left + 1:\n            return quickselect(lst, left, pivotIndex - 1, k)\n        else:\n            return quickselect(lst, pivotIndex + 1, right, k - (pivotIndex - left + 1))\n\n    def partition(lst, left, right):\n        pivotIndex = (left + right) // 2\n        pivotValue = lst[pivotIndex]\n        lst[right], lst[pivotIndex] = (lst[pivotIndex], lst[right])\n        storeIndex = left\n        for i in range(left, right):\n            if lst[i] < pivotValue:\n                lst[i], lst[storeIndex] = (lst[storeIndex], lst[i])\n                storeIndex += 1\n        lst[right], lst[storeIndex] = (lst[storeIndex], lst[right])\n        return storeIndex\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",1000,0.005733600119128823,0.006009116994682699,0.007370600011199713,N/A
p3_find_n_smallest_number,prompt_5,10,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, left, right, k):\n        if left == right:\n            return ([lst[left]], [left])\n        pivotIndex = partition(lst, left, right)\n        if k == pivotIndex - left + 1:\n            return (lst[left:pivotIndex + 1], list(range(left, pivotIndex + 1)))\n        elif k < pivotIndex - left + 1:\n            return quickselect(lst, left, pivotIndex - 1, k)\n        else:\n            return quickselect(lst, pivotIndex + 1, right, k - (pivotIndex - left + 1))\n\n    def partition(lst, left, right):\n        pivotIndex = (left + right) // 2\n        pivotValue = lst[pivotIndex]\n        lst[right], lst[pivotIndex] = (lst[pivotIndex], lst[right])\n        storeIndex = left\n        for i in range(left, right):\n            if lst[i] < pivotValue:\n                lst[i], lst[storeIndex] = (lst[storeIndex], lst[i])\n                storeIndex += 1\n        lst[right], lst[storeIndex] = (lst[storeIndex], lst[right])\n        return storeIndex\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",10000,0.060183199821040034,0.06197535200277343,0.08227009978145361,N/A
p3_find_n_smallest_number,prompt_5,10,"['def funcImp(arg1, arg2):\n\n    def quickselect(lst, left, right, k):\n        if left == right:\n            return ([lst[left]], [left])\n        pivotIndex = partition(lst, left, right)\n        if k == pivotIndex - left + 1:\n            return (lst[left:pivotIndex + 1], list(range(left, pivotIndex + 1)))\n        elif k < pivotIndex - left + 1:\n            return quickselect(lst, left, pivotIndex - 1, k)\n        else:\n            return quickselect(lst, pivotIndex + 1, right, k - (pivotIndex - left + 1))\n\n    def partition(lst, left, right):\n        pivotIndex = (left + right) // 2\n        pivotValue = lst[pivotIndex]\n        lst[right], lst[pivotIndex] = (lst[pivotIndex], lst[right])\n        storeIndex = left\n        for i in range(left, right):\n            if lst[i] < pivotValue:\n                lst[i], lst[storeIndex] = (lst[storeIndex], lst[i])\n                storeIndex += 1\n        lst[right], lst[storeIndex] = (lst[storeIndex], lst[right])\n        return storeIndex\n    return quickselect(arg1, 0, len(arg1) - 1, arg2)']",100000,0.6437288001179695,0.7306295719952323,0.76129120006226,N/A
p3_find_n_smallest_number,prompt_5,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot fix the code without knowing what the actual code is. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot fix the code without knowing what the actual code is. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,11,"['{\'code\': None, \'raw\': ""I\'m sorry, but I cannot fix the code without knowing what the actual code is. Can you please provide the code that you are trying to compile?"", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,12,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: invalid input parameters'\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k <= len(lows):\n            return quickselect(lows, k)\n        elif k > len(lows) + len(pivots):\n            return quickselect(highs, k - len(lows) - len(pivots))\n        else:\n            return pivots[0]\n    kth_small = quickselect(arg1, arg2)\n    kth_indices = [i for i in range(len(arg1)) if arg1[i] == kth_small]\n    smallest_indices = kth_indices\n    for i in range(2, arg2 + 1):\n        remaining = [arg1[j] for j in range(len(arg1)) if j not in smallest_indices]\n        i_th_small = quickselect(remaining, arg2 - i + 1)\n        i_th_indices = [j for j in range(len(arg1)) if arg1[j] == i_th_small and j not in smallest_indices]\n        smallest_indices += i_th_indices\n    return smallest_indices""]",1000,0.05005880002863705,0.052083430995699016,0.06509610009379685,N/A
p3_find_n_smallest_number,prompt_5,12,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: invalid input parameters'\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k <= len(lows):\n            return quickselect(lows, k)\n        elif k > len(lows) + len(pivots):\n            return quickselect(highs, k - len(lows) - len(pivots))\n        else:\n            return pivots[0]\n    kth_small = quickselect(arg1, arg2)\n    kth_indices = [i for i in range(len(arg1)) if arg1[i] == kth_small]\n    smallest_indices = kth_indices\n    for i in range(2, arg2 + 1):\n        remaining = [arg1[j] for j in range(len(arg1)) if j not in smallest_indices]\n        i_th_small = quickselect(remaining, arg2 - i + 1)\n        i_th_indices = [j for j in range(len(arg1)) if arg1[j] == i_th_small and j not in smallest_indices]\n        smallest_indices += i_th_indices\n    return smallest_indices""]",10000,0.5794194000773132,0.5967167000146583,0.6540814000181854,N/A
p3_find_n_smallest_number,prompt_5,12,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: invalid input parameters'\n\n    def quickselect(lst, k):\n        if len(lst) == 1:\n            return lst[0]\n        pivot = lst[0]\n        lows = [x for x in lst if x < pivot]\n        highs = [x for x in lst if x > pivot]\n        pivots = [x for x in lst if x == pivot]\n        if k <= len(lows):\n            return quickselect(lows, k)\n        elif k > len(lows) + len(pivots):\n            return quickselect(highs, k - len(lows) - len(pivots))\n        else:\n            return pivots[0]\n    kth_small = quickselect(arg1, arg2)\n    kth_indices = [i for i in range(len(arg1)) if arg1[i] == kth_small]\n    smallest_indices = kth_indices\n    for i in range(2, arg2 + 1):\n        remaining = [arg1[j] for j in range(len(arg1)) if j not in smallest_indices]\n        i_th_small = quickselect(remaining, arg2 - i + 1)\n        i_th_indices = [j for j in range(len(arg1)) if arg1[j] == i_th_small and j not in smallest_indices]\n        smallest_indices += i_th_indices\n    return smallest_indices""]",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,13,"['def funcImp(arg1, k):\n    arg1_sorted = sorted(arg1)\n    smallest_numbers = {}\n    for i, num in enumerate(arg1_sorted):\n        if len(smallest_numbers) < k:\n            smallest_numbers[num] = i\n        elif num < max(smallest_numbers.keys()):\n            del smallest_numbers[max(smallest_numbers.keys())]\n            smallest_numbers[num] = i\n    return [smallest_numbers[num] for num in smallest_numbers.keys()]']",1000,0.013365500140935183,0.014148955009877682,0.015116999857127666,N/A
p3_find_n_smallest_number,prompt_5,13,"['def funcImp(arg1, k):\n    arg1_sorted = sorted(arg1)\n    smallest_numbers = {}\n    for i, num in enumerate(arg1_sorted):\n        if len(smallest_numbers) < k:\n            smallest_numbers[num] = i\n        elif num < max(smallest_numbers.keys()):\n            del smallest_numbers[max(smallest_numbers.keys())]\n            smallest_numbers[num] = i\n    return [smallest_numbers[num] for num in smallest_numbers.keys()]']",10000,0.18625260004773736,0.18961094599217176,0.19515669997781515,N/A
p3_find_n_smallest_number,prompt_5,13,"['def funcImp(arg1, k):\n    arg1_sorted = sorted(arg1)\n    smallest_numbers = {}\n    for i, num in enumerate(arg1_sorted):\n        if len(smallest_numbers) < k:\n            smallest_numbers[num] = i\n        elif num < max(smallest_numbers.keys()):\n            del smallest_numbers[max(smallest_numbers.keys())]\n            smallest_numbers[num] = i\n    return [smallest_numbers[num] for num in smallest_numbers.keys()]']",100000,2.2313954001292586,2.26653214601567,2.34694610000588,N/A
p3_find_n_smallest_number,prompt_5,14,"['def funcImp(arg1, arg2):\n    indices = {}\n    s_arr = sorted(arg1)\n    for i in range(arg2):\n        idx = arg1.index(s_arr[i])\n        indices[s_arr[i]] = idx\n    return dict(sorted(indices.items(), key=lambda item: item[1]))']",1000,0.0033909000921994448,0.0035278879920952024,0.003822699887678027,N/A
p3_find_n_smallest_number,prompt_5,14,"['def funcImp(arg1, arg2):\n    indices = {}\n    s_arr = sorted(arg1)\n    for i in range(arg2):\n        idx = arg1.index(s_arr[i])\n        indices[s_arr[i]] = idx\n    return dict(sorted(indices.items(), key=lambda item: item[1]))']",10000,0.08508299989625812,0.08718538999557496,0.09213129989802837,N/A
p3_find_n_smallest_number,prompt_5,14,"['def funcImp(arg1, arg2):\n    indices = {}\n    s_arr = sorted(arg1)\n    for i in range(arg2):\n        idx = arg1.index(s_arr[i])\n        indices[s_arr[i]] = idx\n    return dict(sorted(indices.items(), key=lambda item: item[1]))']",100000,1.213878900045529,1.2376710109901614,1.300264900084585,N/A
p3_find_n_smallest_number,prompt_5,15,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: Array must have at least k elements'""]",1000,8.499948307871819e-06,9.104001801460981e-06,1.209997572004795e-05,N/A
p3_find_n_smallest_number,prompt_5,15,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: Array must have at least k elements'""]",10000,8.599832653999329e-06,9.210016578435898e-06,1.5999889001250267e-05,N/A
p3_find_n_smallest_number,prompt_5,15,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: Array must have at least k elements'""]",100000,8.600065484642982e-06,9.124001953750849e-06,1.3200100511312485e-05,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    result = []\n    heap = []\n    k = arg2\n    for i, item in enumerate(arg1):\n        index_dict[item] = i\n        if len(heap) < k:\n            heapq.heappush(heap, (-item, i))\n        elif item < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-item, i))\n    for i in heap:\n        result.append(index_dict[i[1]])\n    return result']",1000,0.005983599927276373,0.00624420999083668,0.0068316999822855,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    result = []\n    heap = []\n    k = arg2\n    for i, item in enumerate(arg1):\n        index_dict[item] = i\n        if len(heap) < k:\n            heapq.heappush(heap, (-item, i))\n        elif item < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-item, i))\n    for i in heap:\n        result.append(index_dict[i[1]])\n    return result']",10000,0.059262000024318695,0.0603365989937447,0.06407490000128746,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_dict = {}\n    result = []\n    heap = []\n    k = arg2\n    for i, item in enumerate(arg1):\n        index_dict[item] = i\n        if len(heap) < k:\n            heapq.heappush(heap, (-item, i))\n        elif item < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-item, i))\n    for i in heap:\n        result.append(index_dict[i[1]])\n    return result']",100000,0.8531112000346184,0.8871879789861851,0.9921744999010116,N/A
p3_find_n_smallest_number,prompt_5,17,"[""{'code': None, 'raw': 'I apologize, but there is no prior code in this conversation. Can you please provide the code you are referring to so that I can assist you in fixing it?', 'success': False, 'error': None}""]",1000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,17,"[""{'code': None, 'raw': 'I apologize, but there is no prior code in this conversation. Can you please provide the code you are referring to so that I can assist you in fixing it?', 'success': False, 'error': None}""]",10000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,17,"[""{'code': None, 'raw': 'I apologize, but there is no prior code in this conversation. Can you please provide the code you are referring to so that I can assist you in fixing it?', 'success': False, 'error': None}""]",100000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, el in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-el, i))\n        elif el < -heap[0][0]:\n            heapq.heappushpop(heap, (-el, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",1000,0.003951699938625097,0.004167464000638574,0.004580900073051453,N/A
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, el in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-el, i))\n        elif el < -heap[0][0]:\n            heapq.heappushpop(heap, (-el, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",10000,0.038512099999934435,0.04017591000301764,0.04348400002345443,N/A
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, el in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-el, i))\n        elif el < -heap[0][0]:\n            heapq.heappushpop(heap, (-el, i))\n    indices = []\n    while heap:\n        indices.append(heapq.heappop(heap)[1])\n    return indices']",100000,0.3947596000507474,0.4027094770059921,0.42706639994867146,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    return heap']",1000,0.004823500057682395,0.005096427996177226,0.006606499897316098,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    return heap']",10000,0.05412440001964569,0.05540957497898489,0.05934239993803203,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[-1]:\n            heapq.heapreplace(heap, arg1[i])\n    return heap']",100000,0.5439380998723209,0.5539876029943116,0.6017100000753999,N/A
p3_find_n_smallest_number,prompt_5,20,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code in this conversation. Please provide the code that you want to update or fix."", \'success\': False, \'error\': None}']",1000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,20,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code in this conversation. Please provide the code that you want to update or fix."", \'success\': False, \'error\': None}']",10000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,20,"['{\'code\': None, \'raw\': ""I\'m sorry, but there is no prior code in this conversation. Please provide the code that you want to update or fix."", \'success\': False, \'error\': None}']",100000,0,0,0,"function_index: prompt_5 , code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_5,21,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    result = [-1] * arg2\n    for elem in sorted_arr:\n        if elem < sorted_arr[result[0]] or result[0] == -1:\n            result[0] = sorted_arr.index(elem)\n            result.sort()\n    return result']",1000,0.005263700149953365,0.005574972999747843,0.009183799847960472,N/A
p3_find_n_smallest_number,prompt_5,21,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    result = [-1] * arg2\n    for elem in sorted_arr:\n        if elem < sorted_arr[result[0]] or result[0] == -1:\n            result[0] = sorted_arr.index(elem)\n            result.sort()\n    return result']",10000,0.09936259989626706,0.10197075399570167,0.10804329998791218,N/A
p3_find_n_smallest_number,prompt_5,21,"['def funcImp(arg1, arg2):\n    sorted_arr = sorted(arg1)\n    result = [-1] * arg2\n    for elem in sorted_arr:\n        if elem < sorted_arr[result[0]] or result[0] == -1:\n            result[0] = sorted_arr.index(elem)\n            result.sort()\n    return result']",100000,1.3603656000923365,1.4147380090178923,1.6355157000944018,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    kth_smallest_num = sorted_array[arg2 - 1]\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest_num:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",1000,0.0034263001289218664,0.0036336160078644752,0.004064899869263172,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    kth_smallest_num = sorted_array[arg2 - 1]\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest_num:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",10000,0.08809370012022555,0.09136795000638813,0.11198569997213781,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    k_smallest_indexes = []\n    kth_smallest_num = sorted_array[arg2 - 1]\n    for i, num in enumerate(arg1):\n        if num <= kth_smallest_num:\n            k_smallest_indexes.append(i)\n            if len(k_smallest_indexes) == arg2:\n                break\n    return k_smallest_indexes']",100000,1.252464400138706,1.2904683250002562,1.3964362000115216,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",1000,0.005518699996173382,0.005747120003215969,0.006668299902230501,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",10000,0.05894649983383715,0.06130290999310091,0.0737106001470238,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heappushpop(heap, arg1[i])\n    indexes = []\n    for i in range(len(arg1)):\n        if arg1[i] in heap:\n            indexes.append(i)\n    return indexes']",100000,0.5212061998900026,0.5358650509966537,0.5702076000161469,N/A
p3_find_n_smallest_number,prompt_5,24,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, val in enumerate(arg1):\n        dict_index[val] = i\n    min_k = sorted(dict_index.keys())[:arg2]\n    return [dict_index[x] for x in min_k]']",1000,0.006065400084480643,0.006558008007705212,0.010460400022566319,N/A
p3_find_n_smallest_number,prompt_5,24,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, val in enumerate(arg1):\n        dict_index[val] = i\n    min_k = sorted(dict_index.keys())[:arg2]\n    return [dict_index[x] for x in min_k]']",10000,0.1107495001051575,0.11404935499420389,0.12719569983892143,N/A
p3_find_n_smallest_number,prompt_5,24,"['def funcImp(arg1, arg2):\n    dict_index = {}\n    for i, val in enumerate(arg1):\n        dict_index[val] = i\n    min_k = sorted(dict_index.keys())[:arg2]\n    return [dict_index[x] for x in min_k]']",100000,1.6811653999611735,1.7317044460005127,1.8107743998989463,N/A
p3_find_n_smallest_number,prompt_5,25,"['from typing import List\n\ndef quick_select(nums: List[int], k: int) -> int:\n    if not nums:\n        return None\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    right = [x for x in nums if x > pivot]\n    mid = [x for x in nums if x == pivot]\n    if k < len(left):\n        return quick_select(left, k)\n    elif k < len(left) + len(mid):\n        return mid[0]\n    else:\n        return quick_select(right, k - len(left) - len(mid))\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    kth_smallest = quick_select(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indexes']",1000,0.009200699860230088,0.009875298005063086,0.014945199945941567,N/A
p3_find_n_smallest_number,prompt_5,25,"['from typing import List\n\ndef quick_select(nums: List[int], k: int) -> int:\n    if not nums:\n        return None\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    right = [x for x in nums if x > pivot]\n    mid = [x for x in nums if x == pivot]\n    if k < len(left):\n        return quick_select(left, k)\n    elif k < len(left) + len(mid):\n        return mid[0]\n    else:\n        return quick_select(right, k - len(left) - len(mid))\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    kth_smallest = quick_select(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indexes']",10000,0.1417759999167174,0.14619083199184388,0.1596910001244396,N/A
p3_find_n_smallest_number,prompt_5,25,"['from typing import List\n\ndef quick_select(nums: List[int], k: int) -> int:\n    if not nums:\n        return None\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    right = [x for x in nums if x > pivot]\n    mid = [x for x in nums if x == pivot]\n    if k < len(left):\n        return quick_select(left, k)\n    elif k < len(left) + len(mid):\n        return mid[0]\n    else:\n        return quick_select(right, k - len(left) - len(mid))\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    kth_smallest = quick_select(arg1, arg2 - 1)\n    indexes = [i for i, x in enumerate(arg1) if x <= kth_smallest][:arg2]\n    return indexes']",100000,1.0597169001121074,1.0885807020007632,1.1547634999733418,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = heapq.nlargest(arg2, arg1)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n    result = []\n    for i in max_heap:\n        result.append(arg1.index(i))\n    return result']",1000,0.004246400203555822,0.004461143999360501,0.006314599886536598,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = heapq.nlargest(arg2, arg1)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n    result = []\n    for i in max_heap:\n        result.append(arg1.index(i))\n    return result']",10000,0.035018600057810545,0.03673409499693662,0.045180900022387505,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = heapq.nlargest(arg2, arg1)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n    result = []\n    for i in max_heap:\n        result.append(arg1.index(i))\n    return result']",100000,0.3461279000621289,0.35558112502330913,0.3741812000516802,N/A
p3_find_n_smallest_number,prompt_5,27,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",1000,0.003283600090071559,0.003460797988809645,0.003861099947243929,N/A
p3_find_n_smallest_number,prompt_5,27,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",10000,0.08429330005310476,0.08670387198682875,0.10696240002289414,N/A
p3_find_n_smallest_number,prompt_5,27,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    smallest_indexes = []\n    for i in range(arg2):\n        smallest_indexes.append(arg1.index(sorted_list[i]))\n    return smallest_indexes']",100000,1.2046515999827534,1.2252797649847345,1.2750534999649972,N/A
p3_find_n_smallest_number,prompt_5,28,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, k):\n        low = 0\n        high = len(arr) - 1\n        while True:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda x: arr[x])\n            elif pivot_index < k - 1:\n                low = pivot_index + 1\n            else:\n                high = pivot_index - 1\n    return quickselect(arg1, arg2)']",1000,2.0135650001466274,2.1348612210014837,2.252036700025201,N/A
p3_find_n_smallest_number,prompt_5,28,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, k):\n        low = 0\n        high = len(arr) - 1\n        while True:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda x: arr[x])\n            elif pivot_index < k - 1:\n                low = pivot_index + 1\n            else:\n                high = pivot_index - 1\n    return quickselect(arg1, arg2)']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,28,"['def funcImp(arg1, arg2):\n\n    def partition(arr, low, high):\n        i = low - 1\n        pivot = arr[high]\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        return i + 1\n\n    def quickselect(arr, k):\n        low = 0\n        high = len(arr) - 1\n        while True:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return sorted(range(k), key=lambda x: arr[x])\n            elif pivot_index < k - 1:\n                low = pivot_index + 1\n            else:\n                high = pivot_index - 1\n    return quickselect(arg1, arg2)']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,29,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    index_list = []\n    for i in range(arg2):\n        index_list.append(arg1.index(sorted_list[i]))\n    return index_list']",1000,0.003258700016885996,0.0034699060139246284,0.0038428001571446657,N/A
p3_find_n_smallest_number,prompt_5,29,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    index_list = []\n    for i in range(arg2):\n        index_list.append(arg1.index(sorted_list[i]))\n    return index_list']",10000,0.08485860005021095,0.08687675998546183,0.09573299996554852,N/A
p3_find_n_smallest_number,prompt_5,29,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    index_list = []\n    for i in range(arg2):\n        index_list.append(arg1.index(sorted_list[i]))\n    return index_list']",100000,1.2109763999469578,1.2343960670055822,1.2822233999613672,N/A
p3_find_n_smallest_number,prompt_5,30,"[""def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k.')\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n    return sorted(result)""]",1000,0.00844390015117824,0.008781754996161907,0.010491800028830767,N/A
p3_find_n_smallest_number,prompt_5,30,"[""def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k.')\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n    return sorted(result)""]",10000,0.13630799995735288,0.13945269799092785,0.14479369996115565,N/A
p3_find_n_smallest_number,prompt_5,30,"[""def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k.')\n    index_dict = {}\n    for i, num in enumerate(arg1):\n        if num in index_dict:\n            index_dict[num].append(i)\n        else:\n            index_dict[num] = [i]\n    sorted_nums = sorted(arg1)[:arg2]\n    result = []\n    for num in sorted_nums:\n        result.extend(index_dict[num][:arg2 - len(result)])\n    return sorted(result)""]",100000,2.2045217000413686,2.247115647015162,2.3640382001176476,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    smallest_k = heapq.nsmallest(arg2, sorted_list, key=lambda x: x[1])\n    return [i[0] for i in smallest_k]']",1000,0.011505200061947107,0.012273942003957927,0.0137339998036623,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    smallest_k = heapq.nsmallest(arg2, sorted_list, key=lambda x: x[1])\n    return [i[0] for i in smallest_k]']",10000,0.1739465999417007,0.18336094199446962,0.19605819997377694,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    smallest_k = heapq.nsmallest(arg2, sorted_list, key=lambda x: x[1])\n    return [i[0] for i in smallest_k]']",100000,2.7992377001792192,3.012090487985406,3.8138186000287533,N/A
p3_find_n_smallest_number,prompt_5,32,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, kth, start, end):\n        if start == end:\n            return start\n        pivot_idx = random.randint(start, end)\n        pivot_val = arr[pivot_idx]\n        arr[pivot_idx], arr[end] = (arr[end], arr[pivot_idx])\n        smaller_idx = start\n        for i in range(start, end):\n            if arr[i] < pivot_val:\n                arr[i], arr[smaller_idx] = (arr[smaller_idx], arr[i])\n                smaller_idx += 1\n        arr[smaller_idx], arr[end] = (arr[end], arr[smaller_idx])\n        if kth == smaller_idx - start:\n            return smaller_idx\n        elif kth < smaller_idx - start:\n            return quickselect(arr, kth, start, smaller_idx - 1)\n        else:\n            return quickselect(arr, kth - (smaller_idx - start + 1), smaller_idx + 1, end)\n    kth_idx = quickselect(arg1, arg2 - 1, 0, len(arg1) - 1)\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",1000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,32,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, kth, start, end):\n        if start == end:\n            return start\n        pivot_idx = random.randint(start, end)\n        pivot_val = arr[pivot_idx]\n        arr[pivot_idx], arr[end] = (arr[end], arr[pivot_idx])\n        smaller_idx = start\n        for i in range(start, end):\n            if arr[i] < pivot_val:\n                arr[i], arr[smaller_idx] = (arr[smaller_idx], arr[i])\n                smaller_idx += 1\n        arr[smaller_idx], arr[end] = (arr[end], arr[smaller_idx])\n        if kth == smaller_idx - start:\n            return smaller_idx\n        elif kth < smaller_idx - start:\n            return quickselect(arr, kth, start, smaller_idx - 1)\n        else:\n            return quickselect(arr, kth - (smaller_idx - start + 1), smaller_idx + 1, end)\n    kth_idx = quickselect(arg1, arg2 - 1, 0, len(arg1) - 1)\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",10000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,32,"['def funcImp(arg1, arg2):\n\n    def quickselect(arr, kth, start, end):\n        if start == end:\n            return start\n        pivot_idx = random.randint(start, end)\n        pivot_val = arr[pivot_idx]\n        arr[pivot_idx], arr[end] = (arr[end], arr[pivot_idx])\n        smaller_idx = start\n        for i in range(start, end):\n            if arr[i] < pivot_val:\n                arr[i], arr[smaller_idx] = (arr[smaller_idx], arr[i])\n                smaller_idx += 1\n        arr[smaller_idx], arr[end] = (arr[end], arr[smaller_idx])\n        if kth == smaller_idx - start:\n            return smaller_idx\n        elif kth < smaller_idx - start:\n            return quickselect(arr, kth, start, smaller_idx - 1)\n        else:\n            return quickselect(arr, kth - (smaller_idx - start + 1), smaller_idx + 1, end)\n    kth_idx = quickselect(arg1, arg2 - 1, 0, len(arg1) - 1)\n    return sorted(range(len(arg1)), key=lambda i: arg1[i])[:arg2]']",100000,0,0,0,	 exception: name 'random' is not defined
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1[i:])\n        min_index = arg1.index(min_val)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n        indexes.append(min_index)\n    return indexes']",1000,0.002789400052279234,0.0029697069991379975,0.0036116999108344316,N/A
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1[i:])\n        min_index = arg1.index(min_val)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n        indexes.append(min_index)\n    return indexes']",10000,0.027836000081151724,0.029650981009472163,0.0487075001001358,N/A
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    indexes = []\n    for i in range(arg2):\n        min_val = min(arg1[i:])\n        min_index = arg1.index(min_val)\n        arg1[i], arg1[min_index] = (arg1[min_index], arg1[i])\n        indexes.append(min_index)\n    return indexes']",100000,0.31975780008360744,0.36106455098371953,0.4495898000895977,N/A
p3_find_n_smallest_number,prompt_5,34,"['def funcImp(arg1, arg2):\n\n    def quick_select(lst, left, right, k):\n        if left == right:\n            return left\n        pivot_index = median_of_three_partition(lst, left, right)\n        count = left\n        for i in range(left, right):\n            if lst[i] <= lst[pivot_index]:\n                lst[i], lst[count] = (lst[count], lst[i])\n                count += 1\n        lst[right], lst[count] = (lst[count], lst[right])\n        if count == k:\n            return count\n        if count > k:\n            return quick_select(lst, left, count - 1, k)\n        return quick_select(lst, count + 1, right, k - count)\n    result = []\n    index = 0\n    for i in range(arg2):\n        index = quick_select(arg1, index, len(arg1) - 1, i)\n        result.append(index)\n    return result\n\ndef median_of_three_partition(lst, left, right):\n    mid = (left + right) // 2\n    if lst[right] < lst[left]:\n        lst[right], lst[left] = (lst[left], lst[right])\n    if lst[mid] < lst[left]:\n        lst[mid], lst[left] = (lst[left], lst[mid])\n    if lst[right] < lst[mid]:\n        lst[right], lst[mid] = (lst[mid], lst[right])\n    return mid']",1000,0.02672540000639856,0.029187862002290784,0.03272780007682741,N/A
p3_find_n_smallest_number,prompt_5,34,"['def funcImp(arg1, arg2):\n\n    def quick_select(lst, left, right, k):\n        if left == right:\n            return left\n        pivot_index = median_of_three_partition(lst, left, right)\n        count = left\n        for i in range(left, right):\n            if lst[i] <= lst[pivot_index]:\n                lst[i], lst[count] = (lst[count], lst[i])\n                count += 1\n        lst[right], lst[count] = (lst[count], lst[right])\n        if count == k:\n            return count\n        if count > k:\n            return quick_select(lst, left, count - 1, k)\n        return quick_select(lst, count + 1, right, k - count)\n    result = []\n    index = 0\n    for i in range(arg2):\n        index = quick_select(arg1, index, len(arg1) - 1, i)\n        result.append(index)\n    return result\n\ndef median_of_three_partition(lst, left, right):\n    mid = (left + right) // 2\n    if lst[right] < lst[left]:\n        lst[right], lst[left] = (lst[left], lst[right])\n    if lst[mid] < lst[left]:\n        lst[mid], lst[left] = (lst[left], lst[mid])\n    if lst[right] < lst[mid]:\n        lst[right], lst[mid] = (lst[mid], lst[right])\n    return mid']",10000,0.2171032999176532,0.2872071540006436,0.4000405000988394,N/A
p3_find_n_smallest_number,prompt_5,34,"['def funcImp(arg1, arg2):\n\n    def quick_select(lst, left, right, k):\n        if left == right:\n            return left\n        pivot_index = median_of_three_partition(lst, left, right)\n        count = left\n        for i in range(left, right):\n            if lst[i] <= lst[pivot_index]:\n                lst[i], lst[count] = (lst[count], lst[i])\n                count += 1\n        lst[right], lst[count] = (lst[count], lst[right])\n        if count == k:\n            return count\n        if count > k:\n            return quick_select(lst, left, count - 1, k)\n        return quick_select(lst, count + 1, right, k - count)\n    result = []\n    index = 0\n    for i in range(arg2):\n        index = quick_select(arg1, index, len(arg1) - 1, i)\n        result.append(index)\n    return result\n\ndef median_of_three_partition(lst, left, right):\n    mid = (left + right) // 2\n    if lst[right] < lst[left]:\n        lst[right], lst[left] = (lst[left], lst[right])\n    if lst[mid] < lst[left]:\n        lst[mid], lst[left] = (lst[left], lst[mid])\n    if lst[right] < lst[mid]:\n        lst[right], lst[mid] = (lst[mid], lst[right])\n    return mid']",100000,2.003763400018215,3.2541288479953074,3.9473612001165748,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    index_dict = {heap[i]: i for i in range(k)}\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            continue\n        else:\n            heapq.heappushpop(heap, arg1[i])\n            index_dict[arg1[i]] = i\n    return [index_dict[x] for x in heap]']",1000,0.0022766999900341034,0.0024046949902549386,0.0034904000349342823,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    index_dict = {heap[i]: i for i in range(k)}\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            continue\n        else:\n            heapq.heappushpop(heap, arg1[i])\n            index_dict[arg1[i]] = i\n    return [index_dict[x] for x in heap]']",10000,0.019887899979948997,0.020915898005478085,0.024986800039187074,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    heap = arg1[:k]\n    heapq.heapify(heap)\n    index_dict = {heap[i]: i for i in range(k)}\n    for i in range(k, len(arg1)):\n        if arg1[i] <= heap[0]:\n            continue\n        else:\n            heapq.heappushpop(heap, arg1[i])\n            index_dict[arg1[i]] = i\n    return [index_dict[x] for x in heap]']",100000,0.19868510006926954,0.21021969402208923,0.2424995000474155,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arr, k):\n    min_heap = [(value, index) for index, value in enumerate(arr[:k])]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",1000,0.0023068999871611595,0.0024450799962505696,0.0039363999385386705,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arr, k):\n    min_heap = [(value, index) for index, value in enumerate(arr[:k])]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",10000,0.022621499840170145,0.024074640984181314,0.0307564998511225,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arr, k):\n    min_heap = [(value, index) for index, value in enumerate(arr[:k])]\n    heapq.heapify(min_heap)\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arr[i], i))\n    return [x[1] for x in sorted(min_heap)]']",100000,0.22732220008037984,0.240354283999186,0.3132084000390023,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    result = []\n    for i in heap:\n        result.append(arg1.index(i))\n    return result']",1000,0.006554699968546629,0.006660874995868653,0.007193499943241477,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    result = []\n    for i in heap:\n        result.append(arg1.index(i))\n    return result']",10000,0.04853320005349815,0.05098045200807974,0.061413299990817904,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in arg1[arg2:]:\n        if i < heap[-1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    result = []\n    for i in heap:\n        result.append(arg1.index(i))\n    return result']",100000,0.7617973000742495,0.7958819370018319,1.1542009999975562,N/A
p3_find_n_smallest_number,prompt_5,38,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(sorted_list[i]) for i in range(arg2)]\n    return indexes']",1000,0.0033026000019162893,0.0036054960056208073,0.004798100097104907,N/A
p3_find_n_smallest_number,prompt_5,38,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(sorted_list[i]) for i in range(arg2)]\n    return indexes']",10000,0.08578240009956062,0.08771015600766986,0.09397390019148588,N/A
p3_find_n_smallest_number,prompt_5,38,"['def funcImp(arg1, arg2):\n    sorted_list = sorted(arg1)\n    indexes = [arg1.index(sorted_list[i]) for i in range(arg2)]\n    return indexes']",100000,1.226329700089991,1.2802226410107687,1.5933403000235558,N/A
p3_find_n_smallest_number,prompt_5,39,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_indexes = []\n    for i in range(0, arg2):\n        smallest_indexes.append(arg1.index(sorted_array[i]))\n    return smallest_indexes']",1000,0.003292700042948127,0.0036072339862585068,0.004972399910911918,N/A
p3_find_n_smallest_number,prompt_5,39,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_indexes = []\n    for i in range(0, arg2):\n        smallest_indexes.append(arg1.index(sorted_array[i]))\n    return smallest_indexes']",10000,0.08587360009551048,0.08884330899920315,0.09517919993959367,N/A
p3_find_n_smallest_number,prompt_5,39,"['def funcImp(arg1, arg2):\n    sorted_array = sorted(arg1)\n    smallest_indexes = []\n    for i in range(0, arg2):\n        smallest_indexes.append(arg1.index(sorted_array[i]))\n    return smallest_indexes']",100000,1.2207306001801044,1.2659389310027473,1.4588468000292778,N/A
